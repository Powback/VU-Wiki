class AABBData : BaseShapeData {
	Vec3 Position;
	Vec3 HalfExtents;
}

class AbstractAwardData : TreeNodeBase {
}

class AbstractLeaderboardData : DataContainer {
	string LeaderboardName;
}

class AbstractLocoWaypointData : WaypointData {
	AILocoBaseTaskData BaseTask;
}

class AbstractPersistenceData : Asset {
}

class AbstractPersistentStatRef : DataContainer {
}

class ActionNode : UINodeData {
	int32 ActionKey;
	string[] Params;
	Asset ActionAsset;
	UINodePort In;
	UINodePort Out;
	UINodePort[] DataInputs;
	bool AppendIncomingParams;
}

class AdsrNodeData : AudioGraphNodeData {
	AudioGraphNodePort Trigger;
	AudioGraphNodePort Release;
	AudioGraphNodePort A;
	AudioGraphNodePort D;
	AudioGraphNodePort S;
	AudioGraphNodePort R;
	AudioGraphNodePort Value;
	AudioGraphNodePort Finished;
}

class AdvancedDogTagData : DogTagData {
	string StatCode;
	string StatSID;
	bool IsStatMeasuredInTime;
}

class AdvertisementComponentData : PartComponentData {
	string Identifier;
	string AdTexture;
}

class AdvertisementLevelDescriptionComponent : LevelDescriptionComponent {
	string Identifier;
	AdvertisementZoneMember[] Members;
}

class AeroDynamicPhysicsData : DataContainer {
	Vec3 BodyDrag;
	Vec3 BodyDragOffsetYZ;
	Vec3 BodyDragOffsetXZ;
	Vec3 BodyDragOffsetXY;
}

class AIAimingConstraintsData : DataContainer {
	float MinYaw;
	float MaxYaw;
	float MinPitch;
	float MaxPitch;
}

class AIDifficultyData : GameAIDifficultyData {
	string Name;
	float AccuracyIncreaseTimeModifier;
	float StartAccuracyModifierStanding;
	float StartAccuracyModifierCrouching;
	float FinalAccuracyModifierStanding;
	float FinalAccuracyModifierCrouching;
	float ReadinessReactionTimeMultiplier;
}

class AIEntryData : GameAIEntryData {
	AIVehicleBehaviourData EquipmentType;
	ArmamentData Armament;
	MobilityData Mobility;
	StrengthType StrengthType;
	float ReuseTime;
	bool Forbidden;
	bool HasExposedSoldier;
	bool InterludeOnly;
	bool InvalidForAI;
}

class AiffWriterNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Start;
	AudioGraphNodePort Stop;
	SoundGraphPluginRef Plugin;
	string FileName;
}

class AILocoComponentData : ComponentData {
	AILocoBinding Binding;
	AILocoVaultBinding VaultBinding;
	AILocoCoverBinding CoverBinding;
	float WantedYaw;
	int32 AnimationEntitySpacePriority;
}

class AimAtOrderEntityData : BFOrderEntityData {
}

class AimerModifierData : Asset {
	float LookSpeedMultiplier;
	bool OnlyInSupportedShooting;
}

class AimingConstraintEntityCommonData : Asset {
	AimingConstraintEntityBinding AimingConstraintsBinding;
	AimingConstraintsData AimingConstraints;
	float DisableAimingConstraintsDelay;
	float ConstraintMoveSpeedMultiplier;
	float ShuffleAnimationThreshold;
	float ShuffleAnimationDelay;
}

class AimingConstraintEntityData : EntityData {
	AimingConstraintEntityCommonData CommonData;
	bool EnabledInProne;
}

class AIProximityReactionsComponentData : ComponentData {
	AIProximityReactionsBinding Binding;
	float MinExplosionImpulseForce;
	float MaxExplosionLookDistance;
	float FireReactionDistance;
	bool Enabled;
}

class AirRadarData : UIPartData {
	float RadarRange;
	float RadarSensitivity;
	float HeatSensitivity;
	UIHudIcon MissileIcon;
	UIHudIcon CenterIcon;
	UIHudIcon FriendlyIcon;
	UIHudIcon EnemyIcon;
	UIHudIcon LaserPaintedIcon;
	UIHudIcon NorthIcon;
	SubScreenData SubScreen;
	UIHudIcon WestIcon;
	UIHudIcon SouthIcon;
	UIHudIcon EastIcon;
	bool TrackLaserPaintedObjects;
	bool TrackOnlyUsedVehicles;
	bool UseCameraComponentTransform;
}

class AirResistanceData : ProcessorData {
	float DragFactor;
}

class AISettingsData : Asset {
	SoundEnvironmentConstantData SoundEnvironmentConstants;
	CoverConstantData CoverConstants;
	DecisionConstantData DecisionConstants;
	PositionEvaluationConstantData PositionEvaluationConstants;
	TimingConstantData TimingConstants;
	DebugConstantData DebugConstants;
	ReadinessLevels ReadinessLevels;
	BehaviourTemplateData DefaultBehaviourTemplate;
	AIVehicleBehaviourData DefaultVehicleType;
}

class AISystemAsset : GameAISystem {
	AIVehicleTypes Behaviours;
	OrderSettings Orders;
	AISettingsData Settings;
}

class AIVehicleBehaviourData : DataContainer {
	string Name;
	string[] Controls;
	string[] Behaviours;
	string[] Goals;
	IntentData[] Intents;
}

class AIVehicleTypes : Asset {
	AIVehicleBehaviourData[] VehicleTypes;
	BehaviourData[] Goals;
	BehaviourData[] Intents;
}

class AIWeaponData : GameAIWeaponData {
	Strengths Strengths;
	float MaxBurstCoolDownTime;
	float LostTargetBurstCoolDownModifier;
	float FinalAccuracyPercentage;
	float AimTransitionFireDelay;
	float MinRange;
	float MaxRange;
	float OptimalRangePercentage;
	ReloadBehavior ReloadBehavior;
	float MinExtraReloadTime;
	float MaxExtraReloadTime;
	float MinBurstCoolDownTime;
	float AimAngularVelocity;
	float InnerInaccurateDistance;
	float AngleToTargetSnap;
	float SweepDistance;
	float SweepTime;
	float WaitTimeBeforeFire;
	BurstLimit BurstLimitNear;
	BurstLimit BurstLimitFar;
	float StartAccuracyPercentage;
	float MinimumAccuracyBeforeFiring;
	float OuterInaccurateDistance;
	float AdditionalMinimumAccuracyAtMinRange;
	float GravityModifier;
	SweepSelectionType SweepType;
	AimOrigin AimOrigin;
	bool UseZoom;
	bool AllowedAgainstImmortals;
	bool AimWhileReloading;
	bool AimHighIndirectPath;
	bool Indirect;
	bool IsMelee;
	bool SweepFirstAttack;
	bool IsBlindFireAllowed;
	bool CanAltAttack;
	bool IsStandStill;
	bool CanSuppress;
	bool UseFromCover;
	bool InaccuracyFollowsTarget;
	bool UseInaccuracyAtCloseRange;
	bool DisableWeaponSway;
	bool IsAiAllowed;
}

class AlignmentData : DataContainer {
	EntryInputActionEnum AlignAction;
	float StopTolerance;
	float Speed;
}

class AllowedVehiclesData : DataContainer {
}

class AlternateCameraViewData : DataContainer {
	Vec3 MeshOffset;
	HudData Hud;
	float FieldOfView;
	float WorldSpaceLockEfficiency;
	RigidMeshAsset Mesh;
	ObjectBlueprint MaskMeshBlueprint;
	float FadeInDuration;
	float FovTransitionTime;
	float BlackDuration;
	InputSuppressionData InputSuppression;
	float ScreenExposureAreaScale;
	float FadeOutDuration;
	bool AllowFieldOfViewScaling;
	bool LockMeshToRenderView;
	bool ToggleViewChange;
	bool UseProfileOptionForToggleViewChange;
	bool FLIREnabled;
	bool FadeToBlack;
}

class AlternateSpawnEntityData : SpatialEntityData {
	TeamId Team;
	float Priority;
	bool Enabled;
}

class AmmoCrateEntityData : GameEntityData {
	MapMarkerEntityData Marker;
	StaticModelEntityData Model;
	float RefillDelay;
	float Radius;
	bool EnableReplenish;
}

class AndEntityData : EntityData {
	Realm Realm;
	bool In1;
	bool In2;
}

class AnimatedCameraData : CameraData {
	SkeletonAsset Skeleton;
	string CameraBone;
	string FovBone;
}

class AnimatedDestructionComponentData : AntAnimatableComponentData {
}

class AnimatedDriverEntityData : GameEntityData {
	LinearTransform InputTransform;
	AntRef VehicleBoost;
	AntRef VehicleSpeed;
	AntRef VehicleMovementState;
	AntRef VehicleClutch;
	AntRef VehicleBrake;
	float MovementStateStandThreshold;
	NormalizeSettings Yaw;
	NormalizeSettings Roll;
	NormalizeSettings Pitch;
	bool DelayAnimationWheelTransform;
}

class AnimatedPointCloudAsset : Asset {
}

class AnimatedPointCloudComponentData : ComponentData {
	AnimatedPointCloudAsset PointCloud;
	float ExternalTime;
	bool StartPaused;
}

class AnimatedPointCloudEntityData : EntityData {
	Realm Realm;
	AnimatedPointCloudAsset PointCloud;
	float ExternalTime;
	bool StartPaused;
}

class AnimatedSkeletonDatabase : DataContainer {
	RagdollAsset[] Ragdolls;
	AnimatedSkeletonDatabaseItem[] Items;
}

class AnimatedTransformEntityData : EntityData {
	AntRef Animatable;
	float ExternalTime;
	AntRef Controller;
	string BoneName;
}

class AnimationControlledStateData : CharacterStateData {
	float UpNormalTolerance;
}

class AnimationEnumerationChoiceEntityData : EntityData {
	Realm Realm;
	int32 Value;
}

class AnimationEnumerationEntityData : EntityData {
	Realm Realm;
	AntEnumeration AntEnum;
}

class AnimationSignalEntityData : EntityData {
	Realm Realm;
	AntRef Signal;
	AntRef IntGameState;
	AntRef FloatGameState;
	int32 ValueInt;
	float ValueFloat;
	bool Reset;
	bool Continuous;
}

class AnimationSpawnTemplate : DataContainer {
	AntEnumeration RunStyle;
}

class AnimationTurretRotationComponentData : ComponentData {
	TurretRotationInfo[] Rotations;
	int32 SoldierBaseIndex;
	bool UseVehicleWorldTransform;
	bool OutputWorldTransform;
}

class AntAnimatableComponentData : ComponentData {
	Realm Realm;
	SubRealm SubRealm;
	AntAnimationHandlerData AnimationData;
	SkinnedMeshAsset Mesh;
	bool AutoActivate;
	bool AnimationControlledFromStart;
	bool ForceDisableCulling;
}

class AntAnimationSetAsset : Asset {
	SkeletonAsset SkeletonAsset;
	int32 ActorAssetIndex;
	int32[] ClipAssetIndices;
	int32[] LoopingClipAssetIndices;
	int32 SceneOpMatrixAssetIndex;
	bool UseTraj2Ref;
	bool AllowAnimationCulling;
}

class AntDrivenComponentData : ComponentData {
	AnimationDrivenBinding CharacterGameState;
}

class AntEnumeration : DataContainer {
	AntRef AntAsset;
	int32 Value;
}

class AntEventEntityData : GameEntityData {
	AntEventData[] OnEnterEvents;
	AntEventData[] OnUpdateEvents;
	AntEventData[] OnLeaveEvents;
	bool SendAsPlayerEvent;
	bool AutoActivate;
}

class AntInteractionData : GameEntityData {
	AntInteractionBinding AntBindings;
}

class AntiRollBar : DataContainer {
	float Stiffness;
	float TorqueActivationLimit;
}

class AntMemorySettings : DataContainer {
	int32 RTPoolLayersControllers;
	int32 RTPoolStateflowControllers;
	int32 RTPoolStateflowNodeControllers;
	int32 RTPoolTransitionControllers;
	int32 RTPoolClipControllers;
	int32 RTPoolChooserControllers;
	int32 RTPoolLoopingControllers;
	int32 RTPoolTransparentControllers;
}

class AntPackageAsset : Asset {
	string Win32FileName;
	string XePs3FileName;
	AntPackagingType PackagingType;
	guid StreamingGuid;
	uint32 ChunkSize;
}

class AntProjectAsset : Asset {
	AntPackageAsset[] PackageAssets;
	string AntNativeProjectName;
	AntRef SceneOp;
	int32 ProjectId;
}

class AntSettings : DataContainer {
	float DetailedCollisionSpeedLimit;
	float LeanSignalScale;
	float LeanSignalClamp;
	int32 MaxInterpolationSlots;
	int32 MaxSingleBoneInterpolationSlots;
	float ReducedInterpolationDistance;
	float TrajectoryInterpolationDistance;
	float ForceLodDistance;
	int32 MaxAnimatablesPerPoseJob;
	float CheckGiantSoldiers;
	bool ClientEmulatesServer;
	bool UseCameraFov;
	bool UpdateEnable;
	bool EnablePA;
	bool UseWeaponFov;
	bool DisableAnimManagerSceneOps;
	bool DisableAILodFeature;
	bool DisableModelAnimationCulling;
	bool EnableJobs;
	bool ForcePoseUpdate;
	bool RunAsHighPriority;
	bool InterpolatePoses;
	bool AllowVariableTickLength;
	bool EnablePackageCache;
	bool UseHIK;
	bool UpdateLoddingEnable;
	bool BlockOnJobs;
	bool EnableDebugLogFile;
	bool EnablePoseJobs;
	bool UsePA;
}

class AntTrackData : CustomSequenceTrackData {
	AntTrackItemData[] AntTrackItemDatas;
}

class AntTrackItemData : DataContainer {
	AntRef Controller;
	int32 SequenceTrackIndex;
	int32 StartTime;
	uint32 NumTicks;
	bool ResumeAtEnd;
}

class AreaProximityEntityData : EntityData {
	Realm Realm;
	float ProximityDistance;
	UpdatePass UpdatePass;
	bool AutoStart;
}

class AreaTriggerEntityData : TriggerEntityData {
	LinearTransform GeometryTransform;
	AreaTriggerInclude Include;
	float InsideAreaEventRepeatTime;
	float Radius;
	bool UseCharacterEntity;
	bool OneInsideAreaEventPerSoldier;
	bool TriggerOnlyOnLeave;
	bool ResetOnEnable;
	bool TriggerOnLeaveOnDeath;
	bool TriggerOnLeaveOnDisable;
}

class ArmamentData : DataContainer {
	int32 ThreatLength;
	TurretData TurretData;
	bool IsAntiAircraft;
}

class ArmDisarmAwardEntityData : GameEntityData {
}

class ArtilleryStrikeEntityData : GameEntityData {
	MissileEntityData MissileData;
	float MissileSpawnRadius;
	float DurationOfArtilleryStrike;
	float MaxDelayBetweenProjectiles;
	float MinDelayBetweenProjectiles;
	float MaxDelayBetweenStrikes;
	float MinDelayBetweenStrikes;
	float MinRadiusToSoldier;
	float RadiusWhenFollowingSoldier;
	float HeightOffsetWhenFollowingSoldier;
	uint32 NumberOfStrikes;
	uint32 MaxProjectilesPerStrike;
	uint32 MinProjectilesPerStrike;
	bool FollowSoldier;
}

class ArtilleryStrikeWeaponData : WeaponData {
	float MaxStrikeDistance;
	float StrikeRadius;
	float SpawnHeight;
	float MaxRandomSpawnHeight;
	float StrikeCameraOffset;
	float SpawnHeightMultiplier;
	TargetCameraData Camera;
	float AimingCameraHeight;
	float StrikeCameraHeight;
	float AimingCameraOffset;
	float StrikeCameraFov;
	float AimingCameraFov;
	float DelayBeforeAimingCamera;
	float ValidMinDistance;
	float FireCameraTime;
	float StrikeCameraTime;
	float ValidMaxDistance;
	float ValidMaxAngle;
	bool IncreaseSpawnHeightWithDistance;
	bool EnableProjectileTrails;
	bool EnableCameraRotation;
	bool FireProjectileFromWeapon;
}

class AssemblyDescriptorData : InterfaceDescriptorData {
}

class Asset : DataContainer {
	string Name;
}

class AudioGraphAssetParameter : AudioGraphParameter {
}

class AudioGraphData : DataContainer {
	AudioGraphNodeData[] Nodes;
	AudioGraphParameter[] PublicParameters;
	AudioGraphEvent[] PublicEvents;
	AudioGraphAssetParameter[] PublicAssetParameters;
	uint16 PublicValueCount;
	uint16 ValueCount;
}

class AudioGraphEvent : AudioGraphParameter {
}

class AudioGraphNodeData : DataContainer {
}

class AudioGraphNodePortGroup : DataContainer {
}

class AudioGraphParameter : DataContainer {
	float DefaultValue;
	uint32 NameHash;
	uint16 ValueIndex;
}

class AudioLanguage : DataContainer {
	string Name;
	LanguageFormat LanguageMapping;
}

class AudioLanguagesDependancyObject : DataContainer {
	AudioLanguage[] AudioLanguages;
}

class AudioLanguageSetting : DataContainer {
	string Name;
	uint32 NameHash;
	string DisplayName;
	AudioLanguageMapping[] Mappings;
	bool IsDefault;
}

class AudioMaterialDefinitions : Asset {
}

class AudioSettings : DataContainer {
	uint32 WaveCacheSize;
	uint32 WaveCacheHeadroom;
	float WaveCachePruneTimeLimit;
	uint32 WaveCacheRsxSize;
	float WaveCacheRsxPruneTimeLimit;
	uint32 WaveCacheMaxReadIssueCount;
	uint32 WaveCacheMaxReadActiveCount;
	float AudioCoreCpuLoadLimit;
	float AudioCoreCpuLoadRecovery;
	int32 AudioCoreThread;
	int32 AudioCoreMixJobThreadCount;
	int32 AudioCoreMaxMixJobThreadCount;
	uint32 MaxAudibleSoundCount;
	int32 AudioCoreMinProcStageVoicesToGoWide;
	uint32 DelayLineAllocSize;
	uint32 ReverbAllocSize;
	bool AudioCoreMultipleMixJobsEnabled;
}

class AudioSystemAsset : Asset {
	SoundMasterPatchAsset MasterPatch;
	SoundWaveAsset DefaultWave;
	StreamPoolAsset[] StreamPools;
	uint32 SampleRate;
	float SoundSpeed;
	float DopplerFactor;
	SoundTestAsset Tests;
	MixerSystemAsset MixerSystem;
	AudioLanguage[] Languages;
	AudioLanguageSetting[] LanguageSettings;
	AudioLanguage DefaultLanguage;
	SoundScopeData[] Scopes;
	SoundScopeStrategyData[] ScopeStrategies;
	SoundScopeSetupData[] ScopeSetups;
}

class AutoSquadEntityData : GameEntityData {
	SquadId SquadId;
}

class AutoTeamEntityData : GameEntityData {
	uint32 TeamDifferenceToAutoBalance;
	TeamAssignMode TeamAssignMode;
	uint32 PlayerCountNeededToAutoBalance;
	bool ForceIntoSquad;
	bool RotateTeamOnNewRound;
	bool AutoBalance;
}

class AvengerScoringHandlerData : ScoringHandlerData {
	float AvengerKillTimeout;
}

class AwardableTreeBase : TreeBase {
	StatCategoryTreeCollection StatCategoryTreeCollection;
	CriteriaData[] GeneralCriteria;
	bool GeneralStatistics;
}

class AwardAchievementData : AwardData {
}

class AwardData : AbstractAwardData {
	AwardData[] FilteredChildAwards;
	CriteriaData[] Criteria;
	string Code;
	string Description;
	string NameSid;
	AwardKitAssociation KitAssociation;
	string ImageName;
	string ImageSmallName;
	string ImageFancyName;
	string SoundName;
	AwardType Repeat;
	string[] Licenses;
	uint32 MaxRepetitions;
	CriteriaAward[] Dependencies;
	AwardGroup Group;
	StatsMultiplicity Multiplicity;
	CriteriaGateList UnlockGates;
	AwardData ParentAward;
	float Score;
	ScoringBucket Bucket;
	BasicUnlockInfo[] UnlockInfos;
	bool ActiveOnCreation;
	bool Visible;
}

class AwardDataTree : AwardableTreeBase {
	AwardData[] FilteredAwards;
}

class AwardHeaderData : AbstractAwardData {
	AwardGroup Group;
	StatsMultiplicity Multiplicity;
}

class AwardStarData : AwardData {
	AwardStarNameData StarTemplate;
}

class AwardStarNameData : DataContainer {
	AwardStarNameInstance[] NameInstances;
}

class AxesInputActionData : InputActionData {
	InputDeviceAxes Axis;
	bool NormalizeInput;
}

class BandPassFir64NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Bandwidth;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class BandPassIir2NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Bandwidth;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class BangerEntityData : DynamicGamePhysicsEntityData {
	float[] Scales;
	MeshAsset Mesh;
	ExplosionEntityData Explosion;
	float TimeToLive;
	uint32 DestructiblePartCount;
	bool UseVariableNetworkFrequency;
}

class BangerSpawnImpulseParams : DataContainer {
	float MinHorizontalAngle;
	float MaxHorizontalAngle;
	float MinVerticalAngle;
	float MaxVerticalAngle;
	float MinStrength;
	float MaxStrength;
	float WaterStrengthModifier;
	float LinearDamping;
	float AngularDamping;
}

class BaseEmitterData : ProcessorData {
	EmitterDocument EmitterAsset;
}

class BaseShapeData : GameObjectData {
}

class BaseSkeletonAsset : Asset {
}

class BasicDogTagData : DogTagData {
}

class BehaviourData : UrgencyUserData {
	string Name;
}

class BehaviourTemplateData : GameBehaviourTemplateData {
	float StandProbability;
	float CrouchProbability;
	float TurnAgainstTargetDistance;
	float InvestigateStopDelay;
	float ExplosiveObjectChance;
	uint32 MinAttackBursts;
	uint32 MaxAttackBursts;
	float AttackUrgencyModifier;
	float AltAttackProbability;
	float ReadinessReactionTimeMultiplier;
	UIntRange FireBlindOverBurstCount;
	float CloseRangeAccuracyDistanceOverride;
	float MeleeRange;
	float MeleeMaxTime;
	float MeleeProbability;
	FloatRangeDefaultZero CoverSwitchTime;
	float FireStyleTimeout;
	float FireLeanChance;
	UIntRange FireLeanBurstCount;
	float FireStepOutChance;
	UIntRange FireStepOutBurstCount;
	float FireStepOutSlowChance;
	UIntRange FireStepOutSlowBurstCount;
	float FireStepOutUrgentChance;
	UIntRange FireStepOutUrgentBurstCount;
	float FireStepOutFireFromHipChance;
	UIntRange FireStepOutFireFromHipBurstCount;
	float FireStepOutStandToCrouchChance;
	UIntRange FireStepOutStandToCrouchBurstCount;
	CoverFireType AlwaysInFirePose;
	float FireGrenadeStepOutChance;
	UIntRange FireGrenadeStepOutBurstCount;
	float FireOverChance;
	UIntRange FireOverBurstCount;
	float FireBlindOutChance;
	UIntRange FireBlindOutBurstCount;
	float FireBlindOverChance;
	int32 SuppressingBurstCount;
	float FireGrenadeBlindOverChance;
	UIntRange FireGrenadeBlindOverBurstCount;
	float FireLmgChance;
	UIntRange FireLmgBurstCount;
	float ShotAtFireGrenadeBlindOverChance;
	int32 SuppressingBurstCountMin;
	int32 SuppressingBurstCountMax;
	FloatRange CoverWaitTime;
	float MaxAngleDiffForBlindFire;
	float StrafeToCoverProbablity;
	float MaxSuppressTime;
	float InvestigateVisualTestDist;
	float AlwaysStrafeToCoversWithinDistance;
	float ChargeSurpriseVelocity;
	float ChargeSurpriseNearDistance;
	float ChargeSurpriseFlankedDistance;
	float ShotAtFireBlindOutChance;
	float ShotAtFireBlindOverChance;
	float AccuracyIncreaseTime;
	float TargetStrengthFactor;
	float ReloadBelowPercent;
	float TargetDistanceFactor;
	float SuppressIndirectProbability;
	float TargetDangerFactor;
	float TargetIsAttackingFactor;
	float AccuracyModifierVsNonHumans;
	float AccuracyModifier;
	float SoldierMovementVolumeOverride;
	bool AlwaysUpdate;
	bool LeaveVehicleOnSearchAndDestroyOrder;
	bool ShouldFireThroughSmoke;
	bool AlwaysStrafeToFirstCover;
	bool CanMeleeFromScriptedCover;
	bool AlwaysStrafeToCoversBehindMe;
	bool UseShotAtSettings;
	bool StepBackIfBeingShot;
	bool DisableMissileGravity;
}

class BFAISettingsData : AISettingsData {
	MovementConstantData MovementConstants;
	TurretControlConstantData TurretControlConstants;
	SearchAndDestroyConstantData SearchAndDestroyConstants;
	FollowConstantData FollowConstants;
	CombatConstantData CombatConstants;
}

class BFAISystem : AISystemAsset {
}

class BFOrderEntityData : OrderEntityData {
	bool ForbiddenToFire;
}

class BFServerConfiguration : DataContainer {
	BFServerConfigurationSchedule[] Schedules;
}

class BFServerSettings : SystemSettings {
	string ServerMessage;
	float CTFRoundTimeModifier;
	string ForceTeamForPlayerTag;
	int32 ForceTeamForPlayerTagTeam;
	float NoInteractivityTimeoutTime;
	float NoInteractivityThresholdLimit;
	uint32 NoInteractivityBanRoundCount;
	uint32 TeamKillCountForKick;
	float TeamKillValueForKick;
	float TeamKillValueIncrease;
	float TeamKillValueDecreasePerSecond;
	uint32 TeamKillKickForBan;
	int32 RoundMaxPlayerCount;
	int32 RoundMinPlayerCount;
	int32 RoundLockdownCountdown;
	int32 RoundRestartCountdown;
	int32 RoundWarmupTimeout;
	string BannerUrl;
	string ServerPreset;
	string ServerDescription;
	string ServerAdministrationSettings;
	uint32 GameSize;
	string ServerAdministrationMapRotation;
	string ServerAdministrationMapRotationInformation;
	uint32 ServerAdministrationRoundsPerMap;
	string Spectators;
	string PunkBusterVersion;
	uint32 TeamSwitchImbalanceLimit;
	string GameMod;
	string PingSite;
	string OverrideServerConfigurationStartTime;
	uint32 GunMasterWeaponsPresetIndex;
	int32 ServerConfigurationRefreshInterval;
	int32 DeathmatchFriendZoneFallbackCount;
	VoiceChannel DefaultVoiceChannel;
	bool MapSequencerEnabled;
	bool KickAPlayerOnVIPJoin;
	bool IsManDownRotationEnabled;
	bool IsKillerCameraEnabled;
	bool PremiumStatus;
	bool OverrideAutoBalance;
	bool AutoBalance;
}

class BFTargetEvaluatorComponentData : TargetEvaluatorComponentData {
	TargetEvaluationConstantData Settings;
}

class BigWorldSetting : DataContainer {
	SoundAsset Sound;
	int32 MinDistance;
	int32 MaxDistance;
	float MinDelayTimeInMinutes;
	float MaxDelayTimeInMinutes;
}

class BigWorldSettingsAsset : Asset {
	BigWorldSetting[] Settings;
}

class BinaryLogicNode : UINodeData {
	UINodePort In;
	UINodePort True;
	UINodePort False;
	UIDataSourceInfo DataSourceInfo;
}

class BlazePresenceBackendData : PresenceBackendData {
	MatchmakingSession[] MatchmakingSessions;
	bool UseDemanglerService;
}

class BlazeServerBackendData : ServerBackendData {
	BlazeCreateGameParameters CreateParameters;
	OnlineEnvironmentConsoleUrl ConfigUrl;
}

class Blueprint : EntityBusData {
}

class BlueprintAndVariationPair : Asset {
	Asset BaseAsset;
	ObjectVariation Variation;
}

class BlueprintBundle : Asset {
	Blueprint Blueprint;
	RegistryContainer RegistryContainer;
}

class BlueprintBundleLoaderEntityData : GameEntityData {
}

class BlueprintBundleMetadata : DataContainer {
	string BundlePathName;
	string BundleName;
	string BlueprintName;
}

class BlueprintBundleMetadataContainer : Asset {
	BlueprintContainerItem[] Items;
}

class BlueprintBundleSelectorEntityData : GameEntityData {
	SpawnEntitySelector BlueprintSelector;
}

class BlueprintBundleStateLogicEntityData : GameEntityData {
	string[] BundleNames;
}

class BlueprintContainerItem : DataContainer {
	BlueprintBundleMetadata Metadata;
}

class BoatFloatPhysicsData : HullFloatPhysicsData {
	float FrontRatio;
}

class BoneCollisionComponentData : ComponentData {
	SkeletonCollisionData SkeletonCollisionData;
}

class BoneFakePhysicsData : DataContainer {
	FakePhysicsData FakePhysics;
	string BoneName;
	int32 BoneId;
}

class BoolEntityData : EntityData {
	Realm Realm;
	bool DefaultValue;
}

class BoolHubEntityData : EntityData {
	Realm Realm;
	int32 InputCount;
	int32 InputSelect;
}

class BoolPropertyTrackData : SimplePropertyTrackData {
	bool[] Values;
}

class BoolRecordingData : PropertyRecordingData {
	bool[] Values;
}

class BoolToEventEntityData : EntityData {
	Realm Realm;
	bool Value;
	bool InitalEvent;
}

class BoolUnlockValuePair : UnlockValuePair {
	bool DefaultValue;
	bool UnlockedValue;
}

class BotPriorityConfigData : DataContainer {
	Vec3 DebugColor;
	float Distance;
	int32 Period;
	float AngleOffset;
	bool AppliesToExecution;
	bool AppliesToDecisions;
}

class BoxEvaluatorData : EvaluatorData {
	Vec3 Dimensions;
	Vec3 Pivot;
}

class BoxFloatPhysicsData : FloatPhysicsData {
}

class BreakableControllerComponentData : DestructionControllerComponentData {
	uint32 BreakablePartCount;
	uint32 NetworkIdCount;
}

class BreakableModelEntityData : GamePhysicsEntityData {
	SurfaceShaderBaseAsset DecalVolumeShader;
	float DecalVolumeScaleFactor;
	MeshAsset Mesh;
	uint32 BoneCount;
	EdgeModelLightMapData EdgeModelLightMapData;
}

class BreakablePartComponentData : DestructionPartComponentData {
	uint32 HealthPercentage;
	bool Collapsable;
	bool DestroyNearbyStaticEntities;
}

class BreakableRuinComponentData : ComponentData {
	ObjectBlueprint RuinModel;
}

class BreathControlData : DataContainer {
	float BreathControlTime;
	float BreathControlReleaseTime;
	float BreathControlPenaltyMultiplier;
	float BreathControlPenaltyTimeout;
}

class BulletEntityData : MeshProjectileEntityData {
	float Stamina;
	SoundAsset FlyBySound;
	ExplosionEntityData DudExplosion;
	float Gravity;
	float ImpactImpulse;
	float DetonationTimeVariation;
	float VehicleDetonationRadius;
	float VehicleDetonationActivationDelay;
	float FlyBySoundRadius;
	float FlyBySoundSpeed;
	float FirstFrameTravelDistance;
	float DistributeDamageOverTime;
	float StartDamage;
	float EndDamage;
	float DamageFalloffStartDistance;
	float DamageFalloffEndDistance;
	float TimeToArmExplosion;
	bool HasVehicleDetonation;
	bool InstantHit;
	bool StopTrailEffectOnUnspawn;
}

class BusNodeData : SoundBusData {
	AudioGraphNodePort Out;
	SoundGraphPluginRef VuPlugin;
}

class ByteRasterData : RasterQuadtreeData {
}

class CameraActionData : SimpleMovementActionBaseData {
	CameraMovementActionMode ActionMode;
}

class CameraComponentData : ComponentData {
	Vec3 CameraTransitionPos;
	float FieldOfView;
	float ForceFieldOfView;
	TargetCameraData Camera;
	AlternateCameraViewData AlternateView;
	RegularCameraViewData RegularView;
	float FreezeHeight;
	StanceCameraData StanceData;
	CameraComponentSoundData CameraSoundData;
	SoldierAnimatedCameraData SoldierAnimatedCamera;
	float CameraTransitionTime;
	uint32 MeshParentComponentNumber;
	bool EnableCameraMesh;
	bool ReceiveImpulsesAsThirdPerson;
	bool UseCameraTransition;
	bool AlternateViewEnabled;
	bool IsFirstPerson;
	bool IgnoreOwnerOrientation;
}

class CameraComponentSoundData : DataContainer {
	SoundAsset SwitchToAlternateViewSound;
	SoundAsset SwitchToNormalViewSound;
}

class CameraData : GameObjectData {
	Vec3 OcclusionRayOffset;
	float ShakeFactor;
	float PreFadeTime;
	float FadeTime;
	float FadeWaitTime;
	float SoundListenerRadius;
	ViewFxData ViewFx;
	float NearPlane;
	float ShadowViewDistanceScale;
	float SoundOcclusion;
	bool StayFadedWhileStreaming;
}

class CameraEnterAreaTriggerEntityData : EntityData {
	Realm Realm;
	float TimeTreshold;
	UpdatePass UpdatePass;
	bool AutoStart;
}

class CameraEntityBaseData : SpatialEntityData {
	string NameId;
	int32 Priority;
	bool Enabled;
}

class CameraEntityData : CameraEntityBaseData {
	float Fov;
}

class CameraLoosePartPhysicsData : LoosePartPhysicsData {
	float Scale;
}

class CameraModeAsset : Asset {
}

class CameraParamsComponentData : ComponentData {
	float ViewDistance;
	float NearPlane;
	float SunShadowmapViewDistance;
}

class CameraProximityEvaluatorData : EvaluatorData {
	Vec3 Size;
	Vec3 Offset;
	Vec3 InnerRadiusDirection;
	float InnerRadius;
	float ForwardOffset;
}

class CameraRecoilData : DataContainer {
	float SpringConstant;
	float SpringDamping;
	float SpringMinThresholdAngle;
}

class CameraShakeNodeData : AudioGraphNodeData {
	AudioGraphNodePort Pitch;
	AudioGraphNodePort Yaw;
	AudioGraphNodePort Roll;
}

class CameraTransition : DataContainer {
}

class CancelOrderEntityData : BFOrderEntityData {
}

class CannedScenarioEntityData : EntityData {
	CannedAnimationBinding CannedAnimBinding;
	int32 AnimationEntitySpacePriority;
	bool AlwaysClearEntitySpaceWhenInScenario;
}

class CapturePointEntityData : GameEntityData {
	int32 EnemyTicketLossWhenCaptured;
	int32 MinNrToTakeControl;
	ObjectBlueprint[] FlagTemplates;
	ObjectBlueprint CapturePoint;
	TeamId InitialOwnerTeam;
	float CaptureRadius;
	int32 MaxCaptureMultiplier;
	int32 AreaValue;
	uint32 SpawnMenuListOrdinal;
	AreaValueTeam[] AreaValues;
	int32 TimeToGetControl;
	int32 TimeToLoseControl;
	float ReturnMultiplier;
	int32 OnlyTakeableByTeam;
	float ShowRadius;
	float HideRadius;
	float AddedMultiplierPerPlayer;
	float Modify3DIconVerticalOffset;
	CapturableType CapturableType;
	string IntruderWarningSID;
	bool IsCapturedInUpperSphere;
	bool DisableWhenLosingControl;
	bool LoseControlWhenNotClose;
	bool DisableIfEnemyInside;
	bool IsVisible;
	bool ForceSnap;
	bool UseAreaValuesPerTeam;
	bool IntruderWarning;
	bool ShowOnMinimap;
	bool HoistFlag;
	bool StartAtBottom;
	bool RemoveWhenCaptured;
	bool SeesawCapturing;
}

class CapturePointScoringHandlerData : ScoringHandlerData {
	float SquadCappingBonus;
}

class CellDetailSelectionRule : PackagingRule {
	PackagingDetailLevel Detail;
}

class ChangeReadinessOrderEntityData : BFOrderEntityData {
	ReadinessLevel Pulse;
	ReadinessLevel Minimum;
	bool AllowDecrease;
}

class CharacterAnimationEntityData : EntityData {
	LinearTransform EntitySpaceTransform;
	AntRef Controller;
	float TrackLength;
	float ExternalTime;
	float WarpAnimationBlendTime;
	bool RestoreControllerOnFinish;
}

class CharacterAnimationSpaceEntityData : EntityData {
	Realm Realm;
	AntRef SpacePositionGS;
	AntRef SpaceRotationGS;
	float WarpAnimationBlendTime;
}

class CharacterAsset : CharacterBlueprint {
}

class CharacterBlueprint : ObjectBlueprint {
}

class CharacterCameraComponentData : ComponentData {
	TargetCameraData[] Cameras;
	string CameraBoneName;
}

class CharacterCustomizationAsset : Asset {
	string LabelSid;
	UIHudIcon UIHudIcon;
	VoiceOverLabel[] VoiceOverLabels;
	CustomizationTable VisualTable;
	CustomizationTable SpecializationTable;
}

class CharacterCustomizationComponentData : ComponentData {
	CharacterSocketListAsset SocketList;
	MeshLodGroup SharedLodGroup;
}

class CharacterEntityData : ControllableEntityData {
	PersonViewMode DefaultViewMode;
	PlayerSpawnType PlayerSpawnType;
	bool CharacterLightingEnable;
}

class CharacterHealthComponentData : ComponentData {
	float MaxHealth;
	float RegenerateHealthPerSecond;
	bool RegenerateHealth;
	bool IsImmortal;
}

class CharacterInVehicleScenarioEntityData : GameEntityData {
	Realm Realm;
	AntRef ScenarioAntRef;
	int32 LevelId;
	int32 ScenarioId;
	int32 ActorId;
	int32 PartId;
}

class CharacterLightingComponentData : ComponentData {
	Vec3 BottomLight;
	Vec3 TopLight;
	CharacterLightingMode CharacterLightingMode;
	float CameraUpRotation;
	float TopLightDirY;
	float BlendFactor;
	float TopLightDirX;
	bool LockToCameraDirection;
	bool FirstPersonEnable;
	bool CharacterLightEnable;
}

class CharacterPhysicsComponentData : ComponentData {
	CharacterPhysicsData CharacterPhysics;
	bool EnableCollisionOnSpawn;
}

class CharacterPhysicsData : Asset {
	CharacterPoseData[] Poses;
	CharacterStateData[] States;
	CharacterStateType DefaultState;
	CharacterSprintData Sprint;
	MaterialContainerPair MaterialPair;
	int32 PushableObjectWeight;
	float Mass;
	float MaxAscendAngle;
	float PhysicalRadius;
	float WaterDepthLimit;
	float InputAcceleration;
	float LadderAcceptAngle;
	float LadderAcceptAnglePitch;
	float JumpPenaltyTime;
	float JumpPenaltyFactor;
	float RadiusToPredictCollisionOnCharacters;
	bool AllowPoseChangeDuringTransition;
}

class CharacterPoseData : DataContainer {
	Vec3 EyePosition;
	Vec3 CollisionBoxMaxExpand;
	Vec3 CollisionBoxMinExpand;
	float Height;
	float StepHeight;
	Vec2[] ThrottleModifierCurve;
	CharacterPoseType PoseType;
	CharacterPoseCollisionType CollisionType;
	LookConstraintsData LookConstraints;
	PoseTransitionTime[] TransitionTimes;
}

class CharacterSocketListAsset : Asset {
	SocketData[] GameplaySockets;
	SocketData[] RigidVisualSockets;
	SocketData[] SkinnedVisualSockets;
}

class CharacterSpawnReferenceObjectData : SpawnReferenceObjectData {
	PlayerSpawnType PlayerType;
	uint32 VehicleEntryIndex;
	SoldierSpawnTemplateData Template;
	float HumanTargetPreference;
	UIHudIcon MinimapIcon;
	bool AllowFallbackOnNextAvailabeVehicleEntry;
	bool CheckMaxPlayersInVehicle;
	bool AffectMinimapPosition;
	bool IsTarget;
	bool IgnoreVehicleIcon;
}

class CharacterSprintData : DataContainer {
	float SprintPowerDecreasePerSecond;
	float SprintPowerIncreasePerSecond;
	float SprintMinimumPower;
	bool AllowContinousSprinting;
}

class CharacterStateData : DataContainer {
	CharacterStatePoseInfo[] PoseInfo;
}

class CharacterStatePoseInfo : DataContainer {
	CharacterPoseType PoseType;
	float Velocity;
	float AccelerationGain;
	float DecelerationGain;
	float SprintGain;
	float SprintMultiplier;
	SpeedModifierData SpeedModifier;
}

class CharacterStateTriggerEntityData : TriggerEntityData {
	uint32 ActiveWeaponSlot;
	float Pitch;
	CharacterPoseAction CharacterPose;
	uint32 AmmoToSet;
	CharacterPoseAction PoseToCheck;
	SoldierWeaponBlueprint Weapon;
	uint32 HealthToSet;
	uint32 HealthToCheck;
	uint32 SeatIndex;
	bool ExcludeConnectedVehicles;
	bool ContinueToCheckIfHoldingWrongWeapon;
	bool StayInVehicleOnMove;
	bool CheckHealthGreaterOrEqual;
	bool CheckAllWeapons;
	bool ShouldCheckSeatIndex;
	bool UseExitPointWhenLeavingVehicle;
	bool DisablePhysicsWhenLeavingVehicle;
	bool UsePitch;
}

class CharacterWeaponComponentData : ComponentData {
	SoldierWeaponBlueprint DefaultWeaponBlueprint;
	string AimBoneName;
	SkeletonAsset WeaponSkeleton;
}

class ChaseCameraData : TargetCameraData {
	Vec3 TargetOffset;
	Vec3 ToWantedPositionScale;
	float AwayFromTargetForceScale;
	float TargetRotationOffset;
	float MaxViewRotationAngleDeg;
	float WantedAngleDeg;
	float WantedDistance;
	float MaxDistance;
	float SnapDistance;
	float ForceFieldRadius;
	float CollisionRadius;
	float ForceFieldForceScale;
	float MaxVelocity;
	float VelocityDrag;
	float PillExpandSizeSpeedAcceleration;
	float PillMinimumCollisionRadius;
	float PillMaximumCollisionRadius;
	float PillMinimumCollisionLength;
	float LookDistanceScale;
	float LookDistanceInFrontOfTarget;
	uint32 UpdateRate;
	bool KeepTargetPitch;
	bool InheritTargetVelocity;
	bool ShouldRollWithTarget;
	bool HasCollision;
}

class ChassisComponentData : PartComponentData {
	VehicleConfigData VehicleConfig;
	GearboxConfigData GearboxConfig;
	VehicleWaterEffectData[] WaterStreakEffects;
	VehicleWaterEffectData[] WaterEffects;
	float TriggerGroundEffectImpulse;
	LandingGearLogicData LandingGearLogic;
	bool AlwaysFullThrottle;
	bool ForceLandingGearsRetract;
	bool AllowNegativeThrottle;
}

class ChatSettings : Asset {
	ChatChannelType[] Channels;
	AntiSpamConfig AntiSpam;
}

class ChildBarrelComponentData : ChildComponentData {
}

class ChildComponentData : PartComponentData {
	LinearTransform AlignTransform;
	MovingBodyData MovingBody;
	VehicleHealthZoneData HealthZone;
	float SoundEffectStartRpm;
	float SoundEffectStopRpm;
	AlignmentData AlignmentSettings;
	SoundAsset SoundEffect;
	bool EnableAlignToCamera;
	bool WorldSpacePositionLock;
}

class ChildMovingBodyData : LinearMovingBodyData {
	float InputDelay;
	float Speed;
	EntryInputActionEnum InputAction;
	float TriggerImpulse;
	bool IsOneShotInput;
}

class ChildRotationBodyData : RotationBodyData {
	float ForceModifier;
	float ResetForceModifier;
	float ResetForceInputThreshold;
	EntryInputActionEnum RotationInput;
	float WorldSpaceLockEfficiency;
	bool UseLinearInput;
}

class ChunkStreamerEntityData : EntityData {
	ChunkStreamerCell[] Cells;
}

class ClearAreaTriggerEntityData : TriggerEntityData {
	TeamId TeamOfImmortalSoldiers;
	bool RemoveBangers;
	bool RemoveVehicles;
	bool RemoveEffects;
	bool RemoveStaticModels;
	bool RemoveDebrisClusters;
	bool ExcludeImmortalSoldiersInTeam;
	bool RemoveMeshProxies;
	bool RemoveSoldiers;
}

class ClientEffectMaskVolumeEntityData : GameEntityData {
	Vec4 ApplyEffectCurve;
	float LifeTimeInSeconds;
	float UpdatePeriodInSeconds;
	float Radius;
}

class ClientJuiceState : MetricState {
	int32 SessionId;
}

class ClientMetricsSettings : DataContainer {
	bool Enabled;
}

class ClientPlayerInputPlaybackEntityData : EntityData {
	Realm Realm;
	string FileName;
}

class ClientPlayerInputRecorderEntityData : EntityData {
	Realm Realm;
	string FileNameBase;
}

class ClientSettings : SystemSettings {
	float LoadedTimeout;
	uint32 OutgoingRate;
	float LoadingTimeout;
	float IncomingFrequency;
	uint32 IncomingRate;
	float DuplicationChance;
	uint32 Team;
	float MaxDropDuration;
	float ReorderingChance;
	float DropSpikeChance;
	float MinDropDuration;
	float MaxIncomingLatency;
	float PacketDrops;
	float MaxLatency;
	float MinIncomingLatency;
	float CorruptionChance;
	string ServerIp;
	string ScreenshotSuffix;
	int32 SpawnPointIndex;
	float MinLatency;
	string ScreenshotFilename;
	float IngameTimeout;
	float AimScale;
	string SecondaryServerIp;
	bool SkipFastLevelLoad;
	bool ScreenshotToFile;
	bool IgnoreClientFireRateMultiplier;
	bool InputEnable;
	bool LoadMenu;
	bool PauseGameOnStartUp;
	bool DebugMenuOnLThumb;
	bool InvertPitch;
	bool OccludersEnabled;
	bool IsPresenceEnabled;
	bool InvertFreeCamera;
	bool Scheme2FlipY;
	bool InvertYaw;
	bool LipSyncEnabled;
	bool IsInternetSimulationEnabled;
	bool OnDamageSpottingEnabled;
	bool EmittersEnabled;
	bool PadRumbleEnabled;
	bool OvergrowthEnabled;
	bool EffectsEnabled;
	bool TerrainEnabled;
	bool WaterPhysicsEnabled;
	bool VegetationEnabled;
	bool WorldRenderEnabled;
	bool RenderTags;
	bool DebrisClusterEnabled;
	bool HavokVisualDebugger;
	bool HavokVDBShowsEffectsWorld;
	bool HavokCaptureToFile;
	bool UseMouseAndKeyboardSystem;
	bool UseGlobalGamePadInput;
	bool ThreadedLoadingEnable;
	bool ShowBuildId;
	bool ExtractPersistenceInformation;
	bool EnableRestTool;
	bool LocalVehicleSimulationEnabled;
	bool AsyncClientBulletEntity;
	bool AutoUnspawnDynamicObjects;
	bool VsyncEnable;
	bool VisualFrameInterpolation;
	bool InvertPadPcRightStick;
	bool Scheme0FlipY;
	bool IsSpectator;
	bool Scheme1FlipY;
	bool QuitGameOnServerDisconnect;
}

class ClimbingStateData : CharacterStateData {
	float LateralInputScale;
	float DownAngleLimit;
	float DropOffAngle;
	float AttractionVelocity;
	float PushAwayVelocity;
	float ClimbHeightOffset;
	float ClimbOffVerticalDistance;
	float ClimbOffVerticalTime;
	float ClimbOffHorizontalDistance;
	float ClimbOffHorizontalTime;
}

class ClimbLadderComponentData : ComponentData {
	int32 ClimbPhase;
	int32 ConnectPhase;
	float ConnectJointDisplacement;
	ClimbLadderBinding Binding;
}

class ClosestInstancesScopeStrategyData : SoundScopeStrategyData {
	uint32 Count;
}

class CollisionData : DataContainer {
	ValueAtX[] DamageAtVerticalVelocity;
	ValueAtX[] DamageAtHorizVelocity;
}

class ColorCorrectionComponentData : ComponentData {
	Vec3 Contrast;
	Vec3 Saturation;
	Vec3 Brightness;
	Realm Realm;
	float Hue;
	TextureAsset ColorGradingTexture;
	bool ColorGradingEnable;
	bool Enable;
}

class ColorReference : Asset {
	Vec4 Color;
}

class ColorTintScopeFilterData : ScopeFilterData {
	ColorTintData ColorTintData;
}

class ColorUnlockPartData : DataContainer {
	ColorReference ColorReference;
}

class CombatActionTriggerEntityData : TriggerEntityData {
	float TimeToTriggerOnNoAction;
}

class CombatAreaTriggerEntityData : GameEntityData {
	float MaxRandomSpawnHeight;
	float SpawnHeight;
	uint32 TimeToReturn;
	BulletEntityData DeserterProjectile;
	TeamId Team;
	float StrikeRadius;
	float InitalSpeed;
	bool IsAiAllowedOutside;
	bool IsTeamSpecific;
}

class CombatConstantData : Asset {
	float PoseTransitionFireDelay;
	float ChangePoseStopDelay;
	float AllowCrouchFiringWaterLevel;
	float PoseChangeLockoutTime;
	float ExplosionInterestRange;
	float ExplosiveObjectSearchRadius;
	float ExplosiveBlastMultiplier;
	float MaxSuppressDistance;
	float MaxSuppressorsRatio;
	float SuppressOffsetXz;
	float SuppressOffsetY;
	float SuppressMinLOFDistance;
	float SuppressMinLOFOffsetDistance;
	float InvestigateCoverSearchWidth;
	float InvestigateAroundTargetRadius;
	float InvestigateFreeLookRadius;
	float InvestigatePauseTimeMin;
	float InvestigatePauseTimeMax;
	float AvoidC4Time;
	float StandStillMinTime;
	float StationaryBailDistance;
	float PrecisionTimeout;
	float CloseRangeAccuracyDistance;
	float FightFromPathRadius;
	float SmokeRadius;
	float SmokeLifeTime;
	float MeleeCooldown;
}

class CombustionEngineConfigData : EngineConfigData {
}

class CompareBoolEntityData : EntityData {
	Realm Realm;
	bool Bool;
	bool TriggerOnPropertyChange;
}

class CompareEntityData : EntityData {
	Realm Realm;
	CompareOp Operator;
	float FloatIn0;
	float FloatIn1;
	int32 IntIn0;
	int32 IntIn1;
}

class CompareFloatEntityData : EntityData {
	Realm Realm;
	float A;
	float B;
	bool TriggerOnPropertyChange;
	bool TriggerOnStart;
}

class CompareIntEntityData : EntityData {
	Realm Realm;
	int32 A;
	int32 B;
	bool TriggerOnPropertyChange;
	bool TriggerOnStart;
}

class ComparisonLogicNode : UINodeData {
	UINodePort In;
	UINodePort[] Outputs;
	UIDataSourceInfo DataSourceInfo;
	bool SkipFractionals;
}

class ComponentData : GameObjectData {
	LinearTransform Transform;
	GameObjectData[] Components;
	bool Excluded;
}

class CompositeMeshAsset : MeshAsset {
}

class CompositeMeshEntityData : SpatialEntityData {
	CompositeMeshAsset Mesh;
}

class CompressorNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Threshold;
	AudioGraphNodePort Ratio;
	AudioGraphNodePort AttackTime;
	AudioGraphNodePort ReleaseTime;
	AudioGraphNodePort Out;
	CompressorChannelMode ChannelMode;
	SoundGraphPluginRef Plugin;
}

class CompressorSettings : DataContainer {
	float Ratio;
	float Threshold;
	float Attack;
	float Release;
}

class ConditionGroup : AudioGraphNodePortGroup {
	AudioGraphNodePort X;
	AudioGraphNodePort Y;
	AudioGraphNodePort True;
	ConditionType Condition;
}

class ConditionNodeData : AudioGraphNodeData {
	ConditionGroup[] Conditions;
}

class ConeOutputNodeData : OutputNodeData {
	Vec3 Direction;
	AudioGraphNodePort PositionY;
	AudioGraphNodePort PositionX;
	AudioGraphNodePort PositionZ;
	AudioGraphNodePort OuterAngle;
	AudioGraphNodePort InnerAngle;
	float OutsideGain;
	float PanSize;
	AudioGraphNodePort CenterLevel;
	AudioGraphNodePort LfeLevel;
	float HFDampingAngle;
	float ReverbGain;
	SoundBusData ReverbSend;
	SoundGraphPluginRef PanPlugin;
	SoundGraphPluginRef ReverbSendPlugin;
}

class ConsoleCommandEntityData : EntityData {
	string[] Commands;
	Realm Realm;
}

class ConsoleCommandTriggerEntityData : EntityData {
	string CommandName;
	Realm Realm;
}

class ConstantEvaluatorData : EvaluatorData {
	float Scale;
}

class ConsumablesLevelDescriptionComponent : LevelDescriptionComponent {
	Consumable[] Consumables;
}

class ConsumableTriggerEntityData : TriggerEntityData {
	ConsumableGroup ConsumableGroup;
	bool Persistent;
}

class ControllableEntityData : GamePhysicsEntityData {
	float LowHealthThreshold;
	TeamId DefaultTeam;
	MaterialContainerPair MaterialPair;
	bool ResetTeamOnLastPlayerExits;
	bool FakeImmortal;
	bool UsePrediction;
	bool Immortal;
	bool ForceForegroundRendering;
}

class CoopLobbyEntityData : GameEntityData {
	float ClientConnectionTimeout;
	bool IsInGame;
}

class CountDownEntityData : EntityData {
	int32 StartValue;
	Realm Realm;
	bool RunOnce;
}

class CoverConstantData : Asset {
	float SlotSize;
	float SlotSpacing;
	float SlotEdgeDistance;
	float SlotBlockedEdgeDistance;
	float MinimumOpenCoverWidth;
	float ProneHeight;
	float CrouchHeight;
	float MediumHeight;
	float StandHeight;
	int32 MaxCoversInMemory;
	float SearchRadius;
	float ProneCoverModifier;
	float CrouchCoverModifier;
	float MediumCoverModifier;
	float StandCoverModifier;
	float IntermediateCoverSlotModifier;
	float DistanceEvaluationWeight;
	float EnemiesEvaluationWeight;
	float AttackPositionEvaluationWeight;
	float OptimalWeaponDistanceEvaluationWeight;
	float DislikePreviousCoverWeight;
	float MaxHeightDifference;
	float SwitchCoverUrgencyThreshold;
	float ExtraCoverSize;
	float ReevaluationTime;
	CoverSelectionMethod CoverSelectionMethod;
	float ThreatRadius;
	float InCoverDistance;
	float MinAttackableEnemyDistance;
	float CoverFailIgnoreTime;
	float StartMeleeFromCoverDistance;
	float ContinueMeleeFromCoverDistance;
}

class CoverEntityData : SpatialEntityData {
	float Width;
	CoverType CoverType;
	CoverSlot[] Slots;
	bool RightEdgeBlocked;
	bool TopBlocked;
	bool LeftEdgeBlocked;
}

class CoverPrepareFireEntityData : EntityData {
}

class CoverWaypointData : AbstractLocoWaypointData {
	AILocoCoverTaskData CoverTask;
}

class CreateDestructionVolumeParams : DataContainer {
	string AssetName;
}

class CreateRawFileParams : DataContainer {
	string AssetName;
	string SourceFile;
	bool CreateResource;
}

class CriteriaData : DataContainer {
	float CompletionValue;
	CriteriaGateList GateList;
	StatEvent Measuring;
	StatsCategoryBaseData ParamX;
	StatsCategoryBaseData ParamY;
	StatsCategoryBaseData[] OrParamsX;
	CriteriaType CriteriaType;
	string DescriptionSid;
	float ScaleFactor;
	float Scale;
	bool ShouldSummarize;
	bool ShouldHide;
	bool CountEvents;
}

class CriteriaGateList : Asset {
	float[] CriteriaGates;
}

class CriteriaStarCategoryData : DataContainer {
	CriteriaStarCategoryInstance[] CriteriaInstances;
}

class CriteriaStarData : CriteriaData {
	CriteriaStarCategoryData StarTemplate;
}

class Crossfader2NodeData : AudioGraphNodeData {
	AudioGraphNodePort Ctrl;
	AudioGraphNodePort CtrlOut1;
	AudioGraphNodePort CtrlOut2;
}

class CrossfaderNodeData : AudioGraphNodeData {
	AudioGraphNodePort In1;
	AudioGraphNodePort In2;
	AudioGraphNodePort Ctrl;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin1;
	SoundGraphPluginRef Plugin2;
}

class CTFScoringHandlerData : ScoringHandlerData {
	int32 MaxTeams;
	float PickUpAssistRadius;
	float CaptureAssistRadius;
	float EnemyThreatRadius;
	float EnemySuppressionTimeout;
}

class Curve2D : DataContainer {
	Vec2[] Curve;
}

class CustomizationTable : DataContainer {
	CustomizationUnlockParts[] UnlockParts;
}

class CustomizationUnlockParts : DataContainer {
	string UICategorySid;
	UnlockAssetBase[] SelectableUnlocks;
}

class CustomizeBaseEntityData : EntityData {
	Realm Realm;
}

class CustomizeCharacterData : Asset {
	CustomizeVisual[] VisualGroups;
	float OverrideCriticalHealthThreshold;
	UnlockAssetBase[] Unlocks;
	float OverrideMaxHealth;
	bool ClearVisualState;
	bool RestoreToOriginalVisualState;
}

class CustomizeCharacterEntityData : CustomizeBaseEntityData {
	CustomizeCharacterData CustomizeCharacterData;
}

class CustomizedMaterialData : DataContainer {
	string[] MaterialNames;
	UnlockableColorCollection[] ColorParameters;
	UnlockableTextureCollection[] TextureParameters;
	UnlockableTextureSliceCollection[] TextureSliceParameters;
}

class CustomizeSoldierData : CustomizeCharacterData {
	UnlockWeaponAndSlot[] Weapons;
	WeaponSlot ActiveSlot;
	PickupEntityAsset DeathPickup;
	bool RemoveAllExistingWeapons;
	bool DisableDeathPickup;
}

class CustomizeSoldierEntityData : CustomizeBaseEntityData {
	CustomizeSoldierData CustomizeSoldierData;
}

class CustomSequenceTrackData : EntityData {
	string TrackName;
	CustomSequenceTrackLinkMapping[] InputLinkMap;
	CustomSequenceTrackLinkMapping[] OutputLinkMap;
	CustomSequenceTrackEventMapping[] EventMap;
	CustomSequenceTrackPropertyMapping[] SourcePropertyMap;
	CustomSequenceTrackPropertyMapping[] TargetPropertyMap;
	CustomSequenceTrackPropertyMapping[] SourceAndTargetPropertyMap;
}

class CustomSequenceTrackEventMapping : DataContainer {
	int32 TrackEventID;
	int32 SequenceEventID;
}

class CustomSequenceTrackLinkMapping : DataContainer {
	int32 TrackLinkID;
	int32 SequenceLinkID;
}

class CustomSequenceTrackPropertyMapping : DataContainer {
	int32 TrackPropertyID;
	int32 SequencePropertyID;
}

class CustomSplineData : VectorShapeData {
}

class DacNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort SpeakerCount;
	AudioGraphNodePort SampleRate;
	SoundGraphPluginRef VuPlugin;
	SoundGraphPluginRef GainPlugin;
	SoundGraphPluginRef DacPlugin;
}

class DamageAreaTriggerEntityData : TriggerEntityData {
	float DamagePerSecond;
	TeamId TeamOfImmortalCharacters;
	float DamageTime;
	bool DamageVehicles;
	bool DamageBangers;
	bool ExcludeImmortalCharactersInTeam;
	bool DamageCharacters;
	bool ExcludeShieldedSoldiers;
}

class DamageEffectComponentData : ComponentData {
	Vec4 RightDamage;
	Vec4 TopDamage;
	Vec4 LeftDamage;
	Vec4 BottomDamage;
	float OuterFrameOpacity;
	float InnerFrameOpacity;
	float FrameWidth;
	SurfaceShaderBaseAsset Shader;
	float StartCriticalEffectHealthThreshold;
	float EndCriticalEffectHealthThreshold;
	float MinDamagePercentageThreshold;
	float FallofTime;
	float MaxOpacityDamagePercentage;
	Realm Realm;
	bool DebugDamage;
}

class DamageScoringHandlerData : ScoringHandlerData {
	float RepairVehicleLimit;
	float DamageTeamVehicleLimit;
	float TeamHealingLimit;
	float TeamDamageLimit;
	float KillAssistLimit;
	float KillAssistTimeout;
	float VehicleDestroyAssistLimit;
	float SaviorKillTimeout;
	float SaviorDamageLimit;
	float HotVehicleTimeout;
}

class DamageToVehicleEvent : MetricEvent {
	string VehicleName;
	string WeaponName;
	float DamageAmount;
}

class DataBusData : Asset {
	PropertyConnection[] PropertyConnections;
	LinkConnection[] LinkConnections;
}

class DataContainerAsset : Asset {
	DataContainer Data;
}

class DataGetNode : UINodeData {
	UINodePort In;
	UINodePort Out;
	UIDataSourceInfo DataSource;
}

class DataIncrementNode : UINodeData {
	UINodePort In;
	UINodePort Out;
	float Max;
	float Min;
	float IncrementSize;
	UIDataSourceInfo DataSource;
}

class DataSetNode : UINodeData {
	UINodePort In;
	UINodePort Out;
	string Param;
	UIDataSourceInfo DataSource;
	bool SetToEmptyString;
	bool ForceUpdate;
}

class DataStepNode : UINodeData {
	UINodePort In;
	UINodePort Out;
	float[] Steps;
	UIDataSourceInfo CurrentStepDataSource;
	UIDataSourceInfo DataSource;
}

class DataToggleNode : UINodeData {
	UINodePort In;
	UINodePort Out;
	UIDataSourceInfo DataSource;
}

class DeathAreaTriggerEntityData : GameEntityData {
	float Damage;
	float TimeToReturn;
}

class DeathEvent : MetricEvent {
	Vec3 Position;
	Vec3 KillerPosition;
	uint64 KillerId;
	float Time;
	string Weapon;
}

class DebrisClusterData : GameEntityData {
	Vec3 PushVelocityMul;
	Vec3 PushVelocityRndMul;
	Vec3 InitRotationRndMul;
	float ClusterLifetime;
	MeshAsset Mesh;
	uint32 CompositePartCount;
	uint32 MaxActivePartsCount;
	DebrisClusterPartInfoData[] PartHierarchy;
	float ActivationPushForceMul;
	float ProjectileForceTransferMul;
	PhysicsEntityData PhysicsData;
	GameEntityData Explosion;
	EffectBlueprint ActivationEffect;
	EffectBlueprint Effect;
	float OnPartCollisionSpeedThreshold;
	bool PartialDestruction;
	bool ClientSideOnly;
	bool OnPartCollisionEnable;
	bool NoCollision;
	bool KillPartsOnCollision;
	bool DeactivatePartsOnSleep;
	bool ActivateOnSpawn;
	bool InEffectWorldOnly;
	bool SpawnExplosionOnFirstImpactOnly;
}

class DebrisSystemAsset : Asset {
	DebrisHavokInfo[] HavokMeshes;
	int32 HavokMeshCount;
}

class DebrisSystemSettings : DataContainer {
	uint32 MeshDrawCountLimit;
	float TimeScale;
	float MeshCullingDistance;
	uint32 DrawStats;
	uint32 MeshBatchCountLimit;
	float MeshStreamingPriorityMultiplier;
	bool MeshRenderingEnable;
	bool EnableJobs;
	bool MeshShadowEnable;
	bool MeshViewCullingEnable;
	bool MeshHavokRenderingEnable;
	bool MeshDrawTransforms;
	bool Enable;
	bool MeshDrawBoundingBoxes;
	bool MeshDrawCullStats;
}

class DebugComponentData : ComponentData {
	Realm Realm;
	TextureAsset DebugTexture;
	bool Fullscreen;
	bool Enable;
}

class DebugConstantData : Asset {
	float BotDebugDistance;
	float InViewModeFOV;
	uint32 GraphDataBuffer;
	float MinDecisionTime;
	bool InaccuracyEnabled;
}

class DebugEventInput : AudioGraphNodePortGroup {
	AudioGraphNodePort E;
	string Name;
	bool RequireTriggeredAndSet;
}

class DebugMenuItemEntityData : GameEntityData {
	DebugMenuItemType ItemType;
	string Text;
}

class DebugMenuSubMenuEntityData : GameEntityData {
	string Text;
}

class DebugRenderSettings : DataContainer {
	float TextQueueTimeVisible;
	uint32 Ps3SpuFrameBufferSize;
	float TextViewDistance;
	uint32 TextQueueMaxLineCount;
	uint32 DxMaxVertexCount;
	int32 ProcessJobCount;
	bool DrawStatsEnable;
	bool Ps3SpuEnable;
	bool Enable;
	bool TextQueueLocationTop;
	bool DxLine2dAntialiasingEnable;
	bool DxLine3dAntialiasingEnable;
}

class DebugSurveyEvent : MetricEvent {
	string PlayerName;
	guid SurveyMetricLink;
}

class DebugTestEntityData : GameEntityData {
}

class DebugTextEntityData : SpatialEntityData {
	Vec3 TextColor;
	string DebugText;
	Realm Realm;
	float Scale;
	bool Visible;
	bool Centered;
	bool DepthTest;
	bool ScaleWithDistance;
}

class DebugValueInput : AudioGraphNodePortGroup {
	AudioGraphNodePort V;
	string Name;
	DebugRenderType RenderType;
	float Min;
	float Max;
}

class DecalEntityData : GameEntityData {
	SurfaceShaderBaseAsset Shader;
	DecalAtlasTile AtlasTile;
	int8 MaterialIndex;
	int8 SortingPriority;
	bool Projected;
}

class DecalSettings : SystemSettings {
	uint32 StaticBufferMaxVertexCount;
	uint32 RingBufferMaxVertexCount;
	bool DrawEnable;
	bool SystemEnable2;
	bool SystemEnable;
	bool Enable;
	bool DebugMemUsageEnable;
	bool DebugWarningsEnable;
	bool NvidiaStreamOutputWorkaroundEnable;
}

class DecalTemplateData : Asset {
	float Size;
	float RandomSize;
	float Rotation;
	float RandomRotation;
	float ClipAngle;
	float ProximityRadiusFactor;
	float NormalOffset;
	SurfaceShaderBaseAsset Shader;
	int32 MeshUVIndex;
	DecalAtlasTile AtlasTile;
	int8 SortingPriority;
	bool Projected;
	bool ProjectMultiple;
	int8 MaterialIndex;
}

class DecalVolumeEntityData : RenderVolumeEntityData {
}

class DecisionConstantData : Asset {
	float NewEnemyDecideMaxDistance;
	bool AllowEmergencyGoalInterrupt;
	bool AllowUninterruptibleBehaviours;
}

class DefibrillatorWeaponData : WeaponData {
	float ReviveTime;
	float AttackTime;
}

class DelayEntityData : EntityData {
	float Delay;
	Realm Realm;
	bool AutoStart;
	bool RunOnce;
	bool RemoveDuplicateEvents;
}

class DelayNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort DelayTime;
	AudioGraphNodePort Feedback;
	AudioGraphNodePort Out;
	float MaxDelayTime;
	SoundGraphPluginRef Plugin;
}

class DelayTriggerEntityData : TriggerEventEntityData {
	bool AutoTriggerEvent;
}

class DeltaGroup : AudioGraphNodePortGroup {
	AudioGraphNodePort In;
	AudioGraphNodePort Delta;
}

class DeltaNodeData : AudioGraphNodeData {
	DeltaGroup[] Deltas;
}

class DemoSettings : DataContainer {
	string RecordDemoFileName;
	string PlaybackDemoFileName;
	string TimeDemo;
	string LockToPlayerName;
	uint32 ChangePlayerInterval;
	uint32 ForcedDeltaTickCount;
	uint32 StartProfilingOnFrame;
	uint32 StopProfilingOnFrame;
	uint32 TakeScreenshotOnFrame;
	bool AllowOverwrite;
	bool LogPerformance;
	bool SuppressDebugLog;
	bool ShutdownOnDemoComplete;
	bool LoopingDemo;
	bool LockToRandomPlayer;
	bool PauseOnStartup;
}

class DeMuxNodeData : AudioGraphNodeData {
	DeMuxOutput[] Outputs;
	AudioGraphNodePort Trigger;
	AudioGraphNodePort Value;
	bool WrapValue;
}

class DeMuxOutput : AudioGraphNodePortGroup {
	AudioGraphNodePort Trigger;
}

class DestroyAllInSquadScoringHandlerData : ScoringHandlerData {
}

class DestroyLevelCommandEntityData : GameEntityData {
	uint32 InstanceCountDestroyedPerFrame;
	uint32 DestroyDelay;
}

class DestructionCommandEntityData : GameEntityData {
	uint32 InstanceCountDestroyedPerFrame;
	uint32 InstanceCountDestroyedPerType;
}

class DestructionControllerComponentData : ComponentData {
	ObjectBlueprint[] DebrisClusters;
	bool AttachToNearbyObjects;
}

class DestructionDepthRasterData : RasterQuadtreeData {
}

class DestructionDepthTreeAsset : RasterTreeAsset {
}

class DestructionEdgeModelComponentData : ComponentData {
}

class DestructionMaskVolumeEntityData : GameEntityData {
	Vec4 DustAccumulationCurve;
	Vec4 ShaderUserMasks;
	float DustAccumulationLifeTime;
	SurfaceShaderInstanceDataStruct Shader;
	float Radius;
}

class DestructionPartComponentData : ComponentData {
	GameObjectData[] Objects;
	uint32 PartIndex;
	DestructionConnectivityType ConnectivityType;
	bool Fixed;
	bool Fragile;
}

class DestructionVolumeAsset : Asset {
	TextureAsset DiffuseAtlas;
	TextureAsset NormalmapAtlas;
	float AtlasTextureScale;
}

class DestructionVolumeComponentData : ComponentData {
	DestructionVolumeData DestructionVolumeData;
}

class DestructionVolumeData : DataContainer {
	AxisAlignedBox BoundingBox;
	DestructionVolumeAsset Asset;
	Vec4[] Impacts;
	uint32[] PartToImpactIndices;
}

class DetonatedWeaponData : WeaponData {
	LockingControllerData LockingController;
	float Range;
}

class DialogNode : StateNode {
	string DialogTitle;
	string DialogText;
	UIPopupButton[] Buttons;
}

class DialogSamplerNodeData : AudioGraphNodeData {
	AudioGraphNodePort Pitch;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Continue;
	AudioGraphNodePort Output;
	AudioGraphNodePort Triggered;
	AudioGraphNodePort Finished;
	SoundGraphPluginRef SndPlayerPlugin;
	SoundGraphPluginRef ResamplePlugin;
	SoundGraphPluginRef PausePlugin;
	SoundGraphPluginRef GainPlugin;
	float TailLength;
}

class DifficultyData : DataContainer {
	Vec3 StickyBoxModifier;
	Vec3 SnapBoxModifier;
	float HumanHealthModifier;
	PersistenceGameType GameType;
	float FriendsHealthModifier;
	float FriendlyDamageModifier;
	float VehicleDamageModifier;
	float HumanInCriticalHealth;
	float EnemiesHealthModifier;
	float HumanRegenerationRateModifier;
	float HumanInCriticalHealthDamageModifier;
	float InteractiveManDownDamageModifier;
	float InteractiveManDownTimeMultiplier;
	float InteractiveManDownReviveTime;
	int32 AdrenalineKillLimit;
	float CriticalHealthJesusModeTimeModifier;
	Difficulty Difficulty;
	float CriticalFakeImmortalModifier;
	float SuckZoomModifier;
	GameAIDifficultyData AIData;
	float AiBulletDamageHumanCooldown;
	bool UsePitchZoomSnap;
}

class DifficultyDatas : Asset {
	DifficultyData[] Difficulties;
}

class DifficultyIndexEntityData : EntityData {
	Realm Realm;
}

class DirectOutputNodeData : OutputNodeData {
}

class DirtySockPresenceBackendData : PresenceBackendData {
}

class DiscComponentData : UIComponentData {
}

class DistortionClipNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort ClipLevel;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class DivisibleLoopPlayerNodeData : AudioGraphNodeData {
	AudioGraphNodePort Start;
	AudioGraphNodePort Stop;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort FreezeSegment;
	AudioGraphNodePort Output;
	SoundWaveAsset Wave;
	AudioGraphNodePort ExternalWave;
	DivisibleLoopPlayerPlugins[] Plugins;
	float CrossFadeLength;
	bool StartAtRandomPosition;
}

class DofComponentData : ComponentData {
	Realm Realm;
	float NearDistanceScale;
	float FocusDistance;
	BlurFilter BlurFilter;
	float BlurFilterDeviation;
	float FarDistanceScale;
	float BlurAdd;
	float Scale;
	float DiffusionDofFocalLength;
	float DiffusionDofAperture;
	bool DiffusionDofEnable;
	bool Enable;
}

class DogTagData : UnlockAssetBase {
	string NameSID;
	string DescriptionSID;
	string ImageName;
	string SmallImageName;
	DogTagCategory Category;
	bool InvertText;
	bool IsAlwaysAvailable;
	bool ExcludedOnXenon;
	bool ExcludedOnPs3;
	bool ExcludedOnWin32;
}

class DogTagsAsset : Asset {
	StatsCategoryWeaponData MeleeKillWeapon;
	BasicDogTagData[] BasicDogTags;
	AdvancedDogTagData[] AdvancedDogTags;
}

class DriverComponentData : ComponentData {
	float WantedSpeed;
	DriverSettings Settings;
}

class DriverSettings : Asset {
	float MinRadius;
	float RadiusGrowthSpeed;
	float StoppingDeceleration;
	float SteeringSensitivity;
	float MaxBrakeOutput;
	float MaxDec;
	float LookAheadTime;
	float AngleDiffForNoSlowdown;
	float AngleDiffForFullSlowdown;
	float VelocityAtFullSlowdown;
	float VelDiffAtMinAcc;
	float VelDiffAtMaxAcc;
	float MaxYawToApplySprint;
	float MinAcc;
	float MaxAcc;
	float VelDiffAtMinDec;
	float VelDiffAtMaxDec;
	float AccDiffAtMinThrottleVelocityDecelerating;
	float MinDec;
	float MinThrottleVelocityDecelerating;
	float AccDiffAtMinThrottleVelocityAccelerating;
	float AccDiffAtMaxThrottleVelocityAccelerating;
	float MaxThrottleVelocityDecelerating;
	float MinThrottleVelocityAccelerating;
	float MaxThrottleVelocityAccelerating;
	float MaxPTerm;
	float AccDiffAtMaxThrottleVelocityDecelerating;
	float P;
	float I;
	float MaxError;
	float MaxITerm;
	float MaxSumError;
	float D;
	bool UseSquareVelDiffCurveDec;
	bool UseSquareAccDiffCurveDec;
	bool SquareBrakeOutput;
	bool UseSquareVelDiffCurveAcc;
	bool UsePIDRegulator;
	bool UseSquareAccDiffCurveAcc;
}

class DriverStaticObjectComponentData : DriverComponentData {
	float Acceleration;
	float Deceleration;
	float TurningRadius;
	bool TurnWhileStill;
	bool AlignWithGroundNormal;
}

class DropWeaponComponentData : ComponentData {
	PickupEntityAsset DeathPickup;
	EntryInputActionEnum ActionIdentifier;
	float DropWeaponAfterTime;
	PickupEntityAsset Pickup;
	WeaponSlot[] ExcludedWeaponSlots;
	float WeaponDropTime;
	bool ListenToAnimationWeaponDropSignal;
	bool AllowDropWeaponOnAction;
	bool RequireWeaponSlotEmpty;
}

class DuplicateSpawnScopeStrategyData : SoundScopeStrategyData {
	float Time;
	float Distance;
	uint32 ClosestCount;
	bool GroupTypes;
}

class DxDisplaySettings : SystemSettings {
	uint32 FullscreenWidth;
	uint32 FullscreenHeight;
	string AmdMinDriverVersion;
	uint32 NvidiaMinDriverVersion;
	float FullscreenRefreshRate;
	float StereoSeparationScale;
	float StereoDepth;
	int32 FullscreenOutputIndex;
	int32[] DebugBreakIgnoredIDs;
	float StereoConvergenceScale;
	float StereoSoldierZoomConvergenceScale;
	int32 ForceRenderAheadLimit;
	int32 PresentInterval;
	bool DebugBreakOnWarningEnable;
	bool DebugInfoEnable;
	bool Fullscreen;
	bool DebugBreakOnErrorEnable;
	bool CreateMinimalWindow;
	bool DriverInternalThreadingEnable;
	bool DebugBreakOnInfoEnable;
	bool FullscreenModeEnable;
	bool VSyncEnable;
	bool TripleBufferingEnable;
	bool Dx10PlusEnable;
	bool NvApiEnable;
	bool NvPerfHudEnable;
	bool StereoEnable;
	bool Dx11Enable;
	bool Dx10Dot0Enable;
	bool RefDriverEnable;
	bool Dx10Dot1Enable;
	bool MinDriverRequired;
	bool WarpDriverEnable;
	bool NullDriverEnable;
	bool MultiGpuValidationEnable;
}

class DynamicAOComponentData : ComponentData {
	Realm Realm;
	float SsaoMaxDistanceOuter;
	float SsaoFade;
	float SsaoRadius;
	float SsaoMaxDistanceInner;
	float HbaoRadius;
	float HbaoAttenuation;
	float HbaoAngleBias;
	float HbaoPowerExponent;
	float HbaoContrast;
	float HbaoMaxFootprintRadius;
	bool Enable;
}

class DynamicAvoidanceEntityData : EntityData {
	DynamicAvoidanceMode RepelOthers;
	DynamicAvoidanceMode ReportPredictedCollision;
	float CollisionRadius;
	Realm Realm;
	AntDynamicAvoidanceBinding AntBinding;
	bool AffectedByRepellingForce;
	bool PredictedByOthers;
}

class DynamicDataContainer : DataContainer {
	DataField[] Fields;
}

class DynamicEnlightenEntityData : EnlightenEntityData {
	EnlightenDataAsset EnlightenData;
}

class DynamicEnvmapComponentData : ComponentData {
	Vec3 KeyColorEnvmap;
	Vec3 GroundColorEnvmap;
	Vec3 SkyColorEnvmap;
	bool Enable;
}

class DynamicGamePhysicsEntityData : GamePhysicsEntityData {
}

class DynamicModelEntityData : DynamicGamePhysicsEntityData {
	PartComponentData Part;
	MeshAsset Mesh;
	bool NoCollision;
}

class DynamicWeaponPickupEntityData : PickupEntityData {
	DynamicWeaponPickupSlotData[] WeaponSlots;
	bool KeepAmmoState;
}

class EdgeModelComponentData : DestructionEdgeModelComponentData {
	RigidMeshAsset[] RigidMeshes;
	uint32 MaxInstanceCount;
}

class EdgeModelLightMapData : DataContainer {
	Vec4[] LightMapUvs;
}

class EditableAction : DataContainer {
	InputConceptIdentifiers Concept;
}

class EffectAsset : EffectBlueprint {
}

class EffectBlueprint : ObjectBlueprint {
}

class EffectComponentData : ComponentData {
	EffectBlueprint Effect;
	float EmitterParameter1;
	float EmitterParameter3;
	float EmitterParameter2;
	bool AutoStart;
	bool SnapToWaterSurface;
}

class EffectEntityData : SpatialEntityData {
	GameObjectData[] Components;
	uint32 MaxInstanceCount;
	float CullDistance;
	float StartDelay;
	bool HighEndPc;
	bool MediumPc;
	bool LowEndPc;
	bool ResetInstanceWhenStarted;
}

class EffectManagerSettings : SystemSettings {
	uint32 MaxNewEffectsPerFrameCount;
	uint32 SizeToGrowNewEffectsContainer;
	uint32 EffectQuality;
}

class EffectReferenceObjectData : ReferenceObjectData {
	bool AutoStart;
}

class EmitterAsset : Asset {
}

class EmitterComponentData : DataContainer {
}

class EmitterData : ProcessorData {
	EmitterDocument[] EmitterAssets;
}

class EmitterDocument : EmitterAsset {
	ProcessorData RootProcessor;
	EmitterTemplateData TemplateData;
}

class EmitterEntityData : EffectEntityData {
	EmitterAsset Emitter;
	float SpawnProbability;
}

class EmitterExclusionVolumeData : OBBData {
}

class EmitterSystemAsset : Asset {
	EmitterTextureAtlasInfo[] TextureInfos;
	TextureAsset BaseAtlasTexture;
	TextureAsset NormalAtlasTexture;
}

class EmitterSystemSettings : DataContainer {
	uint32 MeshDrawCountLimit;
	float TimeScale;
	float GlobalResetStartTimeInterval;
	float QuadHalfResSlice2ThresholdLow;
	float QuadHalfResSlice2ThresholdHigh;
	float QuadHalfResSlice1ThresholdLow;
	float QuadHalfResSlice1ThresholdHigh;
	int32 DebugOverdrawCount;
	uint32 DrawStats;
	float MeshStreamingPriorityMultiplier;
	float QuadZOcclusionBias;
	uint32 DrawBoundingBoxes;
	float MinScreenArea;
	float QuadNearFadeDistance;
	int32 QuadTechnique;
	float MeshCullingDistance;
	bool EnableFixedTimeStep;
	bool ZBufferCullEnable;
	bool QuadEnableOverdrawRendering;
	bool QuadColorShaderCostsEnable;
	bool DrawProjectedBoxes;
	bool QuadSimpleRenderingEnable;
	bool EnableJobs;
	bool EnableRendering;
	bool QuadHalfResEnable;
	bool QuadEnableRendering;
	bool EnableFixedDelta;
	bool QuadClipScaleEnable;
	bool QuadNiceRenderingEnable;
	bool QuadGroupsJoinAll;
	bool QuadGroupsJoinNone;
	bool QuadGroupsJoinNiceAndSimple;
	bool QuadEnableOpaque;
	bool QuadVertexShadowsEnable;
	bool QuadPointLightsEnable;
	bool QuadSpotLightsEnable;
	bool QuadEnableSorting;
	bool MeshRenderingEnable;
	bool MeshDrawTransforms;
	bool MeshDrawBoundingBoxes;
	bool MeshShadowEnable;
	bool QuadEnableWireframe;
	bool Enable;
	bool QuadEnableZOcclusion;
	bool MeshDrawCullStats;
}

class EmitterTemplateData : DataContainer {
	Vec4 PointLightIntensity;
	Vec3 PointLightPivot;
	Vec3 PointLightColor;
	uint32 MaxCount;
	string Name;
	float TimeScale;
	uint32 LifetimeFrameCount;
	float Lifetime;
	ProcessorData RootProcessor;
	float VisibleAfterDistance;
	float[] ZOcclusionLookup;
	EmittableType EmittableType;
	MeshAsset Mesh;
	float DistanceScaleNearValue;
	float PointLightRadius;
	float VertexPixelLightingBlendFactor;
	float GlobalLocalNormalBlendFactor;
	float SoftParticlesFadeDistanceMultiplier;
	float LightWrapAroundFactor;
	float LightMultiplier;
	float DistanceScaleFarValue;
	float PointLightRandomIntensityMin;
	float MeshCullingDistance;
	float PointLightRandomIntensityMax;
	float MaxSpawnDistance;
	float MinScreenArea;
	float DistanceScaleLength;
	float PointLightMaxClamp;
	float ParticleCullingFactor;
	float PointLightMinClamp;
	bool FollowSpawnSource;
	bool RepeatParticleSpawning;
	bool Emissive;
	bool ExclusionVolumeCullEnable;
	bool TransparencySunShadowEnable;
	bool ForceFullRes;
	bool LocalSpace;
	bool Opaque;
	bool ActAsPointLight;
	bool KillParticlesWithEmitter;
	bool ForceNiceSorting;
}

class EngineComponentData : ComponentData {
	EngineConfigData Config;
	SoundAsset SoundEffect;
	SoundAsset SurfaceSoundEffect;
	bool UseFirstPersonSounds;
	bool OutputIsEngineInWater;
}

class EngineConfigData : DataContainer {
	Vec3 Position;
	float[] RpmCurvePoints;
	float[] TorqueCurvePoints;
	float RpmMin;
	float RpmMax;
	float RpmCut;
	float EnginePowerMultiplier;
	float InternalAccelerationFactor;
	float InternalDeaccelerationFactor;
	Boost Boost;
}

class EnlightenBuildRadiosityParams : DataContainer {
}

class EnlightenBuildRadiositySceneDesc : DataContainer {
	EnlightenLightProbeSet[] LightProbeSets;
	EnlightenInputInstance[] Instances;
	Vec3[] StaticLightProbes;
	string Terrain;
	uint32 SamplesPerCluster;
	float SystemInfluenceRadius;
	uint32 SystemSize;
	uint32 IrBudget;
	float ClusterSize;
	bool SaveDebugData;
	bool DistributedBuild;
	bool CacheEnable;
}

class EnlightenComponentData : ComponentData {
	Vec3 SkyBoxSkyColor;
	Vec3 SkyBoxBackLightColor;
	Vec3 SkyBoxGroundColor;
	Vec3 TerrainColor;
	Vec3 SkyBoxSunLightColor;
	float BounceScale;
	float CullDistance;
	float SunScale;
	Realm Realm;
	float SkyBoxBackLightRotationY;
	float SkyBoxSunLightColorSize;
	float SkyBoxBackLightColorSize;
	float SkyBoxBackLightRotationX;
	bool SkyBoxEnable;
	bool Enable;
}

class EnlightenDataAsset : Asset {
	TextureAsset DebugBackFaceTexture;
	int32 MaxResolutionY;
	TextureAsset DebugChartTexture;
	TextureAsset SkyVisibilityTexture;
	float VisibilityThreshold;
	int32 MaxResolutionX;
	bool LoadDebugData;
	bool DynamicEnable;
}

class EnlightenDatabaseAsset : Asset {
	uint32 DataVersion;
	uint32 DebugMeshDataVersion;
	uint32 OutputSizeX;
	uint32 OutputSizeY;
	EnlightenDbSystem[] Systems;
	EnlightenLightProbeSet[] LightProbeSets;
}

class EnlightenDataCreatorParams : DataContainer {
	string AssetName;
}

class EnlightenEntityData : EntityData {
	int32 Priority;
	Realm Realm;
	bool Enable;
}

class EnlightenPipelineParams : DataContainer {
	bool DynamicEnable;
}

class EnlightenPipelineTerrain : Asset {
	EnlightenPipelineTerrainMesh[] Meshes;
}

class EnlightenRuntimeConfig : Asset {
	uint32 JobCount;
}

class EnlightenRuntimeSettings : SystemSettings {
	Vec3 AlbedoDefaultColor;
	float LocalLightForceRadius;
	int32 DrawDebugSystemDependenciesEnable;
	float TemporalCoherenceThreshold;
	float SkyBoxScale;
	uint32 MinSystemUpdateCount;
	uint32 JobCount;
	int32 DrawDebugSystemBoundingBoxEnable;
	uint32 LightProbeMaxUpdateSolveCount;
	float DrawDebugLightProbeSize;
	bool CompensateSunShadowHeightScale;
	bool SaveRadiosityTexturesEnable;
	bool ShadowsEnable;
	bool LightMapsEnable;
	bool LocalLightsEnable;
	bool LocalLightCullingEnable;
	bool LocalLightCustumFalloff;
	bool LightProbeForceUpdate;
	bool ForceDynamic;
	bool DrawDebugSystemsEnable;
	bool LightProbeEnable;
	bool LightProbeJobsEnable;
	bool DrawDebugLightProbes;
	bool DrawDebugLightProbeOcclusion;
	bool DrawDebugLightProbeStats;
	bool DrawDebugLightProbeBoundingBoxes;
	bool Enable;
	bool DrawSolveTaskPerformance;
	bool DrawDebugColoringEnable;
	bool DrawDebugTextures;
	bool DrawDebugBackFaces;
	bool DrawDebugTargetMeshes;
	bool DrawWarningsEnable;
	bool AlbedoForceUpdateEnable;
	bool AlbedoForceColorEnable;
	bool DrawDebugEntities;
	bool TerrainMapEnable;
	bool EmissiveEnable;
}

class EnlightenShaderDatabaseAsset : Asset {
}

class EnlightenState : DataContainer {
	Vec3 SkyBoxGroundColor;
	Vec3 SkyBoxSunLightColor;
	Vec3 SkyBoxBackLightColor;
	Vec3 SkyBoxSkyColor;
	float SunScale;
	float OutputScale;
	float BounceScale;
	float SkyBoxSunLightColorSize;
	float SkyBoxBackLightRotationY;
	float SkyBoxBackLightColorSize;
	float SkyBoxBackLightRotationX;
	bool SkyBoxEnable;
}

class EnterVehicleSurveyEvent : MetricEvent {
	string VehicleName;
	guid SurveyMetricLink;
}

class EntitlementQuery : Asset {
	EntitlementData[] EntitlementsData;
	string[] GroupNames;
	GamePlatform Platform;
	string EntitlementTag;
	string ProductId;
	string ProjectId;
}

class EntityBusData : DataBusData {
	EventConnection[] EventConnections;
	InterfaceDescriptorData Descriptor;
	bool NeedNetworkId;
	bool InterfaceHasConnections;
	bool AlwaysCreateEntityBusClient;
	bool AlwaysCreateEntityBusServer;
}

class EntityData : GameObjectData {
}

class EntityInteractionComponentData : ComponentData {
	float PickupRadius;
	float MaxAmmoPickupTimer;
	float MaxAmmoCrateTimer;
	InteractionTypesData InteractWithTypes;
	float MaxLookAtAngle;
	float SoldierInteractRadius;
	EntryInputActionEnum SoldierInteractInputAction;
	bool AllowInteractionWithSoldiers;
	bool OnlyAllowInteractionWithManDownSoldiers;
}

class EntityRecordingData : DataContainer {
	guid EntityGuid;
	PropertyRecordingData[] Data;
}

class EntitySettings : SystemSettings {
	uint32 OutOfEntityBusNetworkIdThreshold;
	ExecutionModeType ExecutionMode;
	bool SpawnSubLevelsFromLogic;
	bool EditorGameViewEnable;
}

class EntityTransformData : DataContainer {
	LinearTransform[] EntityTransforms;
}

class EntityVoiceOverInfo : DataContainer {
	VoiceOverObject VoiceOverType;
	VoiceOverLabel[] Labels;
}

class EntryComponentData : ComponentData {
	Vec3 SoldierOffset;
	GameAIEntryData AIData;
	EntryClass EntryClass;
	EntryInputActionMapsData InputConceptDefinition;
	InputActionMappingsData InputMapping;
	InputCurveData[] InputCurves;
	EntryComponentHudData HudData;
	int32 EntryOrderNumber;
	float EnterImpulse;
	float EntryRadius;
	EntryInputActionEnum TriggerEventOnKey;
	EntrySpottingSettings EntrySpottingSettings;
	PoseConstraintsData PoseConstraints;
	float SoldierTransitionInvisbleTime;
	int32 NumberOfStances;
	EntryComponentSoundData EntryComponentSound;
	bool LockSoldierAimingToEntry;
	bool IsAllowedToExitInAir;
	bool Show1pSoldierInEntry;
	bool StancesEnabled;
	bool Show1pSoldierInEntryForPlayerOnly;
	bool HideSoldierForPassengers;
	bool Show3pSoldierWeaponInEntry;
	bool ShowSoldierGearInEntry;
	bool IsShielded;
	bool ForbiddenForHuman;
	bool ShowSoldierWeaponInEntry;
	bool ShowSoldierInEntry;
}

class EntryComponentSoundData : DataContainer {
	StanceSwitchSoundData[] StanceSounds;
	SoundAsset StanceSwitchSound;
}

class EntryInputActionMapData : InputActionMapData {
}

class EntryInputActionMappingData : InputActionMappingData {
	EntryInputActionEnum ActionIdentifier;
	InputConceptIdentifiers ConceptIdentifier;
}

class EntryInputActionMapsData : Asset {
	int32 ActionMapSettingsScheme;
	InputActionMapSlot DefaultInputActionMap;
	EntryInputActionMapData[] InputActionMaps;
}

class EnvmapEntityData : EntityData {
}

class EqualizerSettings : DataContainer {
	float LowShelfFrequency;
	float LowShelfGain;
	float HighShelfFrequency;
	float HighShelfGain;
	float HpCutoffFrequency;
}

class EulerTransformEntityData : EntityData {
	Vec3 In1;
	Realm Realm;
	float In;
	ModifierEuler Euler;
}

class EulerTransformSplitterEntityData : EntityData {
	LinearTransform Transform;
	Realm Realm;
}

class EvaluatorData : EmitterComponentData {
	EmitterParameter EmitterParameter;
}

class EventAndGateEntityData : EntityData {
	Realm Realm;
	uint32 EventCount;
}

class EventCompareGateEntityData : EntityData {
	int32 Value;
	EventCompareGateType CompareType;
	Realm Realm;
}

class EventDebugNodeData : AudioGraphNodeData {
	DebugEventInput[] Events;
}

class EventGateEntityData : EntityData {
	Realm Realm;
	bool Default;
}

class EventGateNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Out;
	AudioGraphNodePort CoolDownTime;
	AudioGraphNodePort Enable;
}

class EventIfSwitchEntityData : GameEntityData {
	bool RunOnce;
	bool StartState;
}

class EventMemoryEntityData : GameEntityData {
	Realm Realm;
}

class EventQueueEntityData : EntityData {
	Realm Realm;
}

class EventSplitterEntityData : EntityData {
	Realm Realm;
	bool RunOnce;
}

class EventSwitchEntityData : EntityData {
	Realm Realm;
	uint32 OutEvents;
	bool AutoIncrement;
}

class EventSwitcherEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort CaseTrigger;
	float Value;
}

class EventSwitcherNodeData : AudioGraphNodeData {
	EventSwitcherEntry[] Inputs;
	AudioGraphNodePort Value;
}

class EventSyncEntityData : EntityData {
}

class ExampleVehicleBlueprintBundleMetadata : BlueprintBundleMetadata {
	ExampleVehicleType ExampleVehicleType;
}

class ExpanderNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Threshold;
	AudioGraphNodePort Ratio;
	AudioGraphNodePort AttackTime;
	AudioGraphNodePort ReleaseTime;
	AudioGraphNodePort Out;
	ExpanderChannelMode ChannelMode;
	SoundGraphPluginRef Plugin;
}

class ExplosionEntityData : GameEntityData {
	EffectBlueprint DetonationEffect;
	float BlastImpulse;
	MaskVolumeEntityData MaskVolume;
	DestructionMaskVolumeEntityData DestructionMaskVolume;
	MaterialContainerPair MaterialPair;
	DamageIndicationType DamageIndicationType;
	float EmpTime;
	float MaxOcclusionRaycastRadius;
	float InnerBlastRadius;
	float BlastDamage;
	float BlastRadius;
	float ShockwaveImpulse;
	float SpawnDelay;
	float ShockwaveDamage;
	float ShockwaveRadius;
	float CameraShockwaveRadius;
	float ShockwaveTime;
	bool DisableOcclusion;
	bool DisableStaticEntityOcclusion;
	bool UseEntityTransformForDetonationEffect;
	bool HasStunEffect;
	bool TriggerImpairedHearing;
	bool DetonateOnce;
	bool ShowOnMinimap;
}

class ExplosionPackEntityData : MeshProjectileEntityData {
	float TimeToLiveOnPlayerDeath;
	SoldierDetonationData SoldierDetonationData;
	float VehicleDetonationActivationDelay;
	float VehicleDetonationRadius;
	UIHudIcon Icon;
	float SpottedTime;
	float DefuseRadius;
	float Health;
	bool HasRemoteDetonator;
	bool IsDestructible;
	bool HasVehicleDetonation;
	bool ReceivesExplosionDamage;
}

class ExtendedConstraintsData : DataContainer {
	float Heading;
	float Width;
	float Falloff;
	float AngularConstraintMin;
	float AngularConstraintMax;
}

class FaceAnimationWaveMappings : DataContainer {
	AntRef AntAsset;
	AntRef OnStartedTalking;
	FaceAnimationWaveMapping[] Mappings;
}

class FaceposerComponentData : ComponentData {
	AntRef FacePoserEnabled;
	float LodDistance;
	AntRef FacePoseLibraryReference;
	AntRef[] FacePoseLibrary;
	string FacePoserDofSetName;
	string[] ShaderExposedValues;
	int32 FacePoseLibraryIndex;
}

class FadeEntityData : EntityData {
	float FadeTime;
	float MaxWaitFadedWhileStreamingTime;
	bool FadeScreen;
	bool FadeUI;
	bool FadeRumble;
	bool FadeAudio;
	bool FadeMovie;
	bool StartFaded;
}

class FakeHingeData : FakePhysicsData {
	Vec3 Pivot;
	Vec3 RotationAxis;
	Vec3 ExtensionAxis;
	float MinAngle;
	float MaxAngle;
	float AngularDampening;
	float PullbackAcceleration;
	float ProgressiveExponent;
	float InertiaModifier;
}

class FakePhysicsData : DataContainer {
	FakePhysicsData ChildFakePhysics;
	float StartSpeed;
	float GravityModifier;
	float StartDampening;
	float EndDampening;
	float MinSpeed;
	float MaxSpeed;
	float Mass;
}

class FakeSpringData : FakePhysicsData {
	Vec3 Direction;
	float Length;
	float Acceleration;
	float ProgressiveExponent;
	float Damping;
}

class FallingStateData : CharacterStateData {
}

class FenceModelEntityData : StaticModelEntityData {
	float Width;
	float Angle;
}

class FilmGrainComponentData : ComponentData {
	Vec3 ColorScale;
	Vec2 TextureScale;
	Realm Realm;
	TextureAsset Texture;
	bool LinearFilteringEnable;
	bool RandomEnable;
	bool Enable;
}

class FiringFunctionData : GameDataContainer {
	FiringDispersionData[] Dispersion;
	SoldierWeaponDispersion WeaponDispersion;
	FireEffectData[] FireEffects1p;
	FireEffectData[] FireEffects3p;
	SoundAsset Sound;
	ShotConfigData Shot;
	FireLogicData FireLogic;
	AmmoConfigData Ammo;
	OverHeatData OverHeat;
	float SelfHealTimeWhenDeployed;
	float AmmoCrateReloadDelay;
	bool UnlimitedAmmoForAI;
	bool UsePrimaryAmmo;
}

class FirstPersonCameraData : DataContainer {
	Vec3 Offset;
	Vec3 WeaponBaseOffset;
	Vec3 WeaponLagRotationOffset;
	Vec3 Rotation;
	WeaponLagSpringEffectData WeaponSpringEffect;
	WeaponLagSpringEffectData CameraSpringEffect;
	float MoveStrafeModifier;
	float MoveForwardModifier;
	float RotateYawModifier;
	float RotatePitchModifier;
	float RotateRollModifier;
	float ZoomMoveStrafeModifier;
	float ZoomMoveForwardModifier;
	float ZoomRotateYawModifier;
	float ZoomRotatePitchModifier;
	float ZoomRotateRollModifier;
	float ReleaseModifier;
	float ReleaseModifierPitch;
	float ReleaseModifierYaw;
	float ReleaseModifierRoll;
	float OffsetReleaseModifier;
	float ZoomReleaseModifierPitch;
	float ZoomReleaseModifierYaw;
	float ZoomReleaseModifierRoll;
	float ZoomOffsetReleaseModifier;
	float RotationAdditionToOffset;
}

class FlagComponentData : ComponentData {
	Realm Realm;
	ObjectBlueprint Flag_Team1;
	ObjectBlueprint Flag_Team2;
}

class FlagCounterEntityData : GameEntityData {
	TeamId TeamId;
	float EnemyFlagProgress;
	float RoundTime;
	int32 ObjectiveFlagCount;
	bool VisibleInMinimap;
}

class FlapComponentData : PartComponentData {
	RotationAxisEnum RotationAxis;
	float RotationScale;
}

class FlareEntityData : GrenadeEntityData {
	float FlareRange;
}

class FlashlightWeaponData : WeaponData {
	float UpdateFrequency;
	float Range;
	float Angle;
}

class FlatOutputNodeData : OutputNodeData {
	float Angle;
	float ReverbGain;
	SoundBusData ReverbSend;
	AudioGraphNodePort CenterLevel;
	AudioGraphNodePort LfeLevel;
	SoundGraphPluginRef PanPlugin;
	SoundGraphPluginRef ReverbSendPlugin;
}

class FloatEntityData : EntityData {
	Realm Realm;
	float DefaultValue;
	float IncDecValue;
}

class FloatHubEntityData : EntityData {
	Realm Realm;
	int32 InputCount;
	int32 InputSelect;
}

class FloatPhysicsData : DataContainer {
	float Density;
	float FilledDensity;
}

class FloatPropertyTrackData : SimplePropertyTrackData {
	float[] Values;
}

class FloatRecordingData : PropertyRecordingData {
	float[] Values;
}

class FloatUnlockValuePair : UnlockValuePair {
	float DefaultValue;
	float UnlockedValue;
}

class FogComponentData : ComponentData {
	Vec4 Curve;
	Vec4 FogColorCurve;
	Vec3 FogColor;
	float FogColorStart;
	float FogDistanceMultiplier;
	Realm Realm;
	float End;
	float TransparencyFadeStart;
	float Start;
	float TransparencyFadeEnd;
	float FogColorEnd;
	float TransparencyFadeClamp;
	float HeightFogVisibilityRange;
	float HeightFogAltitude;
	float HeightFogDepth;
	float HeightFogFollowCamera;
	bool FogGradientEnable;
	bool Enable;
	bool HeightFogEnable;
	bool FogColorEnable;
}

class FogEffectState : DataContainer {
	Vec4 FogColorCurve;
	Vec4 Curve;
	Vec3 FogColor;
	float Start;
	float End;
	float FogColorStart;
	float FogColorEnd;
	float HeightFogVisibilityRange;
	float TransparencyFadeStart;
	float TransparencyFadeEnd;
	float TransparencyFadeClamp;
	float HeightFogDepth;
	float HeightFogFollowCamera;
	float HeightFogAltitude;
	bool HeightFogEnable;
	bool Enable;
}

class FollowAISoldierOrderEntityData : FollowPlayerOrderEntityData {
}

class FollowClosestHumanOrderEntityData : FollowPlayerOrderEntityData {
}

class FollowConstantData : Asset {
	float DistanceFromPlayerBeforeTeleport;
	float FollowHumanMaxDistance;
	float FollowHumanInCombatMaxDistance;
	float FollowAiMaxDistance;
	float FollowAiInCombatMaxDistance;
	float FollowMimicPoseDistance;
	float FollowInertia;
	float LookAwayAngle;
}

class FollowEnvelopeNodeData : AudioGraphNodeData {
	AudioGraphNodePort X;
	AudioGraphNodePort Y;
	float Base;
	float Scale;
	float Pivot;
}

class FollowPlayerOrderEntityData : BFOrderEntityData {
	FormationData Formation;
	bool CombatForbidden;
}

class FollowWaypointsEntityData : EntityData {
	RouteType TypeOfRoute;
	bool UsePathFinding;
	bool StartAtGeometricallyClosestWaypoint;
}

class FormationData : GameDataContainer {
	Vec3[] Positions;
	string Name;
}

class FormationHolder : Asset {
	FormationData[] Formations;
}

class FPSCameraData : TargetCameraData {
	TurnEffectData TurnEffectSettings;
	BlurEffectData BlurEffectSettings;
	float FOV;
}

class FramerateHistogramPerformanceEvent : MetricEvent {
	float SpikeAverage;
	float Below5;
	float Below10;
	float Below15;
	float Below20;
	float Below25;
	float Below30;
	float Below60;
	float Above60;
	guid PerformanceLink;
}

class FrequencyShiftSsbNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Out;
	FrequencyShiftSsbFilter Filter;
	SoundGraphPluginRef Plugin;
}

class FriendlyFireEntityData : EntityData {
	TeamId[] Teams;
	float EnemyCommitmentAllocation;
	float FriendlyCommitmentAllocation;
	float MaxCommitment;
	float FailureThreshold;
	float DecayRate;
}

class FriendZoneDebugRenderEntityData : EntityData {
	Realm Realm;
}

class FriendZoneEntityData : EntityData {
	int32 EnemyWeight;
	int32 FriendlyWeight;
	int32 CorpsTimeout;
	int32 CorpsWeight;
	bool CountCorpsesForAllTeams;
	bool InitialZoneRandomized;
}

class FrontEndComponentData : UIComponentData {
}

class GainFaderNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Start;
	AudioGraphNodePort StartTime;
	AudioGraphNodePort FadeTime;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Out;
	GainFaderFadeType FadeType;
	SoundGraphPluginRef Plugin;
}

class GainNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class GameAIDifficultyData : DataContainer {
}

class GameAIEntryData : Asset {
}

class GameAISystem : Asset {
}

class GameAIWeaponData : Asset {
}

class GameAnimationConfig : Asset {
	bool ServerEnable;
	bool ClientEnable;
	bool UseRawGamepadInput;
}

class GameAnimationSettings : SystemSettings {
	float TemporalLoddingFourthDeltaTime;
	string[] AntOnClientOnlyGamemodes;
	float TemporalLoddingFarDistance;
	float TemporalLoddingSixthDeltaTime;
	float TemporalLoddingFifthDeltaTime;
	float TemporalLoddingFirstDeltaTime;
	float TemporalLoddingSecondDeltaTime;
	float TemporalLoddingThirdDeltaTime;
	float TemporalLoddingSixthDistance;
	float TemporalLoddingSecondDistance;
	float TemporalLoddingFifthDistance;
	float TemporalLoddingFirstDistance;
	float TemporalLoddingThirdDistance;
	float TemporalLoddingFourthDistance;
	bool ServerEnable;
	bool UseRawGamepadInput;
	bool ClientEnable;
	bool UseAnimationDrivenCharacter;
}

class GameBehaviourTemplateData : Asset {
}

class GameDataContainer : DataContainer {
}

class GameDataContainerAsset : Asset {
	GameDataContainer Data;
}

class GameEntityData : SpatialEntityData {
	GameObjectData[] Components;
	bool Enabled;
	int8 RuntimeComponentCount;
}

class GameInteractionEntityData : InteractionEntityData {
	BlinkType Blink;
	float CapturepointVerticalOffset;
	float DelayBetweenUses;
	TeamId TeamId;
	EntryInputActionEnum InputAction;
	float HoldToInteractTime;
	InteractionEntityType InteractionEntityType;
	string InteractionSid;
	string InteractingSid;
	string FriendlyTextSid;
	string NameSid;
	float InteractionVerticalOffset;
	string EnemyTextSid;
	bool ShrinkSnap;
	bool ShowAsCapturePoint;
}

class GameModeConfiguration : Asset {
	GameModeInformation[] Information;
}

class GameModeSettings : SystemSettings {
	GameModeInformation[] Information;
}

class GameObjectData : GameDataContainer {
	uint16 IndexInBlueprint;
	int8 IsEventConnectionTarget;
	int8 IsPropertyConnectionTarget;
}

class GamePhysicsEntityData : GameEntityData {
	PhysicsEntityData PhysicsData;
}

class GameRenderSettings : DataContainer {
	float StereoCrosshairDampingFactor;
	uint32 InactiveSkipFrameCount;
	float ForceOrthoViewSize;
	float StereoCrosshairRadius;
	float StereoCrosshairMaxHitDepth;
	float ForceBlurAmount;
	uint32 DrawFpsMethod;
	float ForceFov;
	float FovMultiplier;
	float StaticModelPartOcclusionMaxScreenArea;
	uint32 StaticModelCullJobCount;
	float EdgeModelLodScale;
	float EdgeModelScreenAreaScale;
	uint32 XenonRingBufferSize;
	uint32 SplitScreenTestViewCount;
	uint32 XenonPresentImmediateThreshold;
	uint32 XenonGammaRampType;
	uint32 Ps3VSyncMethod;
	float Ps3VideoGamma;
	uint32 Ps3FrameMainBufferSize;
	uint32 Ps3FrameLocalBufferSize;
	float ViewDistance;
	float CameraCutMaxFrameTranslation;
	float NearPlane;
	float ForceWorldFadeAmount;
	uint32 EdgeModelMaxVisibleInstanceCount;
	int32 EdgeModelForceLod;
	float EdgeModelViewDistance;
	bool Ps3LinearFrameCmdBufEnable;
	bool XenonRes1280x704Enable;
	bool PerfOverlayEnable;
	bool GcmHudEnable;
	bool MovieVSyncEnable;
	bool Ps3Res1280x704Enable;
	bool InitialClearEnable;
	bool GpuProfilerEnable;
	bool Ps3CellMemoryTexturesEnable;
	bool XenonBufferTwoFramesEnable;
	bool DrawFpsHistogram;
	bool Fullscreen;
	bool PerfOverlayLatestFrameTimeEnable;
	bool JobEnable;
	bool PerfOverlayVisible;
	bool EmittersEnable;
	bool EdgeModelsEnable;
	bool EdgeModelCastShadowsEnable;
	bool EdgeModelDepthBiasEnable;
	bool EdgeModelShadowDepthBiasEnable;
	bool VSyncFlashTestEnable;
	bool EntityRenderEnable;
	bool EdgeModelSpuInstancingEnable;
	bool EdgeModelUseMainLodEnable;
	bool DebugRenderServiceEnable;
	bool EdgeModelUseLodBox;
	bool DebugRendererEnable;
	bool ForceVSyncEnable;
	bool EdgeModelCullEnable;
	bool EdgeModelFrustumCullEnable;
	bool EdgeModelOcclusionCullEnable;
	bool EdgeModelAdditionalCullEnable;
	bool EdgeModelDrawBoxes;
	bool EdgeModelDrawStats;
	bool StaticModelEnable;
	bool StaticModelMeshesEnable;
	bool StaticModelZPassEnable;
	bool StaticModelPartCullEnable;
	bool StaticModelPartFrustumCullEnable;
	bool StaticModelPartOcclusionCullEnable;
	bool StaticModelPartShadowCullEnable;
	bool StaticModelDrawBoxes;
	bool StaticModelDrawStats;
	bool DrawScreenInfo;
	bool ForceOrthoViewEnable;
	bool StaticModelCullSpuJobEnable;
	bool LockView;
	bool ResetLockedView;
	bool DrawInfo;
	bool FadeEnable;
	bool FadeWaitingEnable;
	bool DrawFps;
	bool DestructionVolumeDrawEnable;
	bool BlurEnable;
	bool BuildJobSyncEnable;
	bool ForceSquareOrthoView;
	bool Enable;
}

class GameSensingTemplateData : Asset {
}

class GameSettings : SystemSettings {
	uint32 MaxPlayerCount;
	uint32 MaxSpectatorCount;
	SubWorldInclusion LayerInclusionTable;
	LogFileCollisionMode LogFileCollisionMode;
	uint32 LogFileRotationHistoryLength;
	string Level;
	string DefaultLayerInclusion;
	InputConfigurationAsset[] InputConfiguration;
	TeamId DefaultTeamId;
	float LevelWarmUpTime;
	float TimeToWaitForQuitTaskCompletion;
	GamePlatform Platform;
	VersionData Version;
	uint32 PS3ContentRatingAge;
	int32 DifficultyIndex;
	float TimeBeforeSpawnIsAllowed;
	SoldierWeaponSwitchingData SoldierWeaponSwitching;
	uint32 LogHistory;
	DifficultyDatas DifficultySettings;
	BlueprintBundleMetadataContainer[] MetadataContainers;
	SKU CurrentSKU;
	PlayerData Player;
	bool LogFileEnable;
	bool RotateLogs;
	bool EnableLoadingProfile;
	bool AdjustVehicleCenterOfMass;
	bool AutoAimEnabled;
	bool HasUnlimitedAmmo;
	bool HasUnlimitedMags;
	bool ResourceRefreshAlwaysAllowed;
	bool UseSpeedBasedDetailedCollision;
	bool AimAssistEnabled;
	bool AimAssistUsePolynomials;
	bool ForceFreeStreaming;
	bool ForceDisableFreeStreaming;
	bool IsGodMode;
	bool IsJesusMode;
	bool IsJesusModeAi;
	bool UseSingleWeaponSelector;
	bool GameAdministrationEnabled;
	bool AllowDestructionOutsideCombatArea;
}

class GameSoundEntityData : GameEntityData {
	SoundAsset Sound;
	bool PlayOnCreation;
}

class GameSplineData : CustomSplineData {
	GameSplineType SplineType;
}

class GameSplineEntityData : GameEntityData {
	GameSplineType SplineType;
	Vec3[] LocalPoints;
	Vec3[] Normals;
}

class GameTimeSettings : SystemSettings {
	float VSyncSubtractTime;
	float JoinJobsTimeLimit;
	float YieldTimeLimit;
	int32 YieldTime;
	float MaxInactiveVariableFps;
	float MaxSimFps;
	float MaxVariableFps;
	int32 ClampTicks;
	float ForceDeltaTime;
	int32 ForceDeltaTickCount;
	float TimeScale;
	bool UseWaitableTimers;
	bool ForceUseSleepTimer;
	bool ForceSinglePlayerFixedTick;
	bool ForceMultiplayerOneTickMin;
	bool VariableSimTickTimeEnable;
}

class GameTipAsset : Asset {
	GameTipData[] Tips;
}

class GearBagSpec : Asset {
	uint32 MaxPrimaryWeapons;
	uint32 MaxSecondaryWeapons;
	uint32 MaxSidearms;
	uint32 MaxGadgetsPerSlot;
	uint32 GadgetSlots;
	GearBagSpec[] ChildSpecs;
}

class GearboxConfigData : DataContainer {
	float[] ForwardGearRatios;
	float[] ForwardGearSpeeds;
	float[] ReverseGearRatios;
	float[] ReverseGearSpeeds;
	int32 GearboxType;
	int32 GearboxMode;
	float GearChangeTime;
	float GearDownSpeedFactor;
	float OppositeDirGearChangeMaxSpeed;
	float OppositeDirGearChangeTime;
	float ClutchSpeedFactor;
	float TransmissionEfficiency;
	float BackwardThrottleLimit;
	bool UseClassicGearBoxAutoClutch;
	bool UseNeutralGear;
	bool LimitBackwardThrottle;
	bool UseAutoClutch;
}

class GeographicalData : DataContainer {
	UIGeoLatitude Latitude;
	UIGeoLongitude Longitude;
	float SeaLevelOffset;
}

class GeographicalLevelDescriptionComponent : LevelDescriptionComponent {
	GeographicalData GeographicalData;
}

class GeometryTriggerEntityData : AreaTriggerEntityData {
}

class GlobalNode : UINodeData {
	UINodePort[] Outputs;
}

class GlobalPostProcessSettings : DataContainer {
	Vec3 Brightness;
	Vec3 ForceBloomScale;
	Vec4 ForceVignetteColor;
	Vec3 Contrast;
	Vec3 Saturation;
	Vec2 FilmGrainTextureScale;
	Vec2 ForceVignetteScale;
	Vec3 FilmGrainColorScale;
	uint32 Ps3EdgeMlaaJobPriority;
	uint32 BloomBlurIterationCount;
	uint32 DebugModeStep;
	BlurFilter BloomBlurFilter;
	float LdrBloomRange;
	PostProcessDebugMode DebugMode;
	float UserBrightnessMin;
	float UIBrightnessNorm;
	uint32 Ps3EdgeMlaaJobCount;
	uint32 Ps3EdgeMlaaAbsoluteThreshold;
	uint32 BloomPyramidLevelCount;
	uint32 BloomPyramidFinalLevel;
	float UserBrightnessMax;
	float UserBrightnessMulScale;
	float UserBrightnessAddScale;
	uint32 DownsampleAverageStartMipmap;
	uint32 Ps3EdgeMlaaThresholdFactor;
	uint32 Ps3EdgeMlaaThresholdBase;
	uint32 Ps3TiledLdrMipmapCount;
	uint32 Ps3TiledFloatMipmapCount;
	uint32 Ps3TiledBloomMipmapCount;
	BlurFilter HbaoGaussianBlurSize;
	float ForceExposure;
	float ForceBlurAdd;
	int32 ForceDofEnable;
	float ForceDofFocusDistance;
	float ForceDofNearDistanceScale;
	float ForceDofFarDistanceScale;
	float ForceDofScale;
	float ForceDofBlurFilterDeviation;
	uint32 HbaoTemporalFilterMaxNumFrames;
	int32 HbaoForceVendor;
	float ForceVignetteExponent;
	float HbaoTemporalFilterThreshold;
	int32 ForceTonemapMethod;
	float LUTGammaR;
	float LUTGammaG;
	float HbaoTemporalFilterThreshold2;
	int32 ForceChromostereopsisEnable;
	int32 ForceChromostereopsisOffset;
	float ForceChromostereopsisScale;
	uint32 HbaoBilateralBlurRadius;
	float ForceMiddleGray;
	float LUTGammaB;
	float LUTGammaCurbOffset;
	float HbaoBilateralBlurSharpness;
	uint32 HbaoRandomTextureWidth;
	float LensScopeFilterColorScale;
	float HbaoStepCount;
	float HbaoMaxFootprintRadius;
	float HbaoDirCount;
	float Hue;
	uint32 HbaoQuality;
	uint32 HbaoRandomDirVariationCount;
	float ForceDiffusionDofPlaneInFocus;
	float DiffusionDofLuminance;
	uint32 HbaoTemporalFilterDebugMode;
	float ForceDiffusionDofAperture;
	float ForceDiffusionDofFocalLength;
	DynamicAOMethod DynamicAOMethod;
	bool DrawDebugInfo;
	bool ColorGradingForceUpdateAlways;
	bool BloomBlurEnable;
	bool HdrBlurEnable;
	bool BlurBlendEnable;
	bool DownsampleAverageFromBloomEnable;
	bool FilmGrainEnable;
	bool Ldr16BitBloomEnable;
	bool DynamicAOEnable;
	bool DiffusionDofEnable;
	bool HbaoHalfResEnable;
	bool HbaoHalfResDepthEnable;
	bool HbaoVectorizedEnable;
	bool Ps3CompressedRenderTargetsEnable;
	bool HdrBloomEnable;
	bool FilmGrainRandomEnable;
	bool DirectExposureEnable;
	bool ExposureClampEnable;
	bool FilmGrainLinearFilteringEnable;
	bool HbaoBilateralBlurEnable;
	bool ColorGradingEnable;
	bool ColorTransformEnable;
	bool HbaoBilateralBlurCsEnable;
	bool HbaoTemporalFilterEnable;
	bool QuarterDownsamplingEnable;
	bool DrawDebugUserBrightnessLUT;
	bool BloomPyramidAttenuateEnable;
	bool DownsampleBeforeBlurEnable;
	bool HbaoGaussianBlurEnable;
	bool HbaoGaussianBlurHalfResEnable;
	bool BloomPyramidEnable;
	bool UserBrightnessLUTEnable;
	bool Ps3EdgeMlaaEnable;
	bool Ps3EdgeMlaaCopyOnly;
	bool Ps3EdgeMlaaShowEdges;
	bool Ps3EdgeMlaaRelativeEdgeDetection;
	bool Ps3EdgeMlaaGpuBlockEnable;
	bool Ps3BackBufferAsLdrTargetEnable;
	bool DownsampleLogAverageEnable;
	bool BloomQuarterResEnable;
	bool BloomEnable;
	bool LensScopeFilterEnable;
}

class GravityData : ProcessorData {
	float Gravity;
}

class GrenadeEntityData : MeshProjectileEntityData {
	float CollisionSpeedMultiplier;
	float Gravity;
	GrenadeType GrenadeType;
	float MinBounceSpeed;
}

class GroundHeightEntityData : SpatialEntityData {
	GroundHeightData Data;
}

class GroupHavokAsset : HavokAsset {
	AssetAabbs[] Aabb;
	uint16[] ExternalAssetScaleIndex;
}

class GunMasterKillCounterEntityData : EntityData {
	GunMasterWeaponsPreset[] WeaponsPreset;
}

class GunnerSpottingTrackerData : HudTrackerData {
	UIHudIcon SpottedInfantryIcon;
	UIHudIcon SpottedVehicleIcon;
}

class GunSwayData : WeaponSwayData {
	GunSwayStandData Stand;
	GunSwayCrouchProneData Crouch;
	GunSwayCrouchProneData Prone;
	GunSwayStanceTransition ProneToCrouch;
	GunSwayStanceTransition ProneToStand;
	GunSwayStanceTransition CrouchToProne;
	GunSwayStanceTransition CrouchToStand;
	GunSwayStanceTransition StandToProne;
	GunSwayStanceTransition StandToCrouch;
	GunSwayStanceZoomModifierData SuppressionModifierUnzoomed;
	GunSwayStanceZoomModifierData SuppressionModifierZoomed;
	GunSwayModifierData[] Modifiers;
	float DeviationScaleFactorZoom;
	float GameplayDeviationScaleFactorZoom;
	float DeviationScaleFactorNoZoom;
	float GameplayDeviationScaleFactorNoZoom;
	float ShootingRecoilDecreaseScale;
	float FirstShotRecoilMultiplier;
	CameraRecoilData CameraRecoil;
}

class GunSwayModifierData : Asset {
	UnlockAssetBase UnlockAsset;
	GunSwayStanceZoomModifierData StandZoomModifier;
	GunSwayStanceZoomModifierData StandNoZoomModifier;
	GunSwayStanceZoomModifierData CrouchZoomModifier;
	GunSwayStanceZoomModifierData CrouchNoZoomModifier;
	GunSwayStanceZoomModifierData ProneZoomModifier;
	GunSwayStanceZoomModifierData ProneNoZoomModifier;
	bool OnlyInSupportedShooting;
	bool OnlyOnWeaponLightEnabled;
}

class HavokAsset : Asset {
	float Scale;
	DataContainer[] ExternalAssets;
}

class HdrSetting : DataContainer {
	float WindowMinTop;
	float WindowMinBottom;
	float WindowTopMinReleaseTime;
	float WindowTopMaxReleaseTime;
	float WindowTopAttackTime;
	float WindowBottomReleaseTime;
	AudioCurve WindowTopReleaseTimeCurve;
	float DischargeFactor;
	float MaxAllowedEnergy;
	float WindowBottomAttackTime;
	float WindowSize;
	float CompressFactor;
	float Headroom;
	float AllowedOvershoot;
}

class HealthComponentData : ComponentData {
	float Health;
	MaterialContainerPair MaterialPair;
}

class HealthStateData : DataContainer {
	GameObjectData[] Objects;
	NetworkableLoosePartPhysicsData[] LoosePartPhysics;
	ObjectBlueprint SpawnedBangerBlueprint;
	BangerSpawnImpulseParams SpawnedBangerImpulseParams;
	float Health;
	uint32 PartIndex;
	bool PhysicsEnabled;
	bool CopyDamageToBanger;
	bool CanSupportOtherParts;
}

class HeightfieldRasterData : RasterQuadtreeData {
}

class HeightfieldTreeAsset : RasterTreeAsset {
	float MinHeightWidth;
	int32 MinHeightSamplesPerSide;
}

class HighPassButterworthNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Order;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class HighPassFir64NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class HighPassIir2NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class HighShelfIir2NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class HitReactionComponentData : ComponentData {
	HitReactionComponentBinding HitReactionBinding;
	bool Enabled;
}

class HoldGroundOrderEntityData : BFOrderEntityData {
}

class HovercraftFloatPhysicsData : HullFloatPhysicsData {
	Vec3 LandResistanceAxisMod;
	Vec3 LandFrictionAxisMod;
	float FrontLength;
	float SideLength;
}

class HudCameraShakeData : UIComponentData {
	float WeaponDispersionMin;
	float WeaponDispersionMax;
	float WeaponDispersionOffsetScale;
	float JumpEffectDurationMin;
	float JumpEffectDurationMax;
	float JumpEffectMin;
	float JumpEffectMax;
	float LandEffectDurationMin;
	float LandEffectDurationMax;
	float LandEffectMin;
	float LandEffectMax;
	float CameraShakeMinAngle;
	float CameraShakeMaxAngle;
	float CameraShakeScale;
	float WeaponLagXScale;
	float WeaponLagYScale;
	uint32 FilterSize;
	float MaxDisplacement;
}

class HudCapturePointTrackerData : HudTrackerData {
}

class HudConfigAsset : Asset {
}

class HudEntityData : GameEntityData {
}

class HudProgressbarData : UIPartData {
	ProgressType ProgressType;
}

class HudTrackerData : UIPartData {
	float MaxDistance;
	float StartFadeDistance;
	float SecondFadeDistance;
	float FadeMinAlpha;
	float IconSize;
	float TrackerHudRadiusX;
	float TrackerHudRadiusY;
	float DistanceTextOffsetY;
	bool ShowDistance;
	bool DisplayExtraInfo;
}

class HudVehicleTrackerData : UIPartData {
	EdgePointerData EdgePointer;
	UIHudIcon EnemyTrackerIcon;
	UIHudIcon OutsideScreenTrackerIcon;
	VehicleTrackerRenderTargetData RenderTargetData;
	UIHudIcon MissileTrackerIcon;
	float IconSize;
	float RadarSensitivity;
	float HeatSensitivity;
	UIHudIcon FriendlyTrackerIcon;
	UIHudIcon LaserPaintedVehicleTrackerIcon;
	float MaxDistance;
	float DistanceIconShrinkFactor;
	UIHudIcon MissileLockTrackerIcon;
	bool TrackOnlyUsedVehicles;
	bool UseTrackerSignatures;
	bool EnableEdgePointers;
	bool TrackLaserPaintedObjects;
	bool UseCameraComponentTransform;
	bool ShowTracker;
}

class HullFloatPhysicsData : FloatPhysicsData {
	Vec3 WaterResistanceAxisMod;
	Vec3 WaterFrictionAxisMod;
	Vec3 Offset;
	int32 SubSurfaceSplits;
	float Depth;
	float Width;
	float Length;
	float FrontCurveDegree;
	float SideCurveDegree;
	float NonEngineSteer;
	float NonEngineSteerMinSpeed;
	float NonEngineSteerMaxSpeed;
	float WaterDampeningMod;
	float LiftModifier;
	float SupportSizeMod;
	float AngularDampening;
	float FrictionThrottleModifier;
}

class HumanPlayerEntityData : GameEntityData {
	float PlayerKilledDelay;
	string LastManStandingSid;
	float DisplayTime;
}

class IKComponentData : ComponentData {
	IKEffectorEnum IKEffector;
	HIKData IKData;
}

class ImpulseResponseAsset : SoundDataAsset {
}

class InAirStateData : CharacterStateData {
	float FreeFallVelocity;
}

class InputActionData : DataContainer {
	bool IsAnalog;
	bool NegateValue;
}

class InputActionMapData : DataContainer {
	InputActionsData[] Actions;
	InputActionMapPlatform PlatformSpecific;
	InputActionMapSlot Slot;
	string CopyKeyBindingsFrom;
}

class InputActionMappingData : DataContainer {
}

class InputActionMappingsData : DataContainer {
	InputActionMappingData[] Mappings;
}

class InputActionsData : DataContainer {
	string NameSid;
	InputConceptIdentifiers ConceptIdentifier;
	InputConceptIdentifiers CopyKeyBindingFrom;
	InputActionData[] InputActions;
	bool HideInKeyBindings;
}

class InputConfigurationAsset : Asset {
	EntryInputActionMapsData DefaultInputConceptDefinition;
	InputConceptIdentifiers[] DefaultExclusiveInputConcepts;
	EditableActionMap[] UserConfigurableActionMaps;
	EntryInputActionEnum TogglePoseAction;
	EntryInputActionEnum CrouchAction;
	EntryInputActionEnum CrouchAndHoldAction;
	EntryInputActionEnum PickupInteractionAction;
	PoseTransition[] FiringDisablingTransitions;
	float SprintReleaseTime;
	float ThrottleInputRequiredForSprint;
	bool StandAutomaticallyIfSprinting;
	bool ProneToStandOnJump;
	bool DisableCrawlingWhileReloading;
	bool DisableFiringWhileDeployingBipod;
	bool DisableFiringWhileJumping;
	bool DisableSprintingWhileReloading;
	bool EnableSprintToCrouchTransition;
	bool StopSprintingWhenReleasingThrottle;
	bool StopSprintingWhenReleasingSprint;
	bool WaitForSprintReleaseBeforeSprintAgain;
	bool VehicleBoostIsToggle;
	bool InputCurvesEnabled;
	bool DisableCrawlingWhileFiring;
}

class InputCurveData : DataContainer {
	EntryInputActionEnum[] AffectedInputs;
	Vec2[] InputModifierCurve;
	bool HandleMultipleInputsAsSquare;
}

class InputModifierEntityData : EntityData {
	EntryInputActionEnum Action;
	float Scale;
	float Offset;
	bool Enabled;
}

class InputRecorderData : DataContainer {
	string FileNamePrefix;
	string FileName;
	EntryInputActionEnum ToggleRecordAction;
	bool AutoIncrementFileName;
}

class InputRestrictionEntityData : GameEntityData {
	bool ApplyRestrictionsToSpecificPlayer;
	bool Throttle;
	bool Strafe;
	bool Brake;
	bool HandBrake;
	bool Clutch;
	bool Yaw;
	bool Pitch;
	bool Roll;
	bool Fire;
	bool FireCountermeasure;
	bool AltFire;
	bool CycleRadioChannel;
	bool SelectMeleeWeapon;
	bool Zoom;
	bool Jump;
	bool ChangeVehicle;
	bool ChangeEntry;
	bool ChangePose;
	bool ToggleParachute;
	bool ChangeWeapon;
	bool Reload;
	bool ToggleCamera;
	bool Sprint;
	bool ScoreboardMenu;
	bool MapZoom;
	bool GearUp;
	bool GearDown;
	bool ThreeDimensionalMap;
	bool GiveOrder;
	bool Prone;
	bool SwitchPrimaryInventory;
	bool SwitchPrimaryWeapon;
	bool GrenadeLauncher;
	bool StaticGadget;
	bool DynamicGadget1;
	bool DynamicGadget2;
	bool MeleeAttack;
	bool ThrowGrenade;
	bool SelectWeapon1;
	bool SelectWeapon2;
	bool SelectWeapon3;
	bool SelectWeapon4;
	bool SelectWeapon5;
	bool SelectWeapon6;
	bool SelectWeapon7;
	bool SelectWeapon8;
	bool SelectWeapon9;
	bool OverridePreviousInputRestriction;
}

class InspectEntityData : GameEntityData {
	Vec3 CenterOffset;
	string UIName;
	float MaxLookAtHeight;
	InspectViewPointData[] ViewPoints;
	TargetCameraData[] Cameras;
	float MinLookAtHeight;
	float MinDistance;
	float ZoomScrollSpeed;
	float MaxDistance;
	AntRef AnimationSignal;
	float ZoomScrollAcceleration;
}

class InstanceInputNode : UINodeData {
	UINodePort Out;
}

class InstanceNode : UINodeData {
	UIGraphAsset UIGraph;
	UINodePort[] Inputs;
	UINodePort[] Outputs;
}

class InstanceOutputNode : UINodeData {
	UINodePort In;
	int32 Id;
	bool DestroyGraph;
}

class IntegratorOrDifferentiatorEntityData : EntityData {
	Realm Realm;
	EntityUpdateOrder UpdatePass;
	float StartValue;
	float Input;
	float MaxValue;
	float MinValue;
	bool Bounded;
}

class IntEntityData : EntityData {
	Realm Realm;
	int32 DefaultValue;
	int32 IncDecValue;
}

class InteractableStaticModelEntityData : StaticModelEntityData {
}

class InteractionEntityData : GameEntityData {
	float UseWithinRadius;
	float UseWithinAngle;
	SoundAsset PreInteractionSoundEffect;
	uint32 MaxUses;
	bool AllowInteractionViaRemoteEntry;
	bool TestIfOccluded;
}

class InterfaceDescriptorData : DynamicDataContainer {
	DynamicEvent[] InputEvents;
	DynamicEvent[] OutputEvents;
	DynamicLink[] InputLinks;
	DynamicLink[] OutputLinks;
}

class InterludeOrderEntityData : BFOrderEntityData {
	bool IsCutscene;
	bool Crouch;
}

class IntHubEntityData : EntityData {
	Realm Realm;
	int32 InputCount;
	int32 InputSelect;
}

class IntPropertyTrackData : SimplePropertyTrackData {
	int32[] Values;
}

class IntRecordingData : PropertyRecordingData {
	int32[] Values;
}

class IntUnlockValuePair : UnlockValuePair {
	int32 DefaultValue;
	int32 UnlockedValue;
}

class IrReverbControllerNodeData : AudioGraphNodeData {
	AudioGraphNodePort Reverb0;
	AudioGraphNodePort Amplitude0;
	AudioGraphNodePort Reverb1;
	AudioGraphNodePort Amplitude1;
}

class IrReverbEntityData : EntityData {
	ImpulseResponseAsset ImpulseResponse;
	float Gain;
	float Volume;
	FadeCurveType FadeCurve;
}

class IrReverbNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Out;
	AudioGraphNodePort Reverb0;
	AudioGraphNodePort Amplitude0;
	AudioGraphNodePort Reverb1;
	AudioGraphNodePort Amplitude1;
	float MaxReverbLength;
	SoundGraphPluginRef ReverbPlugin;
}

class JammingComponentData : ComponentData {
	SmokeJammingData SmokeJamming;
	AirMissileJammingData AirMissileJamming;
}

class JetEngineConfigData : EngineConfigData {
	Vec2 PowerFadeOutRange;
	float ForceMagnitudeMultiplier;
	float AngleInputYMultiplier;
	float AngleInputPitchMultiplier;
	float MaxVelocity;
	uint32 DirectionVectorIndex;
	bool IsWaterJetEngine;
	bool IsTurnable;
}

class JoypadNodeData : AudioGraphNodeData {
	AudioGraphNodePort LeftAnalogX;
	AudioGraphNodePort LeftAnalogY;
	AudioGraphNodePort RightAnalogX;
	AudioGraphNodePort RightAnalogY;
	AudioGraphNodePort AButton;
	AudioGraphNodePort BButton;
}

class JumpNode : UINodeData {
	UINodePort In;
	UINodeData TargetNode;
	UINodePort TargetPort;
}

class JumpStateData : CharacterStateData {
	float JumpHeight;
	float JumpEffectSize;
}

class KeyboardInputActionData : InputActionData {
	InputDeviceKeys Key;
}

class KillAllEntityData : GameEntityData {
	bool KillAllHumanSoldiers;
}

class KillCounterEntityData : GameEntityData {
	KillWeight TeamKillWeight;
	TeamId TeamId;
	KillWeight NeutralTeamWeight;
	float EnemyWeight;
	uint32 MaxKillCount;
	bool IgnoreAI;
}

class KillEvent : MetricEvent {
	Vec3 Position;
	Vec3 VictimPosition;
	uint64 VictimId;
	float Time;
	string Weapon;
}

class KillFromVehicleScoringHandlerData : ScoringHandlerData {
}

class KitPickupEntityData : PickupEntityData {
	bool KeepAdditionalWeapons;
	bool KeepAmmoState;
}

class KitState : MetricState {
	string Kit;
}

class KitStateEvent : MetricEvent {
	string Kit;
	float SecondsAsKit;
}

class KyotoPlayerAliveFilterEntityData : EntityData {
}

class LadderComponentData : ComponentData {
}

class LadderEntityData : StaticModelEntityData {
}

class LakeData : VisualVectorShapeData {
}

class LandingFlapData : DataContainer {
	float ActivationHeight;
	float HeightTolerance;
	float ActivationVelocity;
	float VelocityTolerance;
}

class LandingGearLogicData : DataContainer {
	LandingGearConditionData RetractCondition;
	LandingGearConditionData DeployCondition;
}

class LanPresenceBackendData : PresenceBackendData {
}

class LanServerBackendData : ServerBackendData {
}

class LaserDesignatorData : LockingWeaponData {
	float PostLockTime;
	float BomberTime;
	float BombWarnTime;
	SoundAsset BomberSound;
}

class LaserPainterData : LockingWeaponData {
	float TimeObjectIsPainted;
}

class LensFlareComponentData : ComponentData {
	LensFlareEntityData LensFlare;
}

class LensFlareEntityData : SpatialEntityData {
	LensFlareElement[] Elements;
	float OccluderSize;
	bool Visible;
	bool HalfRes;
	bool DebugDrawOccluder;
}

class LensScopeComponentData : ComponentData {
	Vec3 ChromaticAberrationColor1;
	Vec2 RadialBlendDistanceCoefficients;
	Vec3 ChromaticAberrationColor2;
	Vec2 BlurCenter;
	Vec2 ChromaticAberrationDisplacement2;
	Vec2 ChromaticAberrationDisplacement1;
	Vec2 ChromaticAberrationStrengths;
	float BlurScale;
	Realm Realm;
	bool Enable;
}

class LevelAudioObstructionAsset : Asset {
	AudioObstructionMaterialInfo[] MaterialMap;
	float FrequencySlewRate;
	float GainSlewRate;
	float MaxRaycastDistanceSquared;
}

class LevelControlEntityData : GameEntityData {
	string LevelToLoad;
	bool RollCredits;
}

class LevelData : WorldData {
	ReferenceObjectData LevelReference;
	PathfindingBlob PathfindingBlobInfo;
	GameAISystem AISystem;
	float WorldSizeXZ;
	LevelDescription LevelDescription;
	string GameConfigurationName;
	EmitterSystemAsset EmitterSystemAsset;
	EmitterExclusionVolumeData[] EmitterExclusionVolumes;
	float DefaultFOV;
	float InfantryFOVMultiplier;
	uint32 MaxEntityBusNetworkCount;
	SoundStateSettingsAsset SoundStates;
	VoiceOverSystemAsset VoiceOverSystem;
	VoiceOverLogicAsset[] VoiceOverLogic;
	float MaxVehicleHeight;
	AnimatedSkeletonDatabase AnimatedSkeletonDatabase;
	EnlightenShaderDatabaseAsset EnlightenShaderDatabase;
	AntProjectAsset[] AntProjectAssets;
	string AerialHeightmapData;
	LevelAudioObstructionAsset AudioObstructionInfo;
	CameraTransition[] CameraTransitions;
	CameraModeAsset[] CameraModes;
	FaceAnimationWaveMappings FaceAnimationsWaveMappings;
	Asset HackForceBuild;
	bool HugeBroadPhase;
	bool FreeStreamingEnable;
}

class LevelDescriptionAsset : Asset {
	string LevelName;
	LevelDescriptionInclusionCategory[] Categories;
	LevelDescription Description;
	string[] StartPoints;
}

class LevelDescriptionComponent : DataContainer {
}

class LevelReportingAsset : Asset {
	LevelDescriptionAsset[] BuiltLevels;
}

class LevelSaveData : DataContainer {
	uint32 SaveSize;
	string[] SaveNames;
}

class LfoNodeData : AudioGraphNodeData {
	AudioGraphNodePort Hz;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Out;
	float Min;
	float Max;
	bool StartAtRandomValue;
}

class LicenseConfiguration : Asset {
	LicenseInfo[] Licenses;
}

class LifeCounterEntityData : GameEntityData {
	int32 StartingLifeCount;
	float DisplayTime;
	TeamId TeamId;
	int32[] LifeTresholdValues;
	int32 UiShowCountLowerThreshold;
	int32 UiShowCountUpperThreshold;
	int32 BaseCount;
	float[] ReinforceTable;
	int32 ReinforceThreshold;
	string ReinforceMessageSid;
	float FightHarderTreshold;
	float DefensiveKillRadius;
	float FallbackTime;
	string FightHarderMessageSid;
	bool Attacker;
	bool SetBestSquadSpawner;
	bool SimpleReinforce;
}

class LightComponentData : ComponentData {
	LocalLightEntityData Light;
}

class LightProbeVolumeData : SpatialEntityData {
	uint32 Xres;
	uint32 Yres;
	uint32 Zres;
	float BlendDistance;
	int32 Priority;
}

class LimiterNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Threshold;
	AudioGraphNodePort ReleaseTime;
	AudioGraphNodePort Out;
	LimiterChannelMode ChannelMode;
	SoundGraphPluginRef Plugin;
}

class LinearMovingBodyData : MovingBodyData {
	Vec3 Axis;
	EndPointData Start;
	EndPointData End;
}

class LinearTransformNodeData : AudioGraphNodeData {
	AudioGraphNodePort X;
	AudioGraphNodePort K;
	AudioGraphNodePort M;
	AudioGraphNodePort Y;
}

class LinearTransformRecordingData : PropertyRecordingData {
	LinearTransform[] Values;
}

class LocalForceData : ProcessorData {
	Vec3 LocalForce;
}

class LocalizationAsset : Asset {
	UITextDatabase[] LocalizedTexts;
}

class LocalLightEntityData : SpatialEntityData {
	Vec3 Color;
	Vec3 ParticleColorScale;
	Vec3 EnlightenColorScale;
	float Radius;
	float Intensity;
	float AttenuationOffset;
	EnlightenColorMode EnlightenColorMode;
	bool EnlightenEnable;
	bool Visible;
	bool SpecularEnable;
}

class LocalServerBackendData : ServerBackendData {
}

class LocatorComponentData : ComponentData {
	Realm Realm;
}

class LocatorEntityData : SpatialEntityData {
	Realm Realm;
}

class LockingControllerData : DataContainer {
	ZoomLevelLockData[] ZoomLevelLock;
	float LockTime;
	float ReleaseTime;
	float ReleaseOnNewTargetTime;
	float SampleRate;
	float HoldStillThreshold;
	float RayLength;
	float AcceptanceAngle;
	float MinimumLockTime;
	float Sensitivity;
	float AngleConstant;
	float DistanceConstant;
	bool LockOnWorldSpacePos;
	bool LockOnVisibleTargetsOnly;
	bool PositionOnly;
	bool LockOnEmptyVehicles;
	bool IgnoreHeigthLockDistance;
}

class LockingScoringHandlerData : ScoringHandlerData {
	float HotVehicleTimeout;
}

class LockingWeaponData : WeaponData {
	LockingControllerData LockingController;
	LockingControllerData SecondaryLockingController;
	WarnTarget WarnLock;
	bool IsHoming;
	bool IsGuidedWhenZoomed;
	bool FireOnlyWhenLockedOn;
	bool IsGuided;
}

class LoggingEntityData : EntityData {
	Vec2 Vec2Value;
	Vec3 Vec3Value;
	LinearTransform TransformValue;
	Realm Realm;
	float FloatValue;
	string[] Strings;
	int32 IntValue;
	bool BoolValue;
}

class LogicalExpressionEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Trigger;
}

class LogicalExpressionNodeData : AudioGraphNodeData {
	LogicalExpressionEntry[] Inputs;
	AudioGraphNodePort Trigger;
	LogicalExpressionOperator Operator;
}

class LogicPrefabBlueprint : PrefabBlueprint {
}

class LogicReferenceObjectData : ReferenceObjectData {
	SubRealm SubRealm;
}

class LogicVisualEnvironmentEntityData : EntityData {
	VisualEnvironmentBlueprint VisualEnvironment;
	float Visibility;
}

class LookAtCameraEntityData : CameraEntityData {
}

class LookAtEntityData : SpatialEntityData {
	bool RunOnce;
	bool UseStaticDirection;
	bool Enabled;
}

class LookAtTriggerEntityData : TriggerEventEntityData {
	float FOV;
	SoldierWeaponBlueprint Weapon;
	uint32 ZoomLevel;
	float MinDistanceToObject;
	float MaxDistanceToObject;
	bool StartTriggerLookingAt;
	bool CheckOcclusion;
}

class LoosePartPhysicsData : DataContainer {
	FakePhysicsData FakePhysics;
}

class LowPassButterworthNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Order;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class LowPassFir64NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class LowPassIir2NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class LowShelfIir2NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class ManualDataAsset : Asset {
	ManualDataEntry[] Entries;
}

class MapMarkerEntityData : GameEntityData {
	Vec3 BaseTransform;
	float ProgressMinTime;
	string Sid;
	int32 NrOfPassengers;
	int32 NrOfEntries;
	float ProgressTime1Player;
	float ShowRadius;
	float HideRadius;
	float BlinkTime;
	MapMarkerType MarkerType;
	TeamId VisibleForTeam;
	TeamId OwnerTeam;
	UIHudIcon HudIcon;
	float VerticalOffset;
	float FocusPointRadius;
	float InstantFlagReturnRadius;
	float Progress;
	float ProgressPlayerSpeedUpPercentage;
	uint32 TrackedPlayersInRange;
	float TrackingPlayerRange;
	float ProgressTime;
	bool OnlyShowSnapped;
	bool FlagControlMarker;
	bool ShowProgress;
	bool UseMarkerTransform;
	bool IsVisible;
	bool Snap;
	bool ShowAirTargetBox;
	bool IsFocusPoint;
}

class MaskVolumeEntityData : RenderVolumeEntityData {
}

class MasterSkeletonAsset : Asset {
	SkeletonAsset MasterSkeleton;
	SubSkeleton[] SubSkeletons;
}

class MasterUnitNodeData : AudioGraphNodeData {
	AudioGraphNodePort SettingsIndex;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort MasterGain;
	AudioGraphNodePort MasterLfeGain;
	AudioGraphNodePort MasterDialogGain;
	AudioGraphNodePort MainMixGain;
	AudioGraphNodePort PostEffectsGain;
	AudioGraphNodePort ReverbGain;
	AudioGraphNodePort FadeTime;
	AudioGraphNodePort HighPassFreq;
	AudioGraphNodePort LowShelfFreq;
	AudioGraphNodePort LowShelfGain;
	AudioGraphNodePort HighShelfFreq;
	AudioGraphNodePort HighShelfGain;
	AudioGraphNodePort CompThreshold;
	AudioGraphNodePort CompRatio;
	AudioGraphNodePort CompAttack;
	AudioGraphNodePort CompRelease;
	AudioGraphNodePort DistClipLevel;
	AudioGraphNodePort ParallelDistortionGain;
	MasterUnitSettings[] Settings;
}

class MasterUnitSettings : DataContainer {
	string Name;
	EqualizerSettings Equalizer;
	CompressorSettings Compressor;
	float MasterVolume;
	float MasterLfeGain;
	float MasterDialogGain;
	float ReverbVolume;
	float MainMixVolume;
	float DistortionClipLevel;
	float ParallelDistortionGain;
	float PostEffectsGain;
	float FadeTime;
}

class MatchmakingModifier : DataContainer {
}

class MatchmakingPlayerCapacityModifier : MatchmakingModifier {
	string Attribute;
}

class MatchmakingSession : DataContainer {
	MatchmakingSessionMode Mode;
	uint32 DurationMs;
	MatchmakingCriteria Criteria;
	MatchmakingCreateGameParameters CreateGameParams;
	MatchmakingSession OnNotFound;
	MatchmakingModifier[] Modifiers;
}

class MaterialContainerAsset : Asset {
	MaterialContainerPair[] MaterialPairs;
	string[] MaterialNames;
}

class MaterialContainerPair : DataContainer {
	uint32 FlagsAndIndex;
	int8 PhysicsPropertyIndex;
	int8 PhysicsMaterialIndex;
}

class MaterialGridData : Asset {
	MaterialContainerPair DefaultMaterial;
	MaterialContainerPair[] MaterialPairs;
	uint32[] MaterialIndexMap;
	uint32 DefaultMaterialIndex;
	MaterialRelationPropertyPair[] MaterialProperties;
	MaterialInteractionGridRow[] InteractionGrid;
}

class MaterialPropertyEffectData : PhysicsMaterialRelationPropertyData {
	EffectBlueprint[] ImpactEffects;
}

class MaterialPropertyHealthData : PhysicsPropertyRelationPropertyData {
	float Health;
}

class MaterialPropertyImpulseData : PhysicsPropertyRelationPropertyData {
	float ImpulseAbsorptionMultiplier;
}

class MaterialPropertyPhysicsData : PhysicsMaterialRelationPropertyData {
	float DynamicFrictionModifier;
	float StaticFrictionModifier;
	float RestitutionModifier;
	float Resistance;
}

class MaterialPropertySoundData : PhysicsMaterialRelationPropertyData {
	SoundAsset ImpactSound;
	SoundAsset ScrapeSound;
	float ScrapeLength;
	MaterialSoldierSoundSettings SoldierSettings;
	float Softness;
	float MaterialSoundId;
}

class MaterialPropertyTerrainData : PhysicsMaterialRelationPropertyData {
	Vec3 DirtTriggerColor;
	EffectBlueprint DestructionEffect;
	float DirtTriggerFactor;
}

class MaterialRelationDamageData : PhysicsPropertyRelationPropertyData {
	float CollisionDamageMultiplier;
	float CollisionDamageThreshold;
	float DamageProtectionMultiplier;
	float DamagePenetrationMultiplier;
	float DamageProtectionThreshold;
	float ExplosionCoverDamageModifier;
	bool InflictsDemolitionDamage;
}

class MaterialRelationDecalData : PhysicsMaterialRelationPropertyData {
	DecalTemplateData Decal;
}

class MaterialRelationEffectData : PhysicsMaterialRelationPropertyData {
	EffectBlueprint[] ImpactEffects;
	ObjectBlueprint[] ImpactDebris;
	float ImpactEffectMaxSpreadAngle;
	bool MirrorImpactDirection;
}

class MaterialRelationPenetrationData : PhysicsPropertyRelationPropertyData {
	bool NeverPenetrate;
}

class MaterialRelationPropertyData : DataContainer {
}

class MaterialRelationSoundData : PhysicsMaterialRelationPropertyData {
	SoundAsset ImpactSound;
	SoundAsset ScrapeSound;
	float ScrapeLength;
}

class MaterialRelationTerrainDestructionData : PhysicsPropertyRelationPropertyData {
	float Width;
	float Depth;
}

class MaterialRelationVehicleData : PhysicsMaterialRelationPropertyData {
	EffectBlueprint ChassiEffect;
	EffectBlueprint TrackEffect;
	EffectBlueprint WheelEffect;
	EffectBlueprint GroundEffect;
}

class MaterialSoldierSoundSettings : DataContainer {
	SoundAsset FootStepSound;
	SoundAsset ProneSound;
	SoundAsset LandSound;
}

class MathOpEntityData : EntityData {
	Realm Realm;
	MathOp[] Operators;
}

class MatrixPannerNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort FrontLeft;
	AudioGraphNodePort Center;
	AudioGraphNodePort FrontRight;
	AudioGraphNodePort RearLeft;
	AudioGraphNodePort Lfe;
	AudioGraphNodePort RearRight;
	AudioGraphNodePort FarRearLeft;
	AudioGraphNodePort FarRearRight;
	AudioGraphNodePort Out;
}

class MaxInstancesScopeStrategyData : SoundScopeStrategyData {
	uint32 Count;
	bool KeepOldest;
}

class MedicBagEntityData : ExplosionPackEntityData {
	HealerData Healer;
}

class MedicBagHealingSphereEntityData : ExplosionPackEntityData {
	HealingSphereData Healer;
}

class MedicBagHealingSphereWeaponData : WeaponData {
	HealingSphereData Healer;
	float HealthPointsRefillSpeed;
	float HealthPointsPerBag;
}

class MedicBagWeaponData : WeaponData {
	HealerData Healer;
	float HealthPointsRefillSpeed;
	float HealthPointsPerBag;
}

class MedkitWeaponData : WeaponData {
}

class MeleeEntityCommonData : Asset {
	CharacterMeleeBinding MeleeBinding;
	CharacterMeleeCommonBinding MeleeCommonBinding;
	float TriggerDelay;
	float DefendWindow;
	float KillDelay;
	float MeleeEndDelay;
	float InvalidMeleeAttackZone;
	float MeleeAttackDistance;
	float MaxAttackHeightDifference;
	float KillDamage;
	AntEnumeration ProneAttackType;
	AntEnumeration CrouchAttackType;
	bool EnableAbortPossibility;
}

class MeleeEntityData : EntityData {
	MeleeEntityCommonData CommonData;
}

class MeleeTriggerEntityData : EntityData {
	LinearTransform ConnectTransform;
	AntEnumeration MeleeType;
	bool MeleeEnabled;
}

class MeleeWeaponData : WeaponData {
	bool UseCannedAnimation;
	bool UseSphereDamage;
}

class MemoryLevelDescriptionComponent : LevelDescriptionComponent {
	int32 TexturePoolSize;
	int32 TexturePoolSizeXenon;
	int32 TexturePoolSizePs3;
	int32 MeshPoolSizePs3;
	int32 MeshPoolSizePs3Cell;
	int32 MeshPoolSizeXenon;
}

class MenuConfigAsset : Asset {
}

class MenuIdAsset : Asset {
	string ShortName;
}

class MeshAsset : Asset {
	MeshLodGroup LodGroup;
	float LodScale;
	float CullScale;
	uint32 NameHash;
	EnlightenType EnlightenType;
	MeshMaterial[] Materials;
	bool OccluderHighPriority;
	bool StreamingEnable;
	bool DestructionMaterialEnable;
	bool OccluderMeshEnable;
}

class MeshComponentData : ComponentData {
	BoneFakePhysicsData[] BoneFakePhysics;
	MeshAsset Mesh;
	SkeletonAsset Skeleton;
}

class MeshLodGroup : Asset {
	float Lod1Distance;
	float Lod2Distance;
	float Lod3Distance;
	float Lod4Distance;
	float Lod5Distance;
	float ShadowDistance;
	float CullScreenArea;
}

class MeshMaterial : DataContainer {
	SurfaceShaderInstanceData ShaderInstance;
	SurfaceShaderInstanceDataStruct Shader;
}

class MeshMaterialVariation : DataContainer {
	SurfaceShaderInstanceDataStruct Shader;
}

class MeshMergingSettings : DataContainer {
	int32 StatsSeedIndex;
	int32 StatsLodIndex;
	uint32 TextureAtlasWidth;
	bool DrawStatsEnable;
	bool DrawDebugTexturesEnable;
	bool VirtualTextureArrayStreamingEnable;
	bool Enable;
	bool TextureAtlasMergeEnable;
	bool ClearMergeReport;
}

class MeshProjectileEntityData : ProjectileEntityData {
	Vec3 InitialAngularVelocity;
	EffectBlueprint TrailEffect;
	MeshAsset Mesh;
	float MaxAttachableInclination;
	bool ExtraDamping;
	bool IsAttachable;
}

class MeshProxyEntityData : SpatialEntityData {
	MeshAsset Mesh;
	LinearTransform[] BasePoseTransforms;
}

class MeshSettings : DataContainer {
	string OverrideShadersShaderName;
	string OverrideShadersMeshName;
	int32 ForceLod;
	float GlobalLodScale;
	float ShadowDistanceScale;
	bool LoadingEnabled;
}

class MeshStreamingSettings : DataContainer {
	uint32 DefragTransferLimit;
	uint32 ListViewPageIndex;
	uint32 PoolSize;
	int32 ForceLod;
	uint32 PoolHeadroomSize;
	uint32 ListViewSortOrder;
	uint32 Ps3CellDefragTransferLimit;
	uint32 XenonFinalPoolSizeAdjustment;
	uint32 MaxUnloadCountPerFrame;
	uint32 XenonRetailPoolSizeAdjustment;
	uint32 MaxPendingLoadCount;
	uint32 Ps3CellPoolSize;
	uint32 Ps3CellPoolHeadroomSize;
	bool InstantUnloadingEnable;
	bool AsyncCreatesEnable;
	bool DxImmutableUsageEnable;
	bool OverridePoolSizes;
	bool UseSlowTexturePrio;
	bool UpdateEnable;
	bool DynamicLoadingEnable;
	bool PriorityJobEnable;
	bool PrioritySpuJobEnable;
	bool UpdateJobEnable;
	bool DefragTransfersEnable;
	bool PrioritizeVisibleMeshesFirstEnable;
	bool PrioritizeVisibleLodsFirstEnable;
	bool PrioritizeVisibleLoadsEnable;
	bool PrioritizeTexturesEnable;
	bool HighestPriorityEnable;
	bool PrioritizeNearestPointEnable;
	bool DrawInstanceBoxesEnable;
	bool DrawStatsEnable;
	bool DrawMissingListEnable;
	bool DrawPriorityListEnable;
	bool DrawLoadingListEnable;
	bool DrawMeshListEnable;
	bool DrawNonStreamedListEnable;
	bool DefragEnable;
	bool Enable;
	bool DumpLoadedList;
	bool UseConditionalStreaming;
}

class MeshVariationDatabase : Asset {
	MeshVariationDatabaseEntry[] Entries;
	MeshVariationDatabaseEntry[] RedirectEntries;
}

class MeshVariationDatabaseEntry : DataContainer {
	MeshAsset Mesh;
	uint32 VariationAssetNameHash;
	MeshVariationDatabaseMaterial[] Materials;
}

class MessageEntityData : EntityData {
	string MessageSid;
	MessageLineData[] AdditionalMessages;
	UIMessageEntityType MessageType;
	float DisplayTime;
	EntryInputActionEnum EntryInputAction;
	bool Enabled;
}

class MetricAggregate : MetricEvent {
}

class MetricEvent : DataContainer {
	uint64 Owner;
}

class MetricReport : DataContainer {
	MetricEvent[] Events;
}

class MetricState : MetricEvent {
	bool IsSet;
}

class Minimap2DEntityData : GameEntityData {
	Vec3 CameraTransform;
	uint32 ImageHeight;
	uint32 ImageWidth;
	uint32 AntialiasMultiplier;
	uint32 TerrainHeight;
	uint32 Fov;
}

class MinMaxNodeData : AudioGraphNodeData {
	AudioGraphNodePort X;
	AudioGraphNodePort Y;
	AudioGraphNodePort Max;
	AudioGraphNodePort Min;
}

class MinMaxValueSelectorEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Input;
}

class MinMaxValueSelectorNodeData : AudioGraphNodeData {
	MinMaxValueSelectorEntry[] Inputs;
	AudioGraphNodePort MaxValue;
	AudioGraphNodePort MaxIndex;
	AudioGraphNodePort MinValue;
	AudioGraphNodePort MinIndex;
}

class MissileEntityData : MeshProjectileEntityData {
	float Gravity;
	EffectBlueprint EngineEffect;
	ExplosionEntityData DudExplosion;
	SoundAsset FlyBySound;
	float EngineStrength;
	float MaxSpeed;
	float EngineTimeToIgnition;
	float EngineTimeToLive;
	float TimeToActivateGuidingSystem;
	float TimeToArm;
	float MaxTurnAngle;
	float Drag;
	NearTargetDetonationData NearTargetDetonation;
	TeamId DefaultTeam;
	float FlyBySoundRadius;
	float FlyBySoundSpeed;
	float ImpactImpulse;
	float Damage;
	MissileUnguidedData UnguidedData;
	WarnTarget WarnTarget;
	MissileLockableInfoData LockableInfo;
	LockingControllerData LockingController;
	bool WarnOnPointingMissile;
	bool ApplyGravityWhenGuided;
}

class MissionObjectiveHudData : DataContainer {
	Vec3 CameraPosition;
	Vec2 HorizontalBoundaries;
	Vec2 VerticalBoundaries;
	float CameraRotation;
	float CameraFov;
	float CameraLookDistance;
	float CameraDistance;
}

class MixerAsset : Asset {
	MixerGraphData Graph;
	MixerPreset[] Presets;
	MixerPreset DefaultPreset;
}

class MixerEntityData : EntityData {
	MixerAsset Mixer;
	bool ActivateOnCreation;
}

class MixerEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort In;
	AudioGraphNodePort Amplitude;
	SoundGraphPluginRef Plugin;
}

class MixerGraphData : AudioGraphData {
	AudioGraphParameter[] Inputs;
	MixerValueAccumulateMode[] AccumulateModes;
	AudioGraphParameter[] Outputs;
}

class MixerInputEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Out;
	AudioGraphParameter Source;
	MixerValueAccumulateMode AccumulateMode;
}

class MixerInputNodeData : AudioGraphNodeData {
	MixerInputEntry[] Entries;
}

class MixerNodeData : AudioGraphNodeData {
	MixerEntry[] Entries;
	AudioGraphNodePort Out;
}

class MixerOutputEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort In;
	AudioGraphParameter Target;
}

class MixerOutputNodeData : AudioGraphNodeData {
	MixerOutputEntry[] Entries;
}

class MixerPreset : DataContainer {
	uint32 NameHash;
	MixerPresetGroupData[] Groups;
	MixerPresetNodeData[] Nodes;
}

class MixerReceiveEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Out;
	AudioGraphParameter Source;
	MixerAsset Mixer;
}

class MixerReceiveNodeData : AudioGraphNodeData {
	MixerReceiveEntry[] Entries;
}

class MixerSendEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort In;
	AudioGraphParameter Target;
	MixerAsset Mixer;
}

class MixerSendNodeData : AudioGraphNodeData {
	MixerSendEntry[] Entries;
}

class MixerSetPropertyEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort In;
	uint32 Target;
	MixGroup Group;
	float AttackTime;
	float ReleaseTime;
}

class MixerSetPropertyNodeData : AudioGraphNodeData {
	MixerSetPropertyEntry[] Entries;
}

class MixerSimplePresetNodeData : AudioGraphNodeData {
	AudioGraphNodePort Index;
	MixerPreset[] Presets;
}

class MixerSystemAsset : Asset {
	MixGroup[] Groups;
}

class MixerValueNodeData : AudioGraphNodeData {
	AudioGraphNodePort Out;
	float DefaultValue;
}

class MixGroup : DataContainer {
	string Name;
	uint16 GroupIndex;
	uint16 ParentGroupIndex;
}

class MobileSpawnComponentData : ComponentData {
	float ParachuteSpawnRadiusMin;
	float ParachuteSpawnDistance;
	string NameSid;
	float ParachuteSpawnRadiusMax;
	bool EnterMobileSpawnPoint;
}

class MobilityData : DataContainer {
	float MaxSpeed;
	bool Use3DWaypoints;
}

class ModelAnimationEntityData : EntityData {
	LinearTransform AnimationEntitySpace;
	GameplayBones BoneToPlace;
	Realm Realm;
	ModelAnimationTransformType ModelAnimationTransformType;
	int32 InstanceSeed;
	string DefaultAnimation;
	int32 AnimationIndex;
	AntAnimationSetAsset AnimationSet;
	float ExternalTime;
	string RootMeshBoneName;
	ModelAnimationUpdateOrder JointWorldTransformUpdateOrder;
	string ConnectBoneName;
	int32[] JointOutputPropertyIds;
	string TrajectoryBoneName;
	bool AnimationEntitySpaceActive;
	bool PlayFirstFrame;
	bool Looping;
	bool EnableJointWorldTransformOutput;
	bool ResetAfterStop;
	bool AutoStart;
	bool ShowDebugTransforms;
	bool ApplyRotationCompensation;
	bool ApplyPreTransformation;
	bool DisableCulling;
}

class MortarStrikeWeaponData : WeaponData {
	float HoldingTolerance;
	float MaxStrikeDistance;
	float StrikeRadius;
	float MaxRandomSpawnHeight;
}

class MotionBlurComponentData : ComponentData {
	Realm Realm;
	float CutoffGradientScale;
	float MotionBlurCutoffRadius;
	bool MotionBlurEnable;
}

class MotionControllerInputActionData : AxesInputActionData {
	InputDeviceMotionControllerButtons Button;
}

class MotionDampingData : DataContainer {
	Vec3 LinearModifier;
	float Pitch;
	float Yaw;
	float Roll;
	float Linear;
}

class MotorbikeData : DataContainer {
	Vec3 WheelieForceBodyOffset;
	Vec3 WheelieForce;
	Vec3 DampBigJumpImpactCounterForce;
	Vec3 ProximityExtScale;
	float JumpForwardLeanMinAngle;
	float JumpForwardLeanMomentum;
	float KickstandRoll;
	float KickstandLinearDamping;
	float LeanForceMaxVel;
	float CounterLeanForce;
	float StandStillRoll;
	float DampBigJumpImpactVelocity;
	float YawBrakeDampingLerpStartScale;
	float YawBrakeDampingLerpEndScale;
	float StoppieActivationVelocity;
	float StoppieStartVelocity;
	float LeanForce;
	float StoppieMomentum;
	float ShortOffgroundGravityMultiplier;
	float MaxLeaningRoll;
	float StoppieStopVelocity;
	float ProximityHeightTranslation;
	float WheelieMaxNoDownForceContactTime;
	float WheelieMaxNoContactTime;
	float WheelieSteeringFactor;
	float WheelieInertia;
	float WheelieStartVelocity;
	float WheelieMaxVelocityUndamped;
	float WheelieMaxVelocityDampRange;
	float WheelieOutAngularMomentum;
	float WheelieSpringDamping;
	float WheelieAngularDamping;
	float WheelieAngularDampingSpeed;
	float ShortOffgroundPeriod;
	float WheelieMaxAngle;
	float WheelieAngularStartMomentum;
	float WheelieMaxVelocity;
	float WheelieVelocityForceScale;
	bool DampBigJumpImpact;
}

class MouseInputActionData : AxesInputActionData {
	InputDeviceMouseButtons Button;
	bool SimulateJoystickAxis;
	bool RememberExcessInput;
	bool ScaleScrollWheelAxisInput;
}

class MovementActionData : DataContainer {
}

class MovementActionGroupData : MovementActionData {
	MovementActionData[] Actions;
	bool RunSimultaneously;
	bool RestartChildren;
}

class MovementActionRandomizerData : MovementActionData {
	MovementActionData[] Actions;
	bool ReinsertIntoRandomizedListAfterUse;
}

class MovementActionRoot : Asset {
	MovementActionData StartSequence;
}

class MovementComponentData : ComponentData {
	MovementComponentBinding MovementBinding;
}

class MovementConstantData : Asset {
	float MaxCrouchWalkDistance;
}

class MovieComponentData : ComponentData {
	MovieTextureAsset Movie;
	float ExternalTime;
	bool IsNormalMap;
}

class MovieEntityData : GameEntityData {
	MovieTextureAsset Movie;
	float ExternalTime;
	bool IsNormalMap;
}

class MovieTextureAsset : Asset {
	guid ChunkGuid;
	uint32 ChunkSize;
	guid SubtitleChunkGuid;
	uint32 SubtitleChunkSize;
	bool HasLocalizedAudioTracks;
	bool OverrideBackgroundMusic;
}

class MovieTextureSettings : DataContainer {
	bool Enable;
}

class MovingBodyData : DataContainer {
	float Mass;
	float Inertia;
}

class MultiCrossfaderGroup : AudioGraphNodePortGroup {
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Start;
	AudioGraphNodePort Stop;
	float FadeAmplitude;
	float FadeBegin;
	float FadeEnd;
	FaderType FadeType;
}

class MultiCrossfaderNodeData : AudioGraphNodeData {
	MultiCrossfaderGroup[] CrossfaderGroups;
	AudioGraphNodePort Start;
	AudioGraphNodePort Stop;
	AudioGraphNodePort Control;
	bool LockControlValue;
}

class MultipleActorScenarioEntityData : SpatialEntityData {
	LinearTransform WorldSpaceConnectTransform;
	int32 Actor5Part;
	AntRef ScenarioAntRef;
	int32 LevelChoice;
	int32 ScenarioChoice;
	Realm Realm;
	int32 Actor6Part;
	int32 Actor1;
	int32 Actor1Part;
	int32 Actor1SecondPart;
	int32 Actor2;
	int32 Actor2Part;
	int32 Actor2SecondPart;
	int32 Actor3;
	int32 Actor3Part;
	int32 Actor3SecondPart;
	int32 Actor4;
	int32 Actor4Part;
	int32 Actor4SecondPart;
	int32 Actor5;
	int32 Actor5SecondPart;
	int32 Actor6SecondPart;
	int32 Actor6;
	float ExternalTime;
	bool AligningEnabled;
	bool ScenarioActive;
	bool Actor1Prepared;
	bool Actor2Prepared;
	bool Actor3Prepared;
	bool Actor4Prepared;
	bool Actor5Prepared;
	bool Actor6Prepared;
	bool CheckActor1Finished;
	bool CheckActor2Finished;
	bool CheckActor3Finished;
	bool CheckActor4Finished;
	bool CheckActor5Finished;
	bool CheckActor6Finished;
	bool UseInputEventPlayerAsPlayer1;
	bool UseExternalTime;
	bool WorldSpace;
}

class MultipleTargetPainterWeaponData : WeaponData {
	SpottingType SpottingBehavior;
	float TimeObjectIsPainted;
	float Angle;
	float TimeObjectIsSpotted;
	float Range;
	bool UseSpotting;
	bool UseLaserPainting;
}

class MultipleTriggerEntityData : TriggerEventEntityData {
	int32 TriggerAmount;
}

class NetworkableLoosePartPhysicsData : LoosePartPhysicsData {
	bool Networked;
}

class NetworkPerformanceEvent : MetricEvent {
	uint32 Received;
	uint32 Sent;
	float ReceivedAverage;
	float SentAverage;
	guid PerformanceLink;
}

class NetworkSettings : DataContainer {
	uint32 ProtocolVersion;
	string TitleId;
	uint32 ClientPort;
	uint32 ServerPort;
	uint32 MaxGhostCount;
	uint32 MaxClientCount;
	uint32 MaxClientFrameSize;
	uint32 MaxServerFrameSize;
	string XlspAddress;
	string ServerAddress;
	string ClientConnectionDebugFilePrefix;
	string ServerConnectionDebugFilePrefix;
	float TimeNudgeGhostFrequencyFactor;
	float TimeNudgeBias;
	float ConnectTimeout;
	bool UseFrameManager;
	bool TimeSyncEnabled;
	bool IncrementServerPortOnFail;
}

class NFSUIListDataBinding : UIDataBinding {
	UIDataSourceInfo Refresh;
	UIListItem[] Items;
}

class NoiseTextureAsset : TextureBaseAsset {
}

class NotEntityData : EntityData {
	Realm Realm;
	bool In;
}

class NumberGeneratorNodeData : AudioGraphNodeData {
	AudioGraphNodePort Trigger;
	float Min;
	float Max;
	NumberGeneratorMode Mode;
	AudioGraphNodePort Y;
}

class OBBData : BaseShapeData {
	LinearTransform Transform;
	Vec3 HalfExtents;
}

class ObjectBlueprint : Blueprint {
	GameObjectData Object;
}

class ObjectEnterAreaTriggerEntityData : EntityData {
	Realm Realm;
	UpdatePass UpdatePass;
	bool AutoStart;
}

class ObjectiveEntityData : GameEntityData {
	string ObjectiveBriefSid;
	string ObjectiveSid;
	MissionObjectiveHudData HudData;
	ObjectiveType ObjectiveType;
	float DisplayTime;
	float DelayTime;
	SquadId SquadId;
	TeamId TeamId;
	string SuccessSid;
	MessageReciever Reciever;
	bool RetriggerSuccessOnShowObjective;
	bool Tutorial;
	bool DisplaySuccess;
}

class ObjectVariation : Asset {
	uint32 NameHash;
}

class ObjectVariationSwitchEntityData : EntityData {
	ObjectVariation Variation1;
	ObjectVariation Variation2;
}

class OccluderMeshEntityData : SpatialEntityData {
	RigidMeshAsset Mesh;
}

class OccluderVolumeEntityData : SpatialEntityData {
	bool OccluderHighPriority;
}

class OcclusionSettings : DataContainer {
	bool Enable;
	bool DrawZbuffer;
	bool DrawBinaryBuffer;
}

class OneOptionAxisEditableAction : EditableAction {
	string Header;
	bool Invert;
}

class OneOptionButtonEditableAction : EditableAction {
	string Header;
}

class OnGroundStateData : CharacterStateData {
	float JumpDelay;
	float JumpStaminaPenalty;
	float AllowedDistanceFromGround;
	bool GroundHugging;
	bool LimitDownwardVelocity;
}

class OnlineConfiguration : Asset {
	BackendType Backend;
	OnlineProviderAsset Provider;
	RichPresenceData RichPresence;
	ChatSettings Chat;
}

class OnlineProviderAsset : Asset {
	OnlineProviderConfiguration[] Configurations;
}

class OnlineServicesAsset : Asset {
	PresenceServiceData[] OnlineServices;
}

class OnlineSettings : SystemSettings {
	BackendType Backend;
	BackendType PeerBackend;
	OnlineEnvironment Environment;
	string MatchmakingToken;
	OnlineProviderAsset Provider;
	RichPresenceData RichPresence;
	ChatSettings ChatSettings;
	string MatchmakingOptions;
	string Region;
	uint32 NegativeUserCacheRefreshPeriod;
	string MatchmakingMode;
	string Country;
	bool IsSecure;
	bool SupportHostMigration;
	bool MatchmakeImmediately;
}

class OperandLogicNode : UINodeData {
	UIDataSourceInfo LeftDataSourceInfo;
	UILogicOperator Operator;
	UIDataSourceInfo RightDataSourceInfo;
	double RightLiteralOperand;
	UINodePort In;
	UINodePort True;
	UINodePort False;
}

class Or4EntityData : EntityData {
	Realm Realm;
	bool In1;
	bool In2;
	bool In3;
	bool In4;
}

class OrderBonusScoringHandlerData : ScoringHandlerData {
}

class OrderEntityData : EntityData {
	string DebugName;
	float IssueOrderDelay;
	float OnCompleteTimeOut;
	float OnFailedTimeOut;
	ReadinessLevel ReadinessOnStart;
	bool Enabled;
}

class OrderReadiness : UrgencyUserData {
	string OrderType;
	ReadinessState MinimumReadiness;
}

class OrderSettings : Asset {
	OrderReadiness[] Orders;
}

class OrEntityData : EntityData {
	Realm Realm;
	bool In1;
	bool In2;
}

class OrientationNodeData : AudioGraphNodeData {
	AudioGraphNodePort ListenerRelativeYaw;
	AudioGraphNodePort ListenerRelativePitch;
	AudioGraphNodePort ListenerRelativeRoll;
}

class OutdoorLightComponentData : ComponentData {
	Vec3 SunColor;
	Vec2 CloudShadowSpeed;
	Vec3 SkyColor;
	Vec3 GroundColor;
	float SunRotationY;
	float SunRotationX;
	Realm Realm;
	float SkyLightAngleFactor;
	float SunSpecularScale;
	float SkyEnvmapShadowScale;
	float SunShadowHeightScale;
	float CloudShadowCoverage;
	TextureAsset CloudShadowTexture;
	float TranslucencyDistortion;
	float CloudShadowSize;
	float TranslucencyAmbient;
	float CloudShadowExponent;
	float TranslucencyScale;
	float TranslucencyPower;
	bool Enable;
	bool CloudShadowEnable;
}

class OutdoorLightEffectState : DataContainer {
	Vec3 SkyColor;
	Vec3 GroundColor;
	Vec3 SunColor;
	Vec2 CloudShadowSpeed;
	float SunRotationX;
	float SunRotationY;
	float SkyLightAngleFactor;
	float SunShadowHeightScale;
	TextureAsset CloudShadowTexture;
	float CloudShadowSize;
	float CloudShadowExponent;
	float CloudShadowCoverage;
	bool CloudShadowEnable;
	bool Enable;
}

class OutputNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort BypassHeadroom;
	float MinDistance;
	AudioCurve AttenuationCurve;
	float Gain;
	float HFDampingDistance;
	float HFDampingObstruction;
	float HFDampingOcclusion;
	SoundGraphPluginRef MainSendPlugin;
	SoundBusData MainSend;
	string OutputName;
	OutputTransformSource TransformSource;
	uint32 OutputNameHash;
	SoundGraphPluginRef LowPassPlugin;
	SoundGraphPluginRef VuPlugin;
	bool Solo;
	bool EnableHdr;
}

class PackagingCellData : EntityData {
	PackagingRule[] Rules;
	PackagingCellData[] Targets;
	Vec2[] Shape;
}

class PackagingRule : Asset {
	Vec3 DebugColor;
	bool CanTargetSelf;
}

class PadInputActionData : AxesInputActionData {
	InputDevicePadButtons Button;
	InputDevicePOVs Pov;
	InputDevicePadButtons PS3AlternativeButton;
	bool UseSquareInput;
}

class PadRumbleNodeData : AudioGraphNodeData {
	AudioGraphNodePort RumbleHigh;
	AudioGraphNodePort RumbleLow;
}

class ParachuteStateData : CharacterStateData {
	float DeployTime;
	float TerminalVelocity;
	float ForwardDragCoefficient;
	float AngleOfAttack;
	float BankOffset;
	float ThrottleOffset;
	float BrakeOffset;
	float MaxRollVelocity;
	float MaxPitchVelocity;
	float MaxYawVelocity;
}

class ParameterFilterLinearNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Out;
	AudioGraphNodePort AttackSpeed;
	AudioGraphNodePort ReleaseSpeed;
}

class ParameterFilterLpNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Out;
	AudioGraphNodePort Hz;
}

class PartComponentData : ComponentData {
	HealthStateData[] HealthStates;
	PartLinkData[] PartLinks;
	bool IsSupported;
	bool IsFragile;
	bool IsNetworkable;
	bool IsWindow;
	bool AnimatePhysics;
}

class PartLinkData : DataContainer {
	uint32 PartComponentIndex1;
	uint32 PartComponentIndex2;
}

class PathfindingBuildOrderData : VolumeVectorShapeData {
}

class PathfindingBuildSettingsAsset : Asset {
	float EntityRadius;
	float EntityHeight;
	float MaxWalkableSlope;
	float MaxStep;
	float MinIslandSurfaceArea;
	float VoxSize;
	float GridSideLength;
	float AdditionalInwardsSmoothingDist;
	uint32 TerrainSamplingStep;
	bool TesselateForPathingAccuracy;
	bool UseEnhancedTerrainTracking;
	bool OptimizeForAxisAligned;
	bool LeaveSmallIslandsTouchingPortals;
}

class PathfindingDebugSettings : DataContainer {
	int32 TypesToDrawMask;
	int32 TextOffsetY;
	int32 TextStartX;
	int32 TextStartY;
	PathfindingReplayMode ReplayMode;
	bool DrawConnections;
	bool DrawObstacles;
	bool DrawPolygonOutline;
	bool DrawFilledPolygons;
	bool DrawMemory;
	bool DrawStats;
	bool DrawTimings;
	bool OriginalPaths;
	bool RandomPositions;
	bool PotentialObstacles;
}

class PathfindingExclusionVolumeData : OBBData {
}

class PathfindingObjectCategoryAsset : Asset {
}

class PathfindingSandboxAsset : Asset {
	PathfindingSystemEntityData System;
}

class PathfindingSystemEntityData : EntityData {
	uint32[] PathfindingTypesOnLevel;
}

class PathfindingTypeAsset : Asset {
	uint32 Index;
}

class PathFollowingComponentData : ComponentData {
	float UpdatePathAtDistancePercent;
	uint32 PreferredPathfindingIndex;
	uint32[] AlternatePathfindingIndices;
	float MovementCorridorRadius;
}

class PatrolOrderEntityData : BFOrderEntityData {
	RouteType TypeOfRoute;
	CombatPatrolMode CombatMode;
	WaypointData StartingWaypoint;
	bool StartAtGeometricallyClosestWaypoint;
	bool UsePathFinding;
}

class PeakingIir2NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Q;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class PeerServerBackendData : ServerBackendData {
	PeerCreateGameParameters CreateParameters;
}

class PerformanceEvent : MetricEvent {
	Vec3 Position;
	float FreeCPUMemory;
	float CPUAverage;
	float AllocCPUMemory;
	float FreeGPUMemory;
	float GPUAverage;
	int32 DrawCallCount;
	int32 PrimitiveCount;
	float AllocGPUMemory;
	string PerformanceLocation;
	guid PerformanceLink;
}

class PerformanceProfileState : MetricState {
	uint32 ProcessorCount;
	uint32 ProcessorCoreCount;
	uint32 ProcessorClock;
	uint32 TotalMemMB;
	uint32 GpuMemMB;
	string GraphicAdapterName;
	string Platform;
}

class PerformanceTrackerSettings : SystemSettings {
	float Interval;
	bool Enabled;
	bool SupressPerformanceStatsOnIdle;
	bool SupressPerformanceStatsUntilSpawned;
	bool JuiceLogPerformance;
}

class PersistenceConfiguration : Asset {
	StatCategoryTreeCollection StatCategoryTreeCollection;
	PlayerTypeProfile MPProfile;
	PlayerTypeProfile SPProfile;
	PlayerTypeProfile CoopProfile;
	PointSystemParamsAsset PointSystemParams;
	LicenseConfiguration LicenseConfig;
}

class PersistenceData : AbstractPersistenceData {
	string PersistenceName;
	string ClubPersistenceName;
	PersistenceStatGroup ClientDefaultGroup;
	PersistentValueTemplateData[] Values;
	CustomReportValueData[] CustomReportValues;
	PersistenceStatGroup ServerDefaultGroup;
	PersistenceRetentionPolicy RetentionPolicy;
	PersistenceConsumableMapping[] ConsumableMappings;
	bool HistoryDaily;
	bool HistoryWeekly;
	bool HistoryMonthly;
	bool OutputProperties;
	bool DeltaGameReports;
}

class PersistenceGameData : Asset {
	Asset[] Assets;
}

class PersistenceRetentionPolicy : Asset {
	int32 DailyHistoryCount;
	int32 WeeklyHistoryCount;
	int32 MonthlyHistoryCount;
}

class PersistenceSettings : SystemSettings {
	StatCategoryTreeCollection StatCategoryTreeCollection;
	PlayerTypeProfile MPProfile;
	PlayerTypeProfile SPProfile;
	PlayerTypeProfile CoopProfile;
	PointSystemParamsAsset PointSystemParams;
	LicenseConfiguration LicenseConfig;
}

class PersistenceStatGroup : DataContainer {
	string GroupName;
}

class PersistenceStatTable : DataContainer {
	string TableName;
	AbstractPersistenceData OwnerPersistenceData;
}

class PersistentAwardDataStatRef : AbstractPersistentStatRef {
	AwardData Definition;
}

class PersistentCriteriaStatRef : AbstractPersistentStatRef {
	CriteriaData Criteria;
	StatsCategoryBaseData ParamX;
	StatsCategoryBaseData ParamY;
	AwardData CriteriaOwner;
}

class PersistentValueTemplate : DataContainer {
	PersistentValueTemplateData Data;
	AbstractPersistentStatRef[] DerivedFormulaRefs;
}

class PersistentValueTemplateStatRef : AbstractPersistentStatRef {
	PersistentValueTemplate Definition;
}

class PhantomComponentData : ComponentData {
	Vec3 BoxSize;
	AntRef AsyncQueryPointerAsset;
	AntRef EnableTrajectoryOverride;
	AntRef TrajectoryOverride;
}

class PhysicsConeConstraintData : PhysicsConstraintData {
	float MinAngle;
	float AngularFriction;
	float MaxAngle;
	bool HasLimits;
}

class PhysicsConstraintData : GameObjectData {
	LinearTransform Transform;
	ReferenceObjectData ConstrainedObject;
	float BreakThreshold;
	bool IsBreakable;
}

class PhysicsDebugSettings : DataContainer {
	uint32 TimingRecursionDepth;
	bool UsePhysicsCpuTimers;
	bool DebugHingeConstraints;
}

class PhysicsDrivenAnimationEntityData : EntityData {
	Realm Realm;
	PhysicsDrivenAnimationEntityBinding Binding;
	int32 AnimationEntitySpacePriority;
}

class PhysicsEntityData : EntityData {
	Vec3 InertiaModifier;
	HavokAsset[] ScaledAssets;
	RigidBodyData[] RigidBodies;
	HavokAsset Asset;
	FloatPhysicsData FloatPhysics;
	float Mass;
	float Restitution;
	float Friction;
	float LinearVelocityDamping;
	float AngularVelocityDamping;
	ProximityData Proximity;
	RigidBodyConstraintData[] Constraints;
	bool EncapsulatePartsInLists;
	bool MovableParts;
}

class PhysicsEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Distance;
	AudioGraphNodePort Azimuth;
	AudioGraphNodePort ElevationAngle;
	OutputNodeData Output;
}

class PhysicsHingeConstraintData : PhysicsConstraintData {
	float MinAngle;
	float AngularFriction;
	float MaxAngle;
	bool HasLimits;
}

class PhysicsMaterialRelationPropertyData : MaterialRelationPropertyData {
}

class PhysicsMaterialsRasterData : RasterQuadtreeData {
}

class PhysicsNodeData : AudioGraphNodeData {
	AudioGraphNodePort Distance;
	AudioGraphNodePort Velocity;
	AudioGraphNodePort RelativeVelocity;
	AudioGraphNodePort Azimuth;
	AudioGraphNodePort ElevationAngle;
	PhysicsEntry[] Entries;
}

class PhysicsPropertyRelationPropertyData : MaterialRelationPropertyData {
}

class PhysicsRenderSettings : DataContainer {
	int32 RenderSpecificPart;
	float ViewDistance;
	bool RenderClient;
	bool RenderEffectWorld;
	bool RenderDetail;
	bool RenderStatic;
	bool RenderUngrouped;
	bool RenderRagdoll;
	bool RenderGroup;
	bool RenderPhantoms;
	bool RenderCharacterCollision;
	bool RenderWater;
	bool RenderSolidGeometry;
	bool UseShapeCache;
	bool RenderConstraints;
	bool RenderOnlyContactConstraints;
	bool RenderConstraintCount;
	bool RenderActiveConstraintCount;
	bool RenderSimulationIslands;
	bool RenderBroadphaseHandles;
	bool RenderDestructionConnections;
	bool RenderPartBoundingBoxes;
	bool RenderOnlyBoundingBoxes;
	bool RenderInertia;
	bool RenderCenterOfMass;
	bool RenderLinearVelocity;
	bool RenderCollidesWithTerrain;
	bool RenderCollisionSpheres;
	bool RenderEntityStats;
	bool RenderWorldStats;
	bool ShowContactsInWorldStats;
	bool ShowInactiveContactsInWorldStats;
	bool ShowPhantomsInWorldStats;
	bool ShowFixedObjectsInWorldStats;
	bool RenderMemoryUsed;
	bool CollisionSpawnDebug;
	bool RenderServer;
}

class PhysicsSettings : DataContainer {
	uint32 IntegrateJobCount;
	uint32 ClientEffectWorldThreadCount;
	uint32 ClientWorldThreadCount;
	uint32 ServerWorldThreadCount;
	uint32 CollideJobCount;
	bool Enable;
	bool EnableAIRigidBody;
	bool ForestEnable;
	bool EnableJobs;
	bool RemoveRagdollWhenWoken;
	bool RemoveFromWorldOnCollisionOverflow;
	bool SingleStepCharacter;
	bool ForceSingleStepCharacterInSP;
	bool EnableFollowWheelRaycasts;
	bool EnableClientWheelRaycasts;
	bool EnableASyncWheelRaycasts;
	bool UseDelayedWakeUpClient;
	bool UseDelayedWakeUpServer;
	bool SuppressDebrisSpawnUntilReady;
}

class PickupEntityAsset : Asset {
	PickupEntityData Data;
}

class PickupEntityData : GamePhysicsEntityData {
	PickupPlayerEnum RandomizeAmmoOnDropForPlayer;
	int32 MinRandomClipAmmoPercent;
	ObjectBlueprint PhysicsBlueprint;
	MeshAsset Mesh;
	int32 MaxRandomClipAmmoPercent;
	uint32 PreferredWeaponSlot;
	float TimeToLive;
	int32 MinRandomSpareAmmoPercent;
	float InteractionRadius;
	int32 MaxRandomSpareAmmoPercent;
	bool UnspawnOnPickup;
	bool UnspawnOnAmmoPickup;
	bool ForceWeaponSlotSelection;
	bool DisplayInMiniMap;
	bool HasAutomaticAmmoPickup;
	bool UseWeaponMesh;
	bool AllowPickup;
	bool ContentIsStatic;
	bool PositionIsStatic;
	bool IgnoreNullWeaponSlots;
	bool ReplaceAllContent;
	bool RemoveWeaponOnDrop;
	bool SendPlayerInEventOnPickup;
}

class PlanarReflectionComponentData : ComponentData {
	BlurFilter VerticalBlurFilter;
	float HorizontalDeviation;
	float GroundHeight;
	float VerticalDeviation;
	BlurFilter HorizontalBlurFilter;
	bool SkyRenderEnable;
	bool Enable;
}

class PlatformSplitterEntityData : EntityData {
	Realm Realm;
	bool RunOnce;
}

class PlayerCameraEntityData : CameraEntityBaseData {
	TargetMode SoldierTargetMode;
	uint32 SoldierCameraIndex;
	TargetMode VehicleTargetMode;
	uint32 VehicleCameraIndex;
	bool ReleaseControlIfTargetLost;
	bool ShouldTargetControllable;
	bool ShouldTargetVehicleDriverEntry;
	bool ShouldTargetExtraPlayerInDoublePlayerEvent;
}

class PlayerData : Asset {
	PlayerViewData PlayerView;
	EntryInputActionMapsData InputConceptDefinition;
	InputActionMappingsData InputMapping;
}

class PlayerEntryComponentData : EntryComponentData {
	Vec3 AnimationAccelerationMultiplier;
	AntEntryIdEnum AntEntryId;
	string AntEntryID;
	AntEnumeration AntEntryEnumeration;
	float ShieldedTransitionExitTime;
}

class PlayerFilterEntityData : EntityData {
	Realm Realm;
	bool InvertFilter;
	bool ForwardToSpectators;
}

class PlayerInputTriggerEntityData : EntityData {
	Realm Realm;
	EntryInputActionEnum EntryInputActions;
	float ValueModifier;
	float TrailingValueAtStart;
	float AccumulatedValueAtStart;
	bool SendTriggerEvents;
	bool EnabledFromStart;
}

class PlayerInteractionViewData : SubViewData {
}

class PlayerLookAtEntityData : EntityData {
	LinearTransform TargetTransform;
}

class PlayerOrderTrackerData : HudTrackerData {
	UIHudIcon AttackIcon;
	UIHudIcon DefendIcon;
	UIHudIcon MoveToIcon;
}

class PlayerState : MetricState {
	uint64 OnlineId;
}

class PlayerTakeOverTriggerEntityData : GameEntityData {
	TeamId TeamId;
	float TimeToLoseControl;
}

class PlayerTypeProfile : Asset {
	PersistenceData Values;
	AwardDataTree Awards;
	RankParamsAsset RankParams;
	ScoringData Scoring;
	DogTagsAsset DogTags;
	EloParameters EloParams;
	StaticUnlockList StaticUnlocks;
	StatSpamSettings SpamSettings;
	string[] OrderedUnlockNames;
}

class PlayerViewData : DataContainer {
	SubViewData[] SubViews;
}

class PlayFromHereAsset : Asset {
	Blueprint Soldier;
	AnimatedSkeletonDatabase AnimatedSkeletonDatabase;
	AntProjectAsset AntProject;
}

class PlayVideoEntityData : EntityData {
	MovieTextureAsset Movie;
	bool KeepBlackScreen;
	bool AllowSkip;
}

class PointEnvelope : DataContainer {
	PointEnvelopePoint[] Points;
}

class PointLightEntityData : LocalLightEntityData {
	float Width;
	float TranslucencyAmbient;
	float TranslucencyScale;
	uint32 TranslucencyPower;
	float TranslucencyDistortion;
}

class PointSystemParamsAsset : Asset {
	float MultiKillTimeLimit;
	float DnfTimeout;
	uint32 KillStreakX;
	uint32 NemesisKillX;
	float FreefallHeight;
}

class PointTargetData : SpatialEntityData {
}

class PolynomialColorInterpData : EvaluatorData {
	Vec3 Color0;
	Vec3 Color1;
	Vec4 Coefficients;
}

class PolynomialData : EvaluatorData {
	Vec4 Coefficients;
	float ScaleValue;
	float MinClamp;
	float MaxClamp;
}

class PolynomialOperatorData : EvaluatorData {
	PolynomialTempData FirstOperand;
	PolynomialTempData SecondOperand;
	PolynomialOperation Operation;
	float MinClampResult;
	float MaxClampResult;
}

class PositionEvaluationConstantData : Asset {
	float OwnRandomPositionsRadius;
	float LeaderRandomPositionsRadius;
}

class PowerToolWeaponData : WeaponData {
	SoundAsset RepairSound;
	SoundAsset RepairCompletedSound;
	SoundAsset DamageSound;
	MaterialContainerPair RepairMaterialPair;
	bool PlayFireEffectOnRepairOnly;
}

class PredestructionEntityData : GameEntityData {
	float Radius;
}

class PrefabBlueprint : Blueprint {
	GameObjectData[] Objects;
}

class PreRoundEntityData : GameEntityData {
	int32 RoundMaxPlayerCount;
	uint32 RoundRestartCountdown;
	int32 RoundMinPlayerCount;
}

class PresenceAchievementServiceData : PresenceServiceData {
}

class PresenceBackendData : Asset {
	PresenceRequest[] Requests;
}

class PresenceBlobServiceData : PresenceServiceData {
}

class PresenceCalendarServiceData : PresenceServiceData {
}

class PresenceCommerceServiceData : PresenceServiceData {
}

class PresenceCommServiceData : PresenceServiceData {
}

class PresenceEntitlementServiceData : PresenceServiceData {
}

class PresenceFriendsServiceData : PresenceServiceData {
}

class PresenceGameConfigurationServiceData : PresenceServiceData {
	OnlineEnvironmentConsoleUrl ConfigUrl;
}

class PresenceLeaderboardServiceData : PresenceServiceData {
}

class PresenceMatchFeedServiceData : PresenceServiceData {
}

class PresenceNewsTickerServiceData : PresenceServiceData {
}

class PresencePlaygroupServiceData : PresenceServiceData {
}

class PresenceRspServiceData : PresenceServiceData {
}

class PresenceServerBrowserServiceData : PresenceServiceData {
	MatchmakingCriteria FilterCriterias;
	uint32 ListCapacity;
}

class PresenceServiceData : Asset {
}

class PresenceStatisticsServiceData : PresenceServiceData {
}

class PresenceUserIdServiceData : PresenceServiceData {
}

class PresenceWebFeedServiceData : PresenceServiceData {
}

class PresenceXPromoServiceData : PresenceServiceData {
}

class PrintDebugTextEntityData : EntityData {
	Vec3 TextColor;
	Realm Realm;
	string Text;
	bool Enabled;
}

class ProceduralAwarenessAntRefs : DataContainer {
	AntRef ProceduralAwarenessActive;
	AntRef ProceduralAwarenessHumanIKActive;
	AntRef ProceduralAwarenessData;
}

class ProcessorData : EmitterComponentData {
	Vec4 DefaultValues;
	ProcessorData NextProcessor;
	EmitterComponentData Pre;
	EmittableField EvaluatorInput;
	bool Enable;
}

class ProfileEntityData : EntityData {
	Realm Realm;
	string ProfileName;
}

class ProfileOptionData : Asset {
	string UniqueId;
	ProfileOptionsType Category;
}

class ProfileOptionDataBinary : ProfileOptionData {
	int32 MaxLength;
}

class ProfileOptionDataBool : ProfileOptionData {
	bool Value;
}

class ProfileOptionDataEnum : ProfileOptionData {
	ProfileOptionDataEnumItem[] Items;
}

class ProfileOptionDataFloat : ProfileOptionData {
	float Min;
	float Max;
	float Value;
	float Step;
}

class ProfileOptionDataInt : ProfileOptionData {
	int32 Min;
	int32 Max;
	int32 Value;
	int32 Step;
}

class ProfileOptionDataString : ProfileOptionData {
	int32 MaxLength;
	string Value;
}

class ProfileOptionsAsset : Asset {
	string FileName;
	string ContentName;
	uint32 FileSize;
	ProfileOptionData[] Options;
	bool AutoSaveOnQuit;
}

class ProjectileBlueprint : ObjectBlueprint {
}

class ProjectileEntityData : GamePhysicsEntityData {
	float VisualConvergeDistance;
	float InitialSpeed;
	float TimeToLive;
	uint32 MaxCount;
	float InitMeshHideTime;
	MaterialContainerPair MaterialPair;
	AntHitReactionWeaponType HitReactionWeaponType;
	ExplosionEntityData Explosion;
	WeaponSuppressionData SuppressionData;
	string AmmunitionType;
	bool ServerProjectileDisabled;
	bool DetonateOnTimeout;
	bool SuppressOwnerVehicleDamage;
}

class PropellerEngineConfigData : EngineConfigData {
	Vec3 HorisontalForceOffset;
	PropellerType PropellerType;
	RotorParameters RotorConfig;
	ForceMagnitudeInputType ForceMagnitudeInputType;
	uint32 DirectionVectorIndex;
	float ForceMagnitudeMultiplier;
	float LiftForceSpringConstant;
	float LiftForceDampingConstant;
	float CyclicInputScaleRoll;
	float CyclicRollLiftMod;
	float CyclicRollStrafeMod;
	float CyclicInputScalePitch;
	float CyclicPitchLiftMod;
	float CyclicPitchStrafeMod;
	float CyclicPitchStrafeBrakeMod;
	float CollectiveInputIdle;
	float CollectiveThrottleInputScale;
	float CollectiveBrakeInputScale;
	float DefaultAngleOfAttack;
	float AttackAngleMod;
	float StabilizerMod;
	float HorisontalMinEffectVelocity;
	float HorisontalMinEffectMod;
	float PitchStrength;
	float PitchFromVel;
	float GravityMod;
	float SPForwardStrength;
	float SPSidewaysStrength;
	float SPVerticalStrength;
	float VelocityFromPitch;
	float PitchLimit;
	float BankingStrength;
	float BankingLimit;
	float RollStrength;
	float PitchUpWhenBankStrength;
	float PitchUpWhenBankLimit;
	bool SPDefault;
	bool EnableNewHelicopter;
	bool SPAllowed;
}

class PropertyCastEntityData : EntityData {
	Realm Realm;
	int32 IntValue;
	float FloatValue;
	bool BoolValue;
}

class PropertyDebugEntityData : EntityData {
	Vec3 Vec3Value;
	Vec3 TextColor;
	Vec2 ScreenPosition;
	LinearTransform TransformValue;
	Vec2 Vec2Value;
	string ValuePrefix;
	Realm Realm;
	float FloatValue;
	int32 IntValue;
	float TextScale;
	string StringValue;
	bool DefaultVisible;
	bool BoolValue;
	bool Multiline;
}

class PropertyGateEntityData : EntityData {
	LinearTransform TransformIn;
	Vec4 Vec4In;
	Vec3 Vec3In;
	Realm Realm;
	float FloatIn;
	int32 IntIn;
	bool BoolIn;
	bool Default;
}

class PropertyRecordingData : DataContainer {
	int32 Id;
}

class PropertyTrackData : DataContainer {
	int32 Id;
	int32[] Times;
}

class ProximityData : DataContainer {
	ProximityObjectType ProximityType;
}

class Ps3ParentalLockAgeSettingsOverrides : DataContainer {
	Ps3ParentalLockAgeSettingsForCountry[] Overrides;
}

class Ps3PresenceBackendData : PresenceBackendData {
	string CommunicationId;
	string CommunicationSignature;
	Ps3SkuSettings[] SkuSettings;
	Ps3ParentalLockAgeSettings[] ParentalLockAgeSettings;
}

class PS3StoreImageHD1080 : UIItemDescription {
	string Identifier;
	string ImagePath;
}

class PS3StoreImageSD : UIItemDescription {
	string Identifier;
	string ImagePath;
}

class QueryGetNode : UINodeData {
	UINodePort In;
	UINodePort Out;
	UIDataSourceInfo DataSource;
}

class RadarSweepComponentData : ComponentData {
	float ControllableSpeedThreshold;
	float ControllableSweepRadius;
	float ControllableSweepInterval;
	float MineSweepInterval;
	float MineSweepRadius;
	bool SweepForMines;
	bool SweepForControllables;
}

class RadioAltitudeData : DataContainer {
	float Range;
	float UpdateFrequency;
	CollisionMethodEnum CollisionMethod;
}

class RadioComponentData : ComponentData {
	SoundAsset SoundEffect;
}

class RadiosityEntityData : EntityData {
}

class RadiosityMaterial : DataContainer {
	Vec3 Color;
	string Name;
	bool Emissive;
}

class RagdollAsset : Asset {
	MaterialContainerPair MaterialPair;
	bool UseServerRagdoll;
}

class RagdollComponentData : ComponentData {
	SkeletonAsset SkeletonAsset;
	RagdollAsset RagdollAsset;
	SkeletonCollisionData SkeletonCollisionData;
	RagdollBinding Binding;
	string LeftLegBoneName;
	string RightLegBoneName;
}

class RandomDelayEntityData : EntityData {
	float MinDelay;
	float MaxDelay;
	Realm Realm;
	bool AutoStart;
	bool RunOnce;
}

class RandomEvaluatorData : EvaluatorData {
	float Max;
	float Min;
}

class RandomEventEntityData : EntityData {
	Realm Realm;
	int32 Probability;
	bool RandomizeFirstOnly;
	bool AutoStart;
}

class RandomFloatEntityData : EntityData {
	Realm Realm;
	float Min;
	float Max;
}

class RandomMultiEventEntityData : EntityData {
	Realm Realm;
	float[] RandomEventWeight;
	bool UniformDistribution;
	bool ResetOutputsWhenAllHasTriggered;
	bool DisableOutputOnTrigger;
}

class RandomWalkOrderEntityData : BFOrderEntityData {
	bool CombatForbidden;
}

class RandomXYZEvaluatorData : EvaluatorData {
	float MaxX;
	float MinX;
	float MaxY;
	float MinY;
	float MaxZ;
	float MinZ;
}

class RankLevelData : DataContainer {
	string RankName;
	uint32 PointsNeeded;
	string ImageName;
	string IconName;
	string SoundName;
	BasicUnlockInfo[] UnlockInfos;
	int32 RankNumber;
}

class RankParamsAsset : Asset {
	RankLevelData[] Ranks;
}

class RasterCoverageData : DataContainer {
}

class RasterQuadtreeData : Asset {
}

class RasterQuadtreeNodeData : DataContainer {
}

class RasterTreeAsset : DataContainer {
}

class RawFileAsset : Asset {
}

class RawFileDataAsset : RawFileAsset {
	uint8[] RawData;
	uint32 Size;
}

class RawFileImportActionParams : DataContainer {
	string SourceFile;
}

class RawFileResourceAsset : RawFileAsset {
}

class ReceivedAwardSurveyEvent : MetricEvent {
	string AwardName;
	guid SurveyMetricLink;
}

class ReceiveEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Out;
	AudioGraphParameter Source;
	float Parameter;
	float SavedValue;
}

class ReceiveNodeData : AudioGraphNodeData {
	ReceiveEntry[] Entries;
}

class RecordedInputData : Asset {
	InputRecorderTrackData[] TrackData;
}

class ReferenceObjectData : GameObjectData {
	LinearTransform BlueprintTransform;
	Blueprint Blueprint;
	ObjectVariation ObjectVariation;
	StreamRealm StreamRealm;
	bool CastSunShadowEnable;
	bool Excluded;
}

class RefreshNode : UINodeData {
	UINodePort In;
	UINodePort Out;
	UIDataSourceInfo DataSource;
}

class RegistryContainer : DataContainer {
	DataContainer[] EntityRegistry;
	DataContainer[] AssetRegistry;
	DataContainer[] BlueprintRegistry;
	DataContainer[] ReferenceObjectRegistry;
}

class RegularSocketObjectData : SocketObjectData {
	LinearTransform Transform;
	LinearTransform[] Mesh3pTransforms;
}

class RemoteEntryComponentData : EntryComponentData {
}

class RenderTextureAsset : TextureBaseAsset {
}

class RenderVolumeEntityData : SpatialEntityData {
	Vec4 UserMasks;
	SurfaceShaderInstanceDataStruct Shader;
	RenderVolumeTransformType TransformType;
	bool Enabled;
}

class RepairToolWeaponData : PowerToolWeaponData {
	float RechargeSpeed;
}

class ResourceManagerSettings : SystemSettings {
	int32 CasBundleReadBufferSizeKb;
	int32 CasBundleDecompressBufferSizeKb;
	int32 CasBundleDecompressBufferCount;
	bool BundleProfilingEnable;
	bool SPUDecompressEnable;
}

class RGBRasterData : RasterQuadtreeData {
}

class RibbonData : VisualVectorShapeData {
	RibbonPointData[] RibbonPoints;
}

class RichPresenceContext : DataContainer {
	string Name;
	RichPresenceContextValue[] Values;
	RichPresenceContextValue DefaultValue;
	int8 Index;
}

class RichPresenceContextValue : DataContainer {
	string SID;
	int8 Index;
}

class RichPresenceContextValueWithKey : RichPresenceContextValue {
	string Key;
}

class RichPresenceData : Asset {
	RichPresencePresenceString[] PresenceModes;
	RichPresencePresenceString DefaultMode;
	RichPresencePresenceString InactiveMode;
	RichPresenceContext[] Contexts;
	RichPresenceProperty[] Properties;
}

class RichPresencePresenceString : DataContainer {
	string SID;
	bool Interpolated;
	int8 Index;
}

class RigidBodyConeConstraintData : RigidBodyConstraintData {
	float MinAngle;
	float AngularFriction;
	float MaxAngle;
	bool HasLimits;
}

class RigidBodyConstraintData : GameObjectData {
	LinearTransform Transform;
	RigidBodyData ParentBody;
	float BreakThreshold;
	bool IsBreakable;
}

class RigidBodyData : DataContainer {
	Vec3 InertiaModifier;
	RigidBodyType RigidBodyType;
	float Mass;
	float Restitution;
	float Friction;
	float AngularVelocityDamping;
	float LinearVelocityDamping;
	uint32 InteractionToolkitCollisionVolumeId;
	RigidBodyMotionType MotionType;
	RigidBodyQualityType QualityType;
	RigidBodyCollisionLayer CollisionLayer;
	FloatPhysicsData FloatPhysics;
	RigidBodyConstraintData[] Constraints;
}

class RigidBodyHingeConstraintData : RigidBodyConstraintData {
	float MinAngle;
	float AngularFriction;
	float MaxAngle;
	bool HasLimits;
}

class RigidMeshAsset : MeshAsset {
}

class RigidMeshEntityData : SpatialEntityData {
	RigidMeshAsset Mesh;
}

class RiverData : RibbonData {
}

class RoadData : RibbonData {
	SurfaceShaderBaseAsset Shader2d;
	SurfaceShaderBaseAsset Shader3dZOnly;
	float UvTileFactor;
	bool StickToTerrain;
}

class RotateVectorData : EvaluatorData {
	float Angle;
	bool RotateWithinPlane;
	bool InputAffectsPhi;
}

class RotationBodyData : MovingBodyData {
	float AngularMomentumMultiplier;
	float AngularMomentumThreshold;
	float AngularMomentumDamping;
	float AngularMomentumDampingAcc;
	float AngularMomentumDampingDeacc;
	float AngularConstraintMin;
	ExtendedConstraintsData ExtendedConstraints;
	float AngularConstraintMax;
	int32 RotationAxis;
	bool UsePostSatisfyConstraints;
	bool UseAngularMomentumThreshold;
	bool UseAngularMomentumDamping;
	bool UseAngularConstraint;
}

class RotorComponentData : ComponentData {
	RotorModelData LowRpmModel;
	RotorModelData HighRpmModel;
	RotationAxis RotationAxis;
	float RotationMultiplier;
	float ChangeModelRpm;
	EffectBlueprint BlowEffect;
	float TriggerGroundEffectHeight;
	float CriticallyDamagedRotationForce;
	bool OnlyTriggerBlowEffectInWater;
	bool GroundEffectOnTerrainOnly;
	bool CriticalDamage;
}

class RotorParameters : DataContainer {
	float CyclicInputScaleRoll;
	float CyclicInputScalePitch;
	float CollectiveThrottleInputScale;
	float CollectiveBrakeInputScale;
	float CollectiveInputIdle;
	float HorizontalForceModifier;
	Vec2[] AngleOfAttack;
	float CyclicFadeOutOffset;
	float AdditionalGravityModifier;
	float HorisontalMinEffectMod;
	float HorisontalMinEffectVelocity;
	bool EnableHorisontalMinEffect;
	bool ReverseThrottle;
}

class RoundEvent : MetricEvent {
	string LevelName;
	int32 JuiceSessionId;
}

class RoundOverEntityData : EntityData {
	TeamId Team;
}

class RoundOverEvent : MetricEvent {
	int32 WinningTeam;
	int32 TicketsLeft;
}

class RouteEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Output;
	AudioGraphNodePort Amplitude;
	SoundGraphPluginRef Plugin;
}

class RouteNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	RouteEntry[] Routes;
}

class SamplerNodeData : AudioGraphNodeData {
	AudioGraphNodePort ExternalWave;
	AudioGraphNodePort Variation;
	AudioGraphNodePort Offset;
	AudioGraphNodePort Delay;
	AudioGraphNodePort Pitch;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort EnableStep;
	AudioGraphNodePort Buffer;
	AudioGraphNodePort Trigger;
	AudioGraphNodePort Release;
	AudioGraphNodePort Step;
	AudioGraphNodePort Output;
	AudioGraphNodePort Finished;
	AudioGraphNodePort Buffered;
	AudioGraphNodePort Position;
	SoundWaveAsset Wave;
	float BasePitch;
	LoopType Loop;
	SamplerPlugins[] Plugins;
	bool ShuffleSegments;
}

class SampleTextureData : EvaluatorData {
	Vec2 TextureDimensions;
	Vec3 ColorIntensityMax;
	Vec3 ColorIntensityMin;
	Vec4[] GradientData;
	float TextureOriginU;
	float TextureOriginV;
}

class SaveEntityData : EntityData {
	TextureAsset SaveScreenTexture;
	string LevelName;
	string SaveFileName;
	string SaveNameSID;
	bool CheckForHumanPlayer;
}

class SaveGameLoadedEntityData : EntityData {
}

class ScaleClampNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort InMin;
	AudioGraphNodePort InMax;
	AudioGraphNodePort OutMin;
	AudioGraphNodePort OutMax;
	AudioGraphNodePort Out;
}

class ScenarioWaypointData : AbstractLocoWaypointData {
	AntRef ScenarioAntRef;
	ScenarioTaskData ScenarioTask;
}

class SceneRecordingData : DataContainer {
	EntityRecordingData[] Data;
}

class ScopeFilterData : Asset {
}

class ScoreAggregate : MetricAggregate {
	float TotalScore;
}

class ScoringBucketData : DataContainer {
	ScoringBucket DestinationBucket;
	ScoringBucketType BucketType;
	string Name;
	ScoringBucketData TeamTotalBucket;
	ScoringBucketUnlockData[] Unlocks;
	StatsCategoryBaseData[] ConnectedCategories;
	bool AddToEntry;
	bool RoundScore;
	bool GlobalScore;
}

class ScoringData : Asset {
	ScoringTypeData[] ScoringTypes;
	ScoringHandlerData[] ScoringHandlers;
	ScoringBucketData[] Buckets;
}

class ScoringHandlerData : DataContainer {
}

class ScoringTypeData : DataContainer {
	StatEvent Measuring;
	StatsCategoryBaseData ParamX;
	StatsCategoryBaseData ParamY;
	float Limit;
	string DescriptionSid;
	ScoringVisibilityType VisibilityType;
	ScoringBucket Bucket;
	float Score;
	float AdditionalValueMultiplier;
	bool ShowForTeam;
}

class ScreenEffectComponentData : ComponentData {
	Vec4 ScreenEffectParams;
	ScreenEffectFrameType FrameType;
	SurfaceShaderBaseAsset Shader;
	float FrameWidth;
	float OuterFrameOpacity;
	float InnerFrameOpacity;
	float Angle;
	Realm Realm;
}

class ScriptEntityData : EntityData {
	string Code;
	Realm Realm;
}

class SearchAndDestroyConstantData : Asset {
	float TimeToWaitMin;
	float TimeToWaitMax;
	float DefaultSearchAndDestroyRadius;
}

class SearchAndDestroyOrderEntityData : BFOrderEntityData {
	TargetPosKnowledgeType TargetPosKnowledge;
	float FindTargetTime;
	bool TargetAreaFollowsTarget;
	bool Aggressive;
}

class SelectEventEntityData : EntityData {
	Realm Realm;
	string[] Events;
}

class SendEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort In;
	AudioGraphParameter Target;
}

class SendNodeData : AudioGraphNodeData {
	SendEntry[] Entries;
}

class SenseTerrainSphereData : SphereData {
}

class SensingComponentData : ComponentData {
	SensingTemplateData Template;
	SensingSettings Settings;
	bool Enabled;
	bool SharedPlayerMemory;
	bool UseWeaponTransform;
}

class SensingManagerEntityData : EntityData {
	SensingSphere[] SenseTerrainAreas;
}

class SensingSettings : Asset {
	double SensingTimeSpan;
	double AttackerTrackTime;
	double LineOfSightTestTime;
	int32 MaxRays;
	VisionBoxSettings CharacterVisionBoxSettings;
	VisionBoxSettings VehicleVisionBoxSettings;
	float CloseFireImpactDistance;
	float CloseExplosiveImpactDistance;
	float CloseTrajectoryDistance;
	float ImpactSenseDistance;
	float MaxVolume;
	float MaxSize;
	float MaxSpeed;
	float VolumeModifier;
	float MovementModifier;
	float LuckModifier;
	float BackgroundLoudnessFactor;
	float MotionSizeFactor;
	float MotionSpeedFactor;
	float MotionPeripheralityFactor;
	float MotionDistanceFactor;
	float SmokeSphereRadius;
	float SmokeSphereDuration;
	float SpawnOutOfLOSRaycastHeight;
	float SpawnOutOfLOSTraceDistance;
	float SpawnOutOfLOSRaycastDistance;
	float SpawnOutOfLOSRadius;
	SensingTemplateData DefaultTemplate;
}

class SensingTemplateData : GameSensingTemplateData {
	double AwareForgetTime;
	double LostForgetTime;
	double TimeUntilUnseenIsLost;
	float MaximumMergeDistance;
	float MaximumAlertDistance;
	float MaximumReadinessRaiseDistance;
	SensingLimits ReadyLimits;
	SensingLimits RelaxedLimits;
	string DebugText;
	SensingLimits CombatLimits;
	bool UseSenseSharing;
	bool NoticeBullets;
}

class SequenceData : SequenceEntityData {
}

class SequenceEntityData : EntityData {
	SequenceEventData[] Events;
	int32 SequenceStartTime;
	int32 SequenceLength;
	float ExternalTime;
	PropertyTrackData[] PropertyTracks;
	Realm Realm;
	UpdatePass ServerUpdatePass;
	UpdatePass ClientUpdatePass;
	CustomSequenceTrackData[] CustomSequenceTracks;
	bool AutoPlayFirstFrame;
	bool Looping;
	bool AutoStart;
	bool PlayInReverse;
}

class SequenceGeneratorNodeData : AudioGraphNodeData {
	AudioGraphNodePort Trigger;
	AudioGraphNodePort Reset;
	AudioGraphNodePort Min;
	AudioGraphNodePort Max;
	AudioGraphNodePort Step;
	AudioGraphNodePort Value;
}

class ServerBackendData : Asset {
	ServerBackendAttributeMapping[] Mappings;
}

class ServerMetricsSettings : DataContainer {
	string ReportName;
	bool Enabled;
	bool DbxReportEnabled;
	bool TickTelemetryEnabled;
	bool DevelopmentTelemetryEnabled;
	bool PerformanceTelemetryEnabled;
	bool JuiceTelemetryEnabled;
	bool PerformanceProfileStateEnabled;
	bool TransactionTelemetryEnabled;
	bool CompressTransactions;
}

class ServerPerformanceEvent : MetricEvent {
	float CPUAverage;
	float CPUMemory;
	uint32 Received;
	uint32 Sent;
	float ReceivedAverage;
	float SentAverage;
}

class ServerSettings : SystemSettings {
	string InstancePath;
	uint32 RemoteControlPort;
	float DuplicationChance;
	uint32 MaxQueriesPerSecond;
	float CorruptionChance;
	string RemoteAdministrationPort;
	float MaxDropDuration;
	float ReorderingChance;
	float HumanHealthMultiplier;
	string ServerName;
	float MinDropDuration;
	uint32 SaveGameVersion;
	float PacketDrops;
	float DropSpikeChance;
	float MaxLatency;
	uint32 OutgoingRate;
	uint32 IncomingRate;
	string Playlist;
	string SavePoint;
	float IngameTimeout;
	float OutgoingFrequency;
	float RespawnTimeModifier;
	float MinLatency;
	string ServerPassword;
	float TimeoutTime;
	uint32 PlayerCountNeededForMultiplayer;
	float VehicleSpawnDelayModifier;
	string DebugMenuClick;
	string AdministrationPassword;
	float LoadingTimeout;
	int32 DedicatedServerCpu;
	bool DeathmatchDebugInfo;
	bool TimeoutGame;
	bool AILooksIntoCamera;
	bool IsStatsEnabled;
	bool IsTreeDestructionEnabled;
	bool HavokCaptureToFile;
	bool ShowTriggerDebugText;
	bool IsInternetSimulationEnabled;
	bool DisableCutscenes;
	bool JobEnable;
	bool ThreadingEnable;
	bool DrawActivePhysicsObjects;
	bool IsRanked;
	bool UnlockResolver;
	bool ScoringLogEnabled;
	bool HavokVisualDebugger;
	bool IsSoldierDetailedCollisionEnabled;
	bool LoadSavePoint;
	bool IsSoldierAnimationEnabled;
	bool IsAiEnabled;
	bool IsReconfigurable;
	bool IsDestructionEnabled;
	bool ForcePlaylist;
	bool IsNetworkStatsEnabled;
	bool AutoUnspawnBangers;
	bool RegulatedAIThrottle;
	bool EnableAnimationCulling;
	bool FallBackToSquadSpawn;
	bool AllowIndestructibleParts;
	bool IsPresenceEnabled;
	bool WaterPhysicsEnabled;
	bool RespawnOnDeathPosition;
	bool IsRenderDamageEvents;
	bool VehicleSpawnAllowed;
	bool QueryProviderEnabled;
	bool IsDesertingAllowed;
	bool DebrisClusterEnabled;
	bool AdministrationEnabled;
	bool AdministrationLogEnabled;
	bool AdministrationTimeStampLogNames;
	bool AdministrationEventsEnabled;
	bool AdministrationServerNameRestricted;
	bool ThreadedLoadingEnable;
	bool VegetationEnabled;
}

class SettingEntityData : EntityData {
	Realm Realm;
	string BoolSettingName;
	string IntSettingName;
	string FloatSettingName;
}

class SettingsBundleAsset : Asset {
	SystemSettings[] Settings;
}

class ShaderColorUnlockPartCollection : ShaderCustomizationUnlockPartCollection {
	ColorReference DefaultColorReference;
	ColorUnlockPartData[] UnlockParts;
}

class ShaderCustomizationUnlockPartCollection : DataContainer {
	ObjectBlueprint[] MeshBlueprints;
	string ShaderNodeName;
	CustomizedMeshMaterialsData[] MeshMaterials;
}

class ShaderDatabaseAsset : Asset {
	string LevelName;
}

class ShaderGraph : SurfaceShaderBaseAsset {
	uint32 MaxSubMaterialCount;
	bool GammaCorrectionEnable;
}

class ShaderParameterComponentData : ComponentData {
	ShaderParameterVector[] ShaderParameterVectors;
}

class ShaderParamsComponentData : ComponentData {
	Vec4 Value;
	string ParameterName;
}

class ShaderSystemSettings : DataContainer {
	Vec3 DebugNonFiniteColor;
	uint32 DxInstancingBufferHandlingMethod;
	uint32 FrameMemoryBufferSize;
	uint32 XenonDispatchCmdBufferSize;
	uint32 XenonDispatchCmdBufferSegmentSize;
	uint32 DxDispatchJobBlocksPerCommandList;
	uint32 DxDispatchJobMinBlockCount;
	uint32 DxFrameVertexBufferPoolSize;
	int32 XenonDispatchOnlyJob;
	uint32 DxVsExternalConstantBufferSize;
	uint32 DxVsFunctionConstantBufferSize;
	uint32 DxPsFunctionConstantBufferSize;
	float Ps3GeometryYieldGranularity;
	uint32 XenonDispatchJobCount;
	int32 DispatchPrepareJobCount;
	uint32 Ps3MinMipmap;
	uint32 Ps3ZCullInFrontLimit;
	uint32 Ps3ZCullBehindLimit;
	int32 Ps3DispatchOnlyJob;
	uint32 Ps3DispatchJobSpuCount;
	uint32 DxMaxInstructionCount;
	uint32 OverdrawMaxLayerCount;
	uint32 Ps3GeometryJobCount;
	uint32 DxMaxInstanceCount;
	float Ps3DispatchYieldGranularity;
	uint32 DxPsExternalConstantBufferSize;
	uint32 XenonDispatchBlocksPerJob;
	uint32 Ps3DispatchJobCount;
	int32 DxDispatchJobCount;
	uint32 DrawCallMultiplier;
	uint32 Ps3MaxMipmap;
	float MipmapBias;
	uint32 MaxAnisotropy;
	uint32 ZOnlyMaxAnisotropy;
	uint32 XenonTrilinearThreshold;
	uint32 Ps3DispatchJobPriority;
	uint32 XenonDispatchMinJobBlockCount;
	uint32 Ps3GeometryJobSpuCount;
	uint32 Ps3DispatchBlocksPerJob;
	uint32 Ps3GeometryJobPriority;
	bool SinglePrimitiveEnable;
	bool SortBlocksEnable;
	bool DrawCallEnable;
	bool GcmReplayMarkersEnable;
	bool ClipPlanesEnable;
	bool DepthTestEnable;
	bool StencilEnable;
	bool ShaderPixScopeEnable;
	bool SingleFrameBlockLogEnable;
	bool AlphaBlendEnable;
	bool PixBlockEventsEnable;
	bool SimpleTexturesEnable;
	bool SimpleVertexShaderEnable;
	bool PseudoInstancingEnable;
	bool StatesEnable;
	bool PixelConstantsEnable;
	bool VertexConstantsEnable;
	bool PixelConstantRedundancyCheckingEnable;
	bool VertexConstantRedundancyCheckingEnable;
	bool SimpleTextureFilteringEnable;
	bool DepthWriteEnable;
	bool DispatchDirectEnable;
	bool DrawTileClassifiedBlocks;
	bool DepthEnable;
	bool DrawStreamedTextureBlocks;
	bool ForcePointFiltering;
	bool LogEnable;
	bool ZeroViewportEnable;
	bool DrawTransparentDecal;
	bool SingleFrameLogEnable;
	bool SingleFrameLogOverwrite;
	bool ForceDoubleSided;
	bool OnDemandMonitoringEnable;
	bool Ps3PixelShaderRedundancyCheckingEnable;
	bool Ps3PixelShaderHashStoreEnable;
	bool Ps3DispatchPrepareSpuJobEnable;
	bool Ps3DispatchSetupSpuJobEnable;
	bool Ps3GeometryJobEnable;
	bool DatabaseLoadingEnable;
	bool SimplePixelShaderEnable;
	bool Ps3GeometryJobWithoutDispatchJobEnable;
	bool Ps3GeometryDebugRenderEnable;
	bool BoneConstantOptimizationEnable;
	bool Ps3DrawEdgeGeometryEnable;
	bool Ps3DrawNonEdgeGeometryEnable;
	bool Ps3TriangleCullEnable;
	bool Ps3TriangleFrustumCullEnable;
	bool Ps3TriangleBackfaceCullEnable;
	bool Ps3TriangleCullZPassEnable;
	bool Ps3TriangleCullDoubleSidedEnable;
	bool Ps3TriangleCull1BoneSkinningEnable;
	bool Ps3TriangleCull4BoneSkinningEnable;
	bool Ps3TrianglePartCullEnable;
	bool Ps3DrawBlockCullEnable;
	bool Ps3PartitionFrustumCullEnable;
	bool Ps3PartitionClipPlaneCullEnable;
	bool Ps3PartitionVolumeCullEnable;
	bool Ps3SpuInstancingEnable;
	bool Ps3SpuClipPlaneRejectEnable;
	bool Ps3SpuCullVolumesEnable;
	bool Ps3DispatchJobEnable;
	bool OnDemandBuildingEnable;
	bool OnDemandPrimingEnable;
	bool DispatchExecuteEnable;
	bool TextureGammaCorrectionEnable;
	bool TileClassificationEnable;
	bool Ps3DispatchSpuBufferLinkingEnable;
	bool Ps3DispatchFrameBlockEnable;
	bool Ps3SCullEnable;
	bool Ps3ZCullEnable;
	bool DrawInstancedBlocks;
	bool DispatchPrepareBlockEnable;
	bool DrawNonInstancedBlocks;
	bool DrawNonStreamedTextureBlocks;
	bool Ps3TxpDemotionEnable;
	bool Ps3CmdBufVertexShaderInlineEnable;
	bool Ps3CmdBufClearEnable;
	bool Ps3SpuYieldingEnable;
	bool XenonDispatchJobEnable;
	bool DrawInlineBlocks;
	bool Ps3FlushEnable;
	bool Ps3FinishEnable;
	bool DxMultisampleEnable;
	bool DxTransparencySupersamplingEnable;
	bool DxSamplerStatesEnable;
	bool DxBatchedSamplerStatesEnable;
	bool DxBatchedTexturesEnable;
	bool DxStatesEnable;
	bool DrawOpaqueAlphaTestSimple;
	bool FlushEnable;
	bool DrawTransparent;
	bool DrawAdvancedStats;
	bool DxParallelShaderLoadingEnable;
	bool DxDelayedShaderLoadingEnable;
	bool DrawOpaque;
	bool DrawOpaqueAlphaTest;
	bool XenonHiZEnable;
	bool DrawZOnly;
	bool DrawStats;
	bool XenonDispatchBlockOnCmdBufEnable;
}

class ShaderTextureUnlockPartCollection : ShaderCustomizationUnlockPartCollection {
	TextureReference DefaultTextureReference;
	TextureUnlockPartData[] UnlockParts;
}

class ShootAtFromCoverData : EntityData {
	StrengthType StrengthType;
	ShootType ShootType;
	bool CycleTargets;
	bool RandomTargetOrder;
	bool PreferAlternativeWeapon;
}

class ShootOrderEntityData : BFOrderEntityData {
	StrengthType StrengthType;
	PoseType Pose;
	ShootType ShootType;
	bool PreferAlternativeWeapon;
	bool CompleteWhenHumanIsSensed;
	bool CycleTargets;
	bool RandomTargetOrder;
}

class SimpleAnimationControlComponentData : ComponentData {
	SimpleAnimationControlBinding Binding;
	int32 AnimationEntitySpacePriority;
	bool Run;
}

class SimpleMovementActionBaseData : MovementActionData {
	SimpleMovementActionTimeData StartTimeInfo;
	SimpleMovementActionTimeData RunTimeInfo;
}

class SimpleMovementActionData : SimpleMovementActionBaseData {
	float Level;
	EntryInputActionEnum Action;
	int32 SpecialAnimationIndex;
	bool Respawn;
	bool Teleport;
}

class SimplePropertyTrackData : PropertyTrackData {
	InterpolationType InterpolationType;
}

class SimpleTransformNodeData : AudioGraphNodeData {
	AudioGraphNodePort X;
	AudioGraphNodePort Y;
	AudioGraphNodePort Z;
	SimpleTransformOperation Operation;
	AngleUnit AngleUnit;
}

class SimpleValueSelectorNodeData : AudioGraphNodeData {
	float[] OutValues;
	AudioGraphNodePort Index;
	AudioGraphNodePort Out;
}

class SingleTerrainLayerData : TerrainLayerData {
}

class SkeletonAsset : BaseSkeletonAsset {
	string[] BoneNames;
	int32[] Hierarchy;
	LinearTransform[] LocalPose;
	LinearTransform[] ModelPose;
	string WeaponBoneName;
	string HeadBoneName;
	string HipBoneName;
	string CameraBoneName;
}

class SkeletonCollisionData : DataContainer {
	SkeletonAsset SkeletonAsset;
	BoneCollisionData[] BoneCollisionData;
}

class SkinnedMeshAsset : MeshAsset {
	Vec3 BoundingBoxPositionOffset;
	Vec3 BoundingBoxSizeOffset;
}

class SkinnedSocketObjectData : SocketObjectData {
	int32 FaceposerLibraryIndex;
}

class SkyComponentData : ComponentData {
	Vec3 CloudLayerSunColor;
	Vec3 CloudLayer2Color;
	Vec3 CloudLayer1Color;
	TextureAsset SkyGradientTexture;
	float SunSize;
	float BrightnessScale;
	float SunScale;
	float PanoramicUVMaxX;
	float PanoramicUVMinY;
	float PanoramicUVMaxY;
	Realm Realm;
	float PanoramicUVMinX;
	TextureAsset PanoramicTexture;
	TextureAsset PanoramicAlphaTexture;
	float PanoramicTileFactor;
	TextureAsset CloudLayerMaskTexture;
	float CloudLayer1Altitude;
	float CloudLayer1TileFactor;
	float CloudLayer1Rotation;
	float CloudLayer1Speed;
	float CloudLayer1SunLightIntensity;
	float PanoramicRotation;
	float CloudLayer1AmbientLightIntensity;
	float CloudLayer1SunLightPower;
	float CloudLayer1AlphaMul;
	TextureAsset CloudLayer1Texture;
	float CloudLayer2Altitude;
	float CloudLayer2TileFactor;
	float CloudLayer2Rotation;
	float CloudLayer2Speed;
	float CloudLayer2SunLightIntensity;
	float CloudLayer2SunLightPower;
	float CloudLayer2AmbientLightIntensity;
	float StaticEnvmapScale;
	float CloudLayer2AlphaMul;
	TextureAsset CloudLayer2Texture;
	TextureAsset StaticEnvmapTexture;
	float SkyVisibilityExponent;
	float SkyEnvmap8BitTexScale;
	TextureAsset CustomEnvmapTexture;
	float CustomEnvmapScale;
	float CustomEnvmapAmbient;
	bool Enable;
}

class SkyEffectState : DataContainer {
	Vec3 CloudLayerSunColor;
	float PanoramicTileFactor;
	float SunSize;
	float SkyGradientScale;
	float SunScale;
	float PanoramicUVMinX;
	TextureAsset SkyGradientTexture;
	float PanoramicUVMinY;
	float PanoramicUVMaxY;
	float PanoramicUVMaxX;
	float PanoramicRotation;
	TextureAsset PanoramicTexture;
	TextureAsset PanoramicAlphaTexture;
	float WindDirection;
	TextureAsset CloudLayerMaskTexture;
	SkyCloudLayer CloudLayer1;
	SkyCloudLayer CloudLayer2;
	TextureAsset StaticEnvmapTexture;
	bool Enable;
}

class SlidingStateData : CharacterStateData {
	float HorizontalInputScale;
	float GravityScale;
}

class SlowMotionEntityData : EntityData {
	Realm Realm;
	float TimeScale;
	float ScaleDownTransitionTime;
	float ScaleUpTransitionTime;
}

class SniperLensScopeFilterData : ScopeFilterData {
	Vec2 ChromaticAberrationStrengths;
	Vec2 BlurCenter;
	Vec3 ChromaticAberrationColor1;
	Vec3 ChromaticAberrationColor2;
	Vec2 RadialBlendDistanceCoefficients;
	Vec2 ChromaticAberrationDisplacement1;
	Vec2 ChromaticAberrationDisplacement2;
	float BlurScale;
	ColorTintData ColorTintData;
}

class SocketData : DataContainer {
	LinearTransform BoneRigidTransform;
	LinearTransform Transform;
	UnlockAssetBase UnlockAsset;
	int32 BoneId;
	string BoneName;
	SocketObjectDataBase[] AvailableObjects;
	GearSlot GearSlot;
	SocketType SocketType;
	bool UsesDefaultObject;
	bool Excluded;
	bool DefaultEnableSocketEntities;
	bool ForceSocketEntitiesEnabled;
	bool HideByZoomTransition;
	bool HideByLightToggle;
}

class SocketObjectData : SocketObjectDataBase {
	guid Asset1pGuid;
	guid[] Variation1pGuids;
	guid Asset1pZoomGuid;
	guid[] Variation1pZoomGuids;
	guid Asset3pGuid;
	guid[] Variation3pGuids;
	CustomizedMaterialData[] CustomizedMaterials;
}

class SocketObjectDataBase : DataContainer {
}

class SoldierAimAssistData : GameDataContainer {
	Vec3 EyePosOffset;
	Vec3 StickyBoxScale;
	Vec3 SnapDistanceScale;
	Vec3 SnapBoxScale;
	Vec3 StickyDistanceScale;
	Vec2 MaxAcceleration;
	float AccelerationDamping;
	float AccelerationInputThreshold;
	float AccelerationMultiplier;
	float SquaredAcceleration;
	float YawSpeedStrength;
	float[] ZoomedInputPolynomial;
	float AccelerationTimeThreshold;
	float[] AttractDistanceFallOff;
	float AttractUserInputMultiplier;
	float AttractOwnSpeedInfluence;
	float AttractTargetSpeedInfluence;
	float AttractOwnRequiredMovementForMaximumAttract;
	float AttractStartInputThreshold;
	float AttractZoomingMultiplier;
	float AttractZoomingPostTime;
	float AttractYawStrength;
	float AttractPitchStrength;
	float PitchSpeedStrength;
	float AttractSoftZone;
	float[] InputPolynomial;
	bool UseYawAcceleration;
	bool UsePitchAcceleration;
}

class SoldierAimingConstraintsData : DataContainer {
	AimingConstraintsData SwimmingConstraints;
}

class SoldierAimingSimulationData : GameDataContainer {
	ZoomLevelData[] ZoomLevels;
	float ZoomTransitionTime;
	SoldierAimAssistData AimAssist;
	AimingPoseData StandPose;
	AimingPoseData CrouchPose;
	AimingPoseData PronePose;
	ZoomLevelSpecificTransitionTime[] ZoomTransitionTimeArray;
	float FovTransitionTime;
	float FovDelayTime;
	AimerModifierData[] Modifiers;
	float AimingRange;
	float LockAimToTargetSpeed;
	bool ReturnToZoomAfterReload;
}

class SoldierAsset : SoldierBlueprint {
}

class SoldierAutoAimData : DataContainer {
	AutoAimData[] Poses;
}

class SoldierBlueprint : CharacterBlueprint {
}

class SoldierBodyComponentData : ComponentData {
	float SprintMultiplier;
	float OverrideGravityValue;
	float OverrideVelocityY;
	bool OverrideVelocity;
	bool OverrideGravity;
}

class SoldierCameraComponentData : ComponentData {
	float ExplosionImpulseMultiplier;
	float StrafeTiltStrength;
	float PitchTiltStrength;
	TargetCameraData[] Cameras;
	CameraBinding CameraBinding;
	float ForceFieldOfView;
	bool AuthoritativeEyePosition;
	bool DisableAiming;
}

class SoldierCustomizationAsset : CharacterCustomizationAsset {
	CustomizationTable WeaponTable;
}

class SoldierDecalComponentData : ComponentData {
	DecalTemplateData SplashDecal;
	float SplashRayLength;
	DecalTemplateData PoolDecal;
	float PoolRayYOffset;
	float PoolRayLength;
}

class SoldierEmoteComponentData : ComponentData {
	SoldierEmoteBinding Binding;
	SoldierEmoteNetworkedMessageMapping[] NetworkedMessageMappings;
}

class SoldierEmoteNetworkedMessageMapping : DataContainer {
	SoldierEmote Emote;
	UIMessageType[] Messages;
}

class SoldierEntityData : CharacterEntityData {
	Vec3 FLIRKeyColor;
	MaterialContainerPair HeadMaterialPair;
	BoneFakePhysicsData[] BoneFakePhysics;
	SoldierAutoAimData AutoAim;
	SoldierAimingConstraintsData AimingConstraints;
	SoldierHeadCollisionData HeadCollision;
	CharacterPhysicsData CharacterPhysics;
	MaterialContainerPair FootMaterialPair;
	SoldierSprintSettingsData SprintSettings;
	SoldierMeshData[] Meshes1p;
	SoldierMeshData[] Meshes3p;
	HidableSoldierMeshWeaponPart[] HidableMeshParts;
	SoldierSoundData Sound;
	StreamGroupData StreamGroup1p;
	float ImpulseReactionTime;
	SoldierHealthModuleData HealthModule;
	float MaxHealth;
	CollisionData CollisionInfo;
	EntityVoiceOverInfo VoiceOverInfo;
	float FLIRValue;
	BreathControlData[] BreathControl;
	float ExplosionDamageModifier;
	UIPartData[] UIParts;
	float RegenerationDelayModifier;
	bool FreeSpaceCheck;
	bool ProximityCheck;
	bool EnableGroundmapLighting;
	bool ShowWeaponWhenDead;
	bool LowerGunOnOwnTeam;
	bool UseSpineXRotation;
	bool CollisionEnabled;
	bool PhysicsControlled;
	bool IsPushable;
	bool HumanPlayerControlled;
	bool InteractiveManDownAllowed;
	bool ShowNametag;
}

class SoldierEntityInteractionComponentData : EntityInteractionComponentData {
}

class SoldierEntryComponentData : EntryComponentData {
	AimingConstraintsData AimingConstraints;
	AntEnumeration AntEntryEnumeration;
	bool AlignConstraintsToEntity;
}

class SoldierFootplantEffectComponentData : ComponentData {
	MaterialContainerPair FootMaterialPair;
	float HeightOverGroundThreshold;
	float FootVelocityThreshold;
	float LodDistance;
	bool FullFootplantingEnabled;
}

class SoldierGripComponentData : ComponentData {
}

class SoldierHeadCollisionData : DataContainer {
	float HeadRadius;
	SoldierHeadCollisionPoseData[] PoseStates;
}

class SoldierHealthModuleData : DataContainer {
}

class SoldierMovementSequenceData : MovementActionData {
	RecordedInputData RecordedInput;
	int32 InputRecordingIndex;
	bool IgnoreRecordingIndexFilter;
	bool ReportWhenFinished;
}

class SoldierParachuteComponentData : ComponentData {
	SoldierParachuteBinding Binding;
	AimingConstraintsData AimingConstraints;
	float UndeployTime;
}

class SoldierSoundComponentData : ComponentData {
	float WalkVelocityThreshold;
	float RunVelocityThreshold;
	float WalkPeriod;
	float RunPeriod;
}

class SoldierSoundData : DataContainer {
	SoundAsset Movement;
	SoundAsset Death;
	SoundAsset BulletImpact;
	SoundAsset Healing;
	SoundAsset BreathControl;
	SoundAsset HitIndicator;
	SoundAsset PickupKit;
	SoundAsset PickupAmmo;
	float SprintTimeForRecovery;
	float MovementThreshold;
	float MinHealSoundTime;
}

class SoldierSpawnAppearanceTemplateData : Asset {
	uint32 Body;
}

class SoldierSpawnKitTemplateData : Asset {
	uint32 Kit;
	uint32 MainGun;
}

class SoldierSpawnTemplateData : Asset {
	CustomizeSoldierData CustomizeSoldierData;
	GameSensingTemplateData Sensing;
	GameBehaviourTemplateData Behaviour;
	AnimationSpawnTemplate AnimationTemplate;
	VoiceOverLabel[] VoiceOverLabels;
}

class SoldierSprintSettingsData : DataContainer {
	float Fov;
	float FovInDelay;
	float FovInTime;
	float FovOutDelay;
	float FovOutTime;
	float RecoverTime;
	float SprintToProneRecoverTime;
	EntryInputActionEnum[] InterruptingActions;
}

class SoldierSuppressionComponentData : ComponentData {
	SuppressionReactionData ReactionToSuppression;
	float SuppressionResistModifier;
	float SuppressionBoostModifier;
	float SuppressionDecay;
	float SuppressionSphereRadius;
	float FallOffDelay;
	float FallOffMultiplier;
	bool SuppressionAbortsHealthRegeneration;
	bool CheckLineOfSight;
}

class SoldierTestEntityData : GameEntityData {
	SoldierBlueprint TestSoldier;
	SoldierSpawnTemplateData Template;
	VehicleBlueprint TestVehicle;
	float SpecialAnimationIndex;
	RawFileAsset UnlocksProfile;
	TeamId Team;
	int32 RandomSeed;
	MovementActionData StartSequence;
	MovementActionRoot StartSequenceRoot;
	float YawInputVal;
	string CameraMovementsFilename;
	InputRecorderData InputRecorder;
	float ThrottleInputVal;
	float FireInputVal;
	float StrafeInputVal;
	float ProneInputVal;
	float PitchInputVal;
	float RollInputVal;
	float ZoomInputVal;
	float JumpInputVal;
	float ActiveInputRecording;
	float AuthoritativeAimingActive;
	float FireCounterMeasure;
	float AuthoritativeYaw;
	float AuthoritativePitch;
	bool RunAutomatically;
	bool UseUnlocksProfile;
	bool SprintInputVal;
}

class SoldierWeaponAsset : SoldierWeaponBlueprint {
}

class SoldierWeaponBlueprint : ObjectBlueprint {
}

class SoldierWeaponCustomizationAsset : Asset {
	CustomizationTable Customization;
}

class SoldierWeaponData : WeaponEntityData {
	Vec3 InteractionOffset;
	WeaponModifierData[] WeaponModifierData;
	SoldierAimingSimulationData AimingController;
	FirstPersonCameraData FirstPersonCamera;
	HudData Hud;
	string DamageGiverName;
	PickupSettingsData PickupSettings;
	WeaponAnimBaseSetEnum AnimBaseSet;
	AntPackageAsset AnimationData;
	float RenderFov;
	float ZoomRenderFov;
	StreamGroupData StreamGroup1p;
	EntityVoiceOverInfo VoiceOverInfo;
	QuickThrowTypeEnum QuickThrowType;
	SoldierWeaponCustomizationAsset Customization;
	float WeaponFloatParam;
	SocketData[] Sockets;
	EntryInputActionEnum SwitchWeaponStateInputAction;
	SoldierWeaponBlueprint SoldierWeaponBlueprint;
	string PersistenceId;
	bool AllowSwitchingToWeaponOutOfAmmo;
	bool HideWhenOutOfAmmo;
	bool LowerOnOwnTeam;
	bool RedeployWhenSwitchingWeaponStates;
	bool UseQuickThrowOnAutomaticSwitchback;
	bool EnableBreathControl;
	bool CanBeInSupportedShooting;
	bool AllowSwitchingToWeaponReloading;
	bool SwitchToPrimaryWhenOutOfAmmo;
	bool AllowSwitchingToWeaponInVehicles;
	bool IsSilenced;
}

class SoldierWeaponMultiUnlock : UnlockUserDataBase {
	UnlockAssetBase First;
	UnlockAssetPair[] UnlockAssetPairs;
}

class SoldierWeaponOverrideData : DataContainer {
	WeaponOverrideData[] Overrides;
}

class SoldierWeaponsComponentData : ComponentData {
	LinearTransform AimDir;
	SkeletonAsset WeaponSkeleton;
	int32 PrimaryWeaponId;
	AnimatedWeaponBinding AnimatedWeaponBinding;
	Animated1pOnlyWeaponBinding Animated1pOnlyWeaponBinding;
	Animated3pOnlyWeaponBinding Animated3pOnlyWeaponBinding;
	float LockTimeMultiplier;
	int32 GrenadeIncrease;
	float AmmoClipIncreaseMultiplier;
	float ExplosiveIncreaseMultiplier;
	int32 UnderslungGrenadeIncrease;
	bool UseExternalAimDir;
	bool UnlimitedAmmo;
	bool UnlimitedMags;
}

class SoldierWeaponSwitchingData : Asset {
	WeaponSwitchingMapData[] SwitchMap;
	DirectWeaponSwitchingMapData[] DirectSwitchMap;
	float SwitchToGadgetCooldownTime;
}

class SoldierWeaponUnlockAsset : UnlockAssetBase {
	SoldierWeaponBlueprint Weapon;
	UnlockAssetBase Extra;
	uint32 WeaponIdentifier;
}

class SoundAreaEntityData : EntityData {
	SoundAsset Sound;
	BigWorldSettingsAsset BigWorld;
	float FadeWidth;
	float ProximityMultiplier;
	FadeCurveType FadeCurve;
}

class SoundAsset : Asset {
	SoundScopeData Scope;
}

class SoundBusData : AudioGraphNodeData {
	string BusName;
	SoundGraphPluginRef SubmixPlugin;
	int8 ChannelCount;
}

class SoundDataAsset : Asset {
	uint32 NameHash;
	SoundDataChunk[] Chunks;
}

class SoundEffectEntityData : EffectEntityData {
	SoundAsset Sound;
}

class SoundEntityData : EntityData {
	LinearTransform Transform;
	SoundAsset Sound;
	int32 ObstructionHandle;
	bool PlayOnCreation;
}

class SoundEnvironmentConstantData : Asset {
	float HumanPlayerSoldierMovementVolumeOverride;
	float MemoryTime;
	float MinimumLoudness;
}

class SoundGraphAsset : SoundAsset {
	SoundGraphData Graph;
	MixerAsset Mixer;
}

class SoundGraphData : AudioGraphData {
	SoundGraphInfo Info;
	AudioGraphParameter[] InputParameters;
	AudioGraphParameter[] OutputParameters;
	AudioGraphEvent[] InputEvents;
	AudioGraphEvent[] OutputEvents;
}

class SoundMasterPatchAsset : SoundGraphAsset {
	SoundBusData[] Busses;
	SoundBusData RwMovieBus;
}

class SoundPatchAsset : SoundGraphAsset {
	AudioGraphNodeData[] OutputNodes;
	float Loudness;
	float AILoudness;
	float Radius;
	float DopplerFactor;
	float MasterPitch;
	MixGroup MixGroup;
	AudioGraphEvent DefaultStopEvent;
	AudioGraphEvent DefaultStartEvent;
	AudioGraphEvent DefaultForceInitEvent;
	AudioGraphEvent DefaultEnterScopeEvent;
	bool IsPersistent;
	bool IsLooping;
}

class SoundPatchConfigurationAsset : SoundAsset {
	SoundPatchAsset Sound;
	SoundPatchConfigurationEntry[] Entries;
	float Loudness;
}

class SoundPatchConfigurationAssetEntry : SoundPatchConfigurationEntry {
	uint32 NameHash;
	Asset Value;
}

class SoundPatchConfigurationEntry : DataContainer {
}

class SoundPatchConfigurationParameterEntry : SoundPatchConfigurationEntry {
	uint32 NameHash;
	float Value;
}

class SoundPrimeEntityData : EntityData {
	SoundDataAsset[] DataAssets;
}

class SoundScopeData : DataContainer {
	string Name;
	SoundScopeStrategyData DefaultStrategy;
}

class SoundScopeSetupData : DataContainer {
	string Name;
	SoundScopeStrategyMapping[] Mappings;
}

class SoundScopeSetupEntityData : EntityData {
	SoundScopeSetupData Setup;
}

class SoundScopeStrategyData : DataContainer {
	string Name;
}

class SoundSettings : SystemSettings {
	string VOEnglish;
	string AudioSystemUri;
	string VOCommon;
	string VOItalian;
	string VOSpanish;
	string VOFrench;
	string VOGerman;
	bool Enable;
}

class SoundState : DataContainer {
	string Name;
	float LpCutoffFrequency;
	float Duration;
	float FadeInTime;
	float FadeOutTime;
	SoundAsset BypassSound;
	HdrSetting HdrSetting;
	MixerAsset Mixer;
	bool FadeSound;
}

class SoundStateEntityData : EntityData {
	SoundState SoundState;
}

class SoundStateSettingsAsset : Asset {
	SoundState[] SoundStates;
	float ImpairedHearingImpulseThreshold;
	float ScreamThreshold;
	float SupressionThreshold;
}

class SoundTestAsset : Asset {
	SoundTestTaskSpec[] TaskSpecs;
	SoundTestSpec[] TestSpecs;
	SoundTestSuite[] Suites;
}

class SoundTestEventTask : SoundTestTaskSpec {
	string EventName;
}

class SoundTestParamTask : SoundTestTaskSpec {
	string ParamName;
	SoundTestParamBehavior Behavior;
	float RangeMin;
	float RangeMax;
	float InitialValue;
}

class SoundTestSpec : DataContainer {
	string Name;
	string Description;
	SoundTestTask MainStartTask;
	SoundTestTask MainStopTask;
	float Duration;
	SoundTestTask[] Tasks;
}

class SoundTestSuite : DataContainer {
	string Name;
	SoundAsset[] Assets;
	SoundTestSpec[] Tests;
	bool ProfileTests;
}

class SoundTestTask : DataContainer {
	SoundTestTaskSpec Spec;
	SoundTestTaskParam Param;
	float StartTime;
	uint32 Repetitions;
}

class SoundTestTaskParam : DataContainer {
}

class SoundTestTaskSpec : DataContainer {
	string Description;
	float Duration;
}

class SoundTestTransformTask : SoundTestTaskSpec {
	Vec3 InitialPosition;
	SoundTestTransformBehavior Behavior;
	bool RelativeListener;
}

class SoundWaveAsset : SoundDataAsset {
	SoundWaveVariation[] Variations;
	SoundWaveLocalizationInfo[] Localization;
	string[] SubtitleStringIds;
	SoundWaveVariationSelection Selection;
	StreamPoolAsset StreamPool;
	bool Seekable;
	bool PreferAvailableVariations;
	int8 PersistentVariationCount;
	int8 ChannelCount;
	int8 VoicePriority;
	int8 PrimePriority;
	int8 RequestPriority;
}

class SoundWaveVariation : DataContainer {
	SoundWaveSubtitle[] Subtitles;
	uint32 SeekTablesSize;
	SoundWaveVariationSegment[] Segments;
	int8 ChunkIndex;
	int8 FirstLoopSegmentIndex;
	int8 LastLoopSegmentIndex;
}

class SpatialEntityData : EntityData {
	LinearTransform Transform;
}

class SpatialPrefabBlueprint : PrefabBlueprint {
}

class SpatialReferenceObjectData : ReferenceObjectData {
}

class SpawnAnimationData : ProcessorData {
	float AnimationSpeed;
}

class SpawnAnimationFrameData : ProcessorData {
	uint32 AnimationFrame;
}

class SpawnDirectionData : ProcessorData {
	float DirectionFromEmitterOrigin;
	bool InheritSpeedAndDirectionFromEmitter;
}

class SpawnEntitySelector : DataContainer {
}

class SpawnEvent : MetricEvent {
	Vec3 Position;
	float Time;
}

class SpawnOrientationData : ProcessorData {
}

class SpawnPointManagerData : Asset {
	bool UseAiLodSystem;
}

class SpawnPositionData : ProcessorData {
}

class SpawnRateData : ProcessorData {
	float SpawnRate;
	float TrailSegmentLength;
	bool DistributeOverTime;
	bool DistributeOverDistance;
}

class SpawnReferenceObjectData : ReferenceObjectData {
	LinearTransform AirdropTransform;
	LinearTransform ControllableInput;
	LinearTransform ControllableTransform;
	string LocationNameSid;
	string LocationTextSid;
	TeamId Team;
	uint32 SpawnProtectionFriendlyKilledCount;
	float SpawnProtectionFriendlyKilledTime;
	float RotationRoll;
	float Throttle;
	float InitialSpawnDelay;
	float SpawnDelay;
	int32 MaxCount;
	int32 MaxCountSimultaneously;
	int32 TotalCountSimultaneouslyOfType;
	float SpawnAreaRadius;
	float SpawnProtectionRadius;
	float RotationYaw;
	float RotationPitch;
	float InitialVelocity;
	int32 TakeControlEntryIndex;
	bool SpawnProtectionCheckAllTeams;
	bool ClearBangersOnSpawn;
	bool TryToSpawnOutOfSight;
	bool SendWeaponEvents;
	bool TakeControlOnTransformChange;
	bool ReturnControlOnIdle;
	bool AutoSpawn;
	bool UseAsSpawnPoint;
	bool LockedTeam;
	bool InitialAutoSpawn;
	bool OverwriteThrottle;
	bool OnlySendEventForHumanPlayers;
	bool Enabled;
	bool IsDynamicSpawn;
}

class SpawnRotationData : ProcessorData {
	float Rotation;
}

class SpawnRotationSpeedData : ProcessorData {
	float RotationSpeed;
}

class SpawnSizeData : ProcessorData {
	float Size;
}

class SpawnSpeedData : ProcessorData {
	float Speed;
}

class SpawnState : MetricState {
	int32 Team;
}

class SpawnSubViewData : SubViewData {
}

class SpawnSurveyEvent : MetricEvent {
	guid SurveyMetricLink;
}

class SpecialMovesComponentData : ComponentData {
	SpecialMoveStateData VaultOverHighState;
	SpecialMoveStateData VaultUpHighState;
	SpecialMoveStateData VaultOverLowState;
	SpecialMoveStateData SprintToProneState;
	SpecialMoveStateData DeathState;
	SpecialMoveStateData SpecialAnimationState;
	SpecialMoveStateData[] IndexedDeathStates;
	SpecialMoveStateData[] IndexedSpecialAnimationStates;
	SpecialMoveVaultStateCriteria[] IndexedVaultOverHighStates;
	SpecialMoveVaultStateCriteria[] IndexedVaultUpStates;
	SpecialMoveVaultStateCriteria[] IndexedVaultOverLowStates;
	SpecialMovesBinding Binding;
}

class SpectatorReplayEntityData : EntityData {
}

class SpectatorSubViewData : SubViewData {
}

class SpeedEventGateEntityData : GameEntityData {
	float MinSpeed;
	float MaxSpeed;
}

class SphereData : BaseShapeData {
	Vec3 Position;
	float Radius;
}

class SphereEvaluatorData : EvaluatorData {
	Vec3 Scale;
	Vec3 Pivot;
	float Radius;
}

class SplitterNode : UINodeData {
	UINodePort In;
	UINodePort[] Outputs;
}

class SpotLightEntityData : LocalLightEntityData {
	SpotLightShape Shape;
	float ConeInnerAngle;
	float ConeOuterAngle;
	float FrustumFov;
	float FrustumAspect;
	float OrthoWidth;
	float OrthoHeight;
	TextureAsset Texture;
	QualityLevel CastShadowsMinLevel;
	bool CastShadowsEnable;
}

class SpottingComponentData : ComponentData {
	float SpottingFov;
	float TeamOrderFov;
	float SpottingDistance;
	float PassiveSpottingTimeInterval;
	float TimeRequiredToPassiveSpot;
	float OrderNeedAmmoPercentage;
	float OrderHealPercentage;
	float OrderRepairPercentage;
	float PickupOrderDistance;
	float HealOrderDistance;
	float AmmoOrderDistance;
	float RepairOrderDistance;
	float CoolDownHistoryTime;
	int32 CoolDownAllowedSpotsWithinHistory;
	bool OnlyAllowedToHaveOneSpottedPlayer;
}

class SpottingEntityData : EntityData {
	Realm Realm;
	TeamId TeamToSpot;
	bool Enabled;
}

class SpottingScoringHandlerData : ScoringHandlerData {
}

class SpottingTargetComponentData : ComponentData {
	float ActiveSpottedTime;
	float PassiveSpottedTime;
	float ActiveSpottedTimeMultiplier;
	float PassiveSpottedTimeMultiplier;
	float SpotOnFireMultiplier;
	bool TargetBoundingBoxCenter;
}

class StabilizerData : DataContainer {
	float PitchStrength;
	float RollStrength;
	float VerticalVelocityStrength;
	float YawStrength;
	bool AdvancedYaw;
	bool Advanced;
}

class StanceFilterComponentData : ComponentData {
	int32[] ValidStances;
	float StanceChangeTime;
	ActionSuppressor[] ActionsToFilter;
	bool FilterSpecificActions;
	bool UndoParentStanceFilter;
}

class StandardMoveWaypointData : AbstractLocoWaypointData {
	AILocoMoveTaskData MoveTask;
}

class StartEntityData : EntityData {
	float SortIndex;
	string StartName;
	bool IsDefault;
}

class StatCategoriesAwardTree : StatCategoriesGuidTree {
}

class StatCategoriesBaseTree : TreeBase {
	StatsCategoryBaseData[] RootBaseCategories;
	CriteriaData[] ParamX;
	CriteriaData[] ParamY;
	bool ProcessAllLevelsInTree;
}

class StatCategoriesDifficultyTree : StatCategoriesGuidTree {
}

class StatCategoriesGuidTree : StatCategoriesBaseTree {
}

class StatCategoriesKitTree : StatCategoriesGuidTree {
}

class StatCategoriesLevelTree : StatCategoriesGuidTree {
}

class StatCategoriesPlayerRoleTree : StatCategoriesBaseTree {
}

class StatCategoriesScoreboardPositionTree : StatCategoriesBaseTree {
}

class StatCategoriesScoringBucketTree : StatCategoriesGuidTree {
}

class StatCategoriesTree : StatCategoriesBaseTree {
	StatsCategoryData[] Categories;
}

class StatCategoriesVehicleStateTypeTree : StatCategoriesBaseTree {
}

class StatCategoriesVehicleTree : StatCategoriesGuidTree {
}

class StatCategoriesVehicleWeaponTree : StatCategoriesGuidTree {
}

class StatCategoriesWeaponAccessoryTree : StatCategoriesGuidTree {
}

class StatCategoriesWeaponTree : StatCategoriesGuidTree {
}

class StatCategoryTreeCollection : Asset {
	StatCategoriesBaseTree[] CategoryTrees;
}

class StateEventGateEntityData : GameEntityData {
	EventGateState CheckedState;
}

class StateNode : UINodeData {
	UIScreenAsset Screen;
	UINodePort In;
	UINodePort Show;
	UINodePort Hide;
	UINodePort[] Inputs;
	UINodePort[] Outputs;
	bool RenderToTexture;
}

class StateRenderSettings : DataContainer {
	bool Ps3PixelShaderConstantsEnable;
}

class StatEventTriggerEntityData : GameEntityData {
	StatEvent StatEvent;
	string MiscParamX;
	string MiscParamY;
	bool SendToAll;
}

class StaticCameraData : TargetCameraData {
	Vec3[] LeftCurve;
	Vec3[] RightCurve;
	Vec3[] UpCurve;
	Vec3[] DownCurve;
	float UpPitchAngle;
	EntryInputActionEnum YawInputAction;
	CameraLoosePartPhysicsData[] LoosePartPhysics;
	float LeftYawAngle;
	float RightYawAngle;
	float PitchSensitivityZoomed;
	float DownPitchAngle;
	int32 AverageFilterFrames;
	EntryInputActionEnum PitchInputAction;
	float YawSensitivityZoomed;
	float PitchSensitivityNonZoomed;
	float YawSensitivityNonZoomed;
	bool ResetAccumulatedInputOnViewChange;
	bool MirrorHorizontalCurves;
	bool AccumulateInput;
	bool MirrorVerticalCurves;
}

class StaticConfigAsset : Asset {
}

class StaticEnlightenData : Asset {
	TextureAsset StaticIrradianceChromaTexture;
	TextureAsset StaticIrradianceLumaTexture;
	TextureAsset StaticDirectionTexture;
}

class StaticEnlightenEntityData : EnlightenEntityData {
	StaticEnlightenData EnlightenData;
	EnlightenDataAsset DynamicEnlightenData;
}

class StaticModelEntityData : GamePhysicsEntityData {
	PartLinkData[] PartLinks;
	MeshAsset Mesh;
	uint32 BoneCount;
	LinearTransform[] BasePoseTransforms;
	StaticModelNetworkInfo NetworkInfo;
	PhysicsPartInfo[] PhysicsPartInfos;
	bool ExcludeFromNearbyObjectDestruction;
	bool AnimatePhysics;
	bool Visible;
}

class StaticModelGroupEntityData : GamePhysicsEntityData {
	StaticModelGroupMemberData[] MemberDatas;
	guid HackToSolveRealTimeTweakingIssue;
	uint32 NetworkIdCount;
}

class StaticUnlockList : Asset {
	BasicUnlockInfo[] UnlockInfos;
}

class StatsCategoryAwardData : StatsCategoryGuidData {
}

class StatsCategoryBaseData : TreeNodeBase {
	StatsCategoryBaseData[] BaseSubCategories;
	string Code;
}

class StatsCategoryData : StatsCategoryBaseData {
	StatsCategoryData[] Categories;
	string[] Members;
}

class StatsCategoryDifficultyData : StatsCategoryGuidData {
}

class StatsCategoryGuidData : StatsCategoryBaseData {
	guid[] ObjectInstanceGuids;
}

class StatsCategoryKitData : StatsCategoryGuidData {
}

class StatsCategoryLevelData : StatsCategoryGuidData {
}

class StatsCategoryPlayerRoleData : StatsCategoryBaseData {
	PlayerRole[] Roles;
}

class StatsCategoryScoreboardPositionData : StatsCategoryBaseData {
	ScoreboardPosition[] Positions;
}

class StatsCategoryScoringBucketData : StatsCategoryGuidData {
}

class StatsCategoryVehicleData : StatsCategoryGuidData {
	uint32 FirstVehicleId;
}

class StatsCategoryVehicleStateTypeData : StatsCategoryBaseData {
	VehicleStateType[] States;
}

class StatsCategoryVehicleWeaponData : StatsCategoryGuidData {
}

class StatsCategoryWeaponAccessoryData : StatsCategoryGuidData {
}

class StatsCategoryWeaponData : StatsCategoryGuidData {
	uint32 SoldierWeaponId;
	CriteriaGateList AccessoryUnlockGates;
	BasicUnlockInfo[] UnlocksInfo;
}

class StatSpamSettings : Asset {
	StatSpamSetting[] SpamList;
}

class StatSurveyEvent : MetricEvent {
	guid SurveyMetricLink;
}

class StopWatchEntityData : EntityData {
	Realm Realm;
	UpdatePass UpdatePass;
	float Multiplier;
	float TriggerOnTime;
}

class StreamGridEntityData : SpatialEntityData {
	float CellSize;
	float ViewDistance;
	int32 MaxStreamInCountPerFrame;
	int32 MaxStreamOutCountPerFrame;
	StreamGridCell[] Cells;
}

class StreamGroupData : DataContainer {
	Asset[] Assets;
}

class StreamingGateEntityData : EntityData {
	float Timeout;
}

class StreamPoolAsset : Asset {
	uint32 StreamPoolId;
	uint32 StreamBufferSizeXenon;
	uint32 StreamBufferSizePs3;
	uint32 StreamBufferSizeWin32;
	uint32 StreamCountXenon;
	uint32 StreamCountPs3;
	uint32 StreamCountWin32;
	uint32 StreamReadBlockSizeXenon;
	uint32 StreamReadBlockSizePs3;
	uint32 StreamReadBlockSizeWin32;
	StreamStarveMode StreamStarveMode;
}

class SubtitleDataNode : TreeNodeBase {
	float Time;
	float DisplayTime;
	string SID1;
	string SID2;
}

class SubtitleDataTree : TreeBase {
	SubtitleMainDataNode[] Subtitles;
}

class SubtitleMainDataNode : TreeNodeBase {
	LanguageFormat Language;
	SubtitleDataNode[] Subtitles;
}

class SubViewData : DataContainer {
}

class SubWorldData : SpatialPrefabBlueprint {
	RegistryContainer RegistryContainer;
	bool IsWin32SubLevel;
	bool IsXenonSubLevel;
	bool IsPs3SubLevel;
	bool RememberStateOnStreamOut;
}

class SubWorldInclusion : Asset {
	SubWorldInclusionCriterion[] Criteria;
}

class SubWorldInclusionCriterion : DataContainer {
	string Name;
	string[] Options;
}

class SubWorldInclusionSetting : DataContainer {
	SubWorldInclusionCriterion Criterion;
	string[] EnabledOptions;
}

class SubWorldInclusionSettings : DataContainer {
	SubWorldInclusionSetting[] Settings;
}

class SubWorldReferenceObjectData : ReferenceObjectData {
	string BundleName;
	SubWorldInclusionSettings InclusionSettings;
	bool AutoLoad;
	bool IsWin32SubLevel;
	bool IsXenonSubLevel;
	bool IsPs3SubLevel;
}

class SunFlareComponentData : ComponentData {
	Vec4 Element5AlphaScreenPosCurve;
	Vec4 Element5AlphaOccluderCurve;
	Vec4 Element5SizeScreenPosCurve;
	Vec4 Element2SizeOccluderCurve;
	Vec4 Element5SizeOccluderCurve;
	Vec4 Element2AlphaOccluderCurve;
	Vec4 Element2AlphaScreenPosCurve;
	Vec2 Element1Size;
	Vec4 Element1SizeOccluderCurve;
	Vec4 Element1SizeScreenPosCurve;
	Vec4 Element1AlphaOccluderCurve;
	Vec4 Element1AlphaScreenPosCurve;
	Vec2 Element5Size;
	Vec4 Element4SizeOccluderCurve;
	Vec2 Element3Size;
	Vec2 Element2Size;
	Vec4 Element4AlphaScreenPosCurve;
	Vec4 Element2SizeScreenPosCurve;
	Vec4 Element4SizeScreenPosCurve;
	Vec2 Element4Size;
	Vec4 Element3AlphaScreenPosCurve;
	Vec4 Element4AlphaOccluderCurve;
	Vec4 Element3SizeOccluderCurve;
	Vec4 Element3SizeScreenPosCurve;
	Vec4 Element3AlphaOccluderCurve;
	SurfaceShaderBaseAsset Element1Shader;
	float OccluderSize;
	SurfaceShaderBaseAsset Element2Shader;
	float Element3RayDistance;
	SurfaceShaderBaseAsset Element4Shader;
	float Element4RayDistance;
	float Element2RayDistance;
	float Element1RayDistance;
	float Element5RayDistance;
	SurfaceShaderBaseAsset Element3Shader;
	Realm Realm;
	SurfaceShaderBaseAsset Element5Shader;
	bool Element5Enable;
	bool Element3Enable;
	bool Element2Enable;
	bool Element1Enable;
	bool DebugDrawOccluder;
	bool Enable;
	bool Element4Enable;
}

class SunFlareEffectState : DataContainer {
	Vec4 Element5AlphaScreenPosCurve;
	Vec4 Element5AlphaOccluderCurve;
	Vec4 Element2SizeScreenPosCurve;
	Vec4 Element5SizeScreenPosCurve;
	Vec4 Element2AlphaOccluderCurve;
	Vec4 Element2AlphaScreenPosCurve;
	Vec2 Element1Size;
	Vec4 Element1SizeOccluderCurve;
	Vec4 Element1SizeScreenPosCurve;
	Vec4 Element1AlphaOccluderCurve;
	Vec4 Element1AlphaScreenPosCurve;
	Vec4 Element5SizeOccluderCurve;
	Vec4 Element4SizeScreenPosCurve;
	Vec2 Element3Size;
	Vec2 Element2Size;
	Vec4 Element2SizeOccluderCurve;
	Vec4 Element4AlphaScreenPosCurve;
	Vec4 Element3SizeOccluderCurve;
	Vec2 Element4Size;
	Vec2 Element5Size;
	Vec4 Element3SizeScreenPosCurve;
	Vec4 Element3AlphaOccluderCurve;
	Vec4 Element4SizeOccluderCurve;
	Vec4 Element3AlphaScreenPosCurve;
	Vec4 Element4AlphaOccluderCurve;
	SurfaceShaderBaseAsset Element3Shader;
	SurfaceShaderBaseAsset Element2Shader;
	float OccluderSize;
	SurfaceShaderBaseAsset Element4Shader;
	float Element4RayDistance;
	SurfaceShaderBaseAsset Element1Shader;
	float Element2RayDistance;
	float Element1RayDistance;
	float Element5RayDistance;
	float Element3RayDistance;
	SurfaceShaderBaseAsset Element5Shader;
	bool Element5Enable;
	bool Element4Enable;
	bool Element3Enable;
	bool Element2Enable;
	bool Element1Enable;
	bool DebugDrawOccluder;
	bool Enable;
}

class SupplySphereComponentData : ComponentData {
	SupplyData SupplyData;
}

class SupplySphereEntityData : ExplosionPackEntityData {
	SupplyData SupplyData;
}

class SupplySphereWeaponData : WeaponData {
	SupplyData SupplyData;
}

class SupportedShootingCommonData : Asset {
	AimingConstraintsData AimingConstraints;
	EntryInputActionEnum EnterSupportedShootingAction;
	SupportedShootingBinding Binding;
	SupportedShootingProximityChecking Stand;
	SupportedShootingProximityChecking Crouch;
}

class SupportedShootingComponentData : ComponentData {
	SupportedShootingCommonData CommonData;
}

class SuppressionScoringHandlerData : ScoringHandlerData {
	float SuppressionAmountLimit;
	float TimeSinceSuppressionLimit;
}

class SuppressionSettings : DataContainer {
}

class SurfaceShaderBaseAsset : Asset {
}

class SurfaceShaderInstanceData : DataContainer {
	SurfaceShaderBaseAsset Shader;
}

class SurroundingGeometryEntityData : GameEntityData {
	AllowedVehiclesData AllowedVehicleList;
	CombatAreaTriggerEntityData CombatArea;
	uint32 CombatAreaIndex;
}

class SurveyEvent : MetricEvent {
	string SurveyName;
	int32 AnswerQuestion1;
	int32 AnswerQuestion2;
	int32 AnswerQuestion3;
	int32 AnswerQuestion4;
	int32 AnswerQuestion5;
	string FreeTextField;
	guid SurveyMetricLink;
}

class SurveySuppressedEvent : MetricEvent {
	string SuppressReason;
}

class SwimmingStateData : CharacterStateData {
	float BodyUnderWater;
}

class SwitcherEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort CaseTrigger;
	float CaseValue;
}

class SwitcherNodeData : AudioGraphNodeData {
	SwitcherEntry[] Outputs;
	AudioGraphNodePort Trigger;
	AudioGraphNodePort Value;
	float DefaultCaseValue;
}

class SwitchPropertyStringEntityData : EntityData {
	string[] StringProperties;
	Realm Realm;
}

class SyncAnimationsEntityData : EntityData {
	float ExternalTime;
	float NearEndEventTime;
	bool StartServerPaused;
}

class SyncedBFSettings : SystemSettings {
	float GameModeCounterModifier;
	bool UnlicensedUnlocksUnlocked;
	bool NoMinimap;
	bool NoHud;
	bool NoMinimapSpotting;
	bool No3dSpotting;
	bool NoNameTag;
	bool OnlySquadLeaderSpawn;
	bool TeamSwitchingAllowed;
	bool MemoryDefragUI;
	bool MemoryGarbageCollectHavok;
	bool MemoryDefragGlobal;
	bool AllUnlocksUnlocked;
}

class SyncedBoolEntityData : EntityData {
	bool In;
}

class SyncedFloatEntityData : EntityData {
	float In;
}

class SyncedGameSettings : SystemSettings {
	float MaxAllowedLatency;
	float ManDownTimeModifier;
	float BulletDamageModifier;
	uint32 DifficultyIndex;
	bool DisableRegenerateHealth;
	bool EnableFriendlyFire;
	bool AllowClientSideDamageArbitration;
	bool DisableToggleEntryCamera;
}

class SyncedIntEntityData : EntityData {
	int32 In;
}

class SyncedSequenceEntityData : SequenceEntityData {
	bool InterpolateTime;
}

class SyncedTransformEntityData : EntityData {
	LinearTransform In;
	bool Interpolate;
}

class SystemSettings : DataContainer {
	string Name;
}

class TacticalObjectiveEntityData : GameEntityData {
	string MissionSid;
	string BriefingSidTeam1;
	string BriefingSidTeam2;
	float Team1Timer;
	float Team2Timer;
}

class TargetCameraData : CameraData {
	HudData Hud;
	UIPartData[] UIParts;
}

class TargetCameraEntityData : CameraEntityBaseData {
	TargetCameraData Camera;
}

class TargetEntityData : GamePhysicsEntityData {
}

class TargetEvaluationConstantData : Asset {
	float MaxBattleStrength;
	float DefaultHumanTargetPreference;
	float OtherSquadAttackerFactorUsage;
	float TargetFlipFactorUsage;
}

class TargetEvaluatorComponentData : ComponentData {
	float UpdateInterval;
}

class TeamAsset : Asset {
}

class TeamData : TeamAsset {
	SoldierBlueprint Soldier;
	FactionId Faction;
	SoldierCustomizationAsset[] SoldierCustomization;
	VehicleCustomizationAsset[] VehicleCustomization;
}

class TeamEntityData : GameEntityData {
	TeamData Team;
	TeamId Id;
}

class TeamFilterEntityData : GameEntityData {
	Realm Realm;
	TeamId Team;
	bool InvertFilter;
	bool GenerateEventForEveryMatchingTeamMember;
}

class TelemetryTriggerEntityData : EntityData {
	Realm Realm;
	string Value;
}

class TerrainColorTreeAsset : RasterTreeAsset {
}

class TerrainData : Asset {
}

class TerrainDecalsData : Asset {
}

class TerrainEntityData : GamePhysicsEntityData {
	TerrainData TerrainAsset;
	MaterialContainerPair WaterMaterial;
	bool Visible;
}

class TerrainFillDecalData : VisualVectorShapeData {
	SurfaceShaderBaseAsset Shader2d;
	SurfaceShaderBaseAsset Shader3dZOnly;
}

class TerrainHeightfieldData : DataContainer {
}

class TerrainLayerData : DataContainer {
}

class TerrainMaskTreeAsset : RasterTreeAsset {
}

class TerrainMaterialMapAsset : Asset {
}

class TerrainMaterialTreeAsset : RasterTreeAsset {
}

class TerrainMeshScatteringType : DataContainer {
}

class TerrainQuadDecalAtlasTileTemplateData : Asset {
	TerrainQuadDecalAtlasTile AtlasTile;
}

class TerrainQuadDecalData : VisualVectorShapeData {
	Vec4 UserMasks;
	SurfaceShaderBaseAsset Shader3dZOnly;
	SurfaceShaderBaseAsset Shader2d;
	TerrainQuadDecalAtlasTileTemplateData AtlasTileTemplate;
	TerrainQuadDecalAtlasTile AtlasTile;
}

class TerrainSettings : DataContainer {
	uint32 HeightQueryCacheSize;
	uint32 ModifiersCapacity;
	uint32 IntersectingModifiersMax;
	float ModifierDepthFactor;
	float ModifierSlopeMax;
	bool ModifiersEnable;
}

class TerrainStreamingSettings : DataContainer {
	uint32 DataLoadJobCount;
	uint32 ActiveFreeStreamingDataLoadJobCount;
	uint32 HeightfieldAtlasSampleCountXFactor;
	uint32 AdditionalBlurriness;
	float InvisibleDetailReductionFactor;
	float OccludedDetailReductionFactor;
	uint32 HeightfieldAtlasSampleCountYFactor;
	uint32 MaskAtlasSampleCountYFactor;
	uint32 ColorAdditionalBlurriness;
	uint32 MaskAtlasSampleCountXFactor;
	uint32 MaskAdditionalBlurriness;
	uint32 ColorAtlasSampleCountXFactor;
	uint32 ColorAtlasSampleCountYFactor;
	bool KeepPoolFullEnable;
	bool LoadOccluderDataEnable;
}

class TerrainStreamingTreeAsset : Asset {
}

class TerrainSubLayerData : DataContainer {
}

class TerrainUndergrowthType : DataContainer {
}

class TestCaseEntityData : EntityData {
	float TimeOut;
	string TestGroup;
	string TestCaseName;
	bool Stable;
	bool Enabled;
}

class TestPointEntityData : GameEntityData {
	string OutputName;
}

class TextUnlockPartData : DataContainer {
	string ShaderNodeName;
	ObjectBlueprint MeshBlueprint;
}

class TextureArrayAsset : TextureAsset {
}

class TextureAsset : TextureBaseAsset {
}

class TextureAssetUnlockPartData : DataContainer {
	TextureAsset Texture;
}

class TextureAtlasAsset : Asset {
}

class TextureBaseAsset : Asset {
}

class TextureCompressSettings : DataContainer {
	TextureCompressQualityMode ViewMode;
	uint32 TextureCompressJobPoolSize;
	float DebugDrawAlphaOverlayScale;
	bool DebugDrawEnable;
}

class TextureGroup : Asset {
}

class TextureReference : Asset {
	TextureAsset Texture;
}

class TextureSettings : DataContainer {
	uint32 SkipMipmapCount;
	bool LoadingEnabled;
	bool RenderTexturesEnabled;
}

class TextureSliceUnlockPartData : DataContainer {
	int32 SliceIndex;
}

class TextureStreamingSettings : DataContainer {
	float FadeMipmapTime;
	float MipmapBias;
	uint32 MaxTextureSizeKb;
	uint32 MaxFrameTextureCreateCount;
	uint32 MaxPendingLoadCount;
	uint32 MinMipmapCount;
	uint32 MaxMipmapCount;
	uint32 XenonFinalPoolSizeAdjustment;
	uint32 XenonRetailPoolSizeAdjustment;
	uint32 PoolHeadroomSize;
	uint32 OnDemandPoolSize;
	uint32 ListViewPageIndex;
	uint32 PoolSize;
	int32 ForceMipmap;
	float PriorityThreshold;
	uint32 DefragFrameTransferLimit;
	uint32 MinTextureSize;
	uint32 MaxFrameTextureCreateSize;
	bool OnlyWantedInPool;
	bool DxImmutableUsageEnable;
	bool MipmapsEnable;
	bool UploadMipmapsEnable;
	bool TextureUpdateEnable;
	bool AsyncCreatesEnable;
	bool LoadMipmapsEnable;
	bool ForceWantedEnable;
	bool UpdateEnable;
	bool PoolEnable;
	bool DefragEnable;
	bool DefragTransfersEnable;
	bool ChunkLoadEnable;
	bool InstantUnloadingEnable;
	bool FadeMipmapsEnable;
	bool DynamicLoadingEnable;
	bool Enable;
	bool DrawStatsEnable;
	bool DrawTextureGroupStatsEnable;
	bool DrawTextureFormatStatsEnable;
	bool DrawLoadingListEnable;
	bool DrawPriorityListEnable;
	bool OverridePoolSize;
	bool DumpLoadedList;
	bool UseConditionalStreaming;
}

class TextureUnlockPartData : DataContainer {
	TextureReference TextureReference;
}

class TicketCounterEntityData : GameEntityData {
	TicketCountPercentage[] TicketPercentages;
	int32 TicketLossPerMin;
	TicketDecreaseType DecreaseTickets;
	TeamId TeamId;
	int32 TicketLossWhenLostAll;
	int32 TicketLossWhenLostAllControlsPoint;
	int32 InitialTicketCount;
	int32 TicketLossStart;
	bool SetBestSquadSpawner;
	bool HaltTicketLossOnEqualPointCount;
	bool ResetCapturePointsOnReset;
	bool SpawnAlwaysAllowed;
}

class TickEvent : MetricEvent {
	Vec3 Position;
	float Time;
}

class TimerNodeData : AudioGraphNodeData {
	AudioGraphNodePort Start;
	AudioGraphNodePort Stop;
	AudioGraphNodePort Period;
	AudioGraphNodePort Tick;
	AudioGraphNodePort Progress;
	TimerMode Mode;
}

class TimingConstantData : Asset {
	float UpdateTimePerFrame;
	SubsystemTimingConfigData SubsystemTimeParts;
	BotPriorityConfigData[] PriorityClasses;
}

class TimingViewCategories : Asset {
	TimingViewCategory[] TimingCategories;
}

class TimingViewCategory : DataContainer {
	string CategoryName;
	string[] Keywords;
	float SpuBudget;
	float CpuBudget;
	float GpuBudget;
}

class TimingViewSettings : DataContainer {
	uint32 MaxFrameEventCount;
	uint32 FrameCount;
	uint32 FrameDelayCount;
	float TimeRange;
	float TimeOffset;
	float AutolockThreshold;
	string AutolockNameFilter;
	int32 LegendScreenOffset;
	int32 LegendColumnWidth;
	int32 LegendDisplayMode;
	int32 AverageFrameCount;
	int32 MaxGpuLegendColumnCount;
	string SnoopEventName;
	int32 GpuBarFrameOffset;
	int32 MaxCpuLegendColumnCount;
	uint32 BarPad;
	int32 MaxSpuLegendColumnCount;
	int32 BarSyncProcessor;
	double BarMinTime;
	uint32 BarHeight;
	string FilterEventName;
	bool SnoopOnly;
	bool DrawEnable;
	bool DrawSpuLegendEnable;
	bool SnoopEnable;
	bool FilterEnable;
	bool DrawBarsEnable;
	bool DrawLegendEnable;
	bool DrawOnlySummaryEnable;
	bool SortByTime;
	bool DrawCpuLegendEnable;
	bool DrawGpuLegendEnable;
	bool Enable;
}

class TonemapComponentData : ComponentData {
	Vec3 BloomScale;
	Realm Realm;
	TonemapMethod TonemapMethod;
	float MinExposure;
	float MiddleGray;
	float ExposureAdjustTime;
	float MaxExposure;
	float ChromostereopsisOffset;
	float ChromostereopsisScale;
	bool ChromostereopsisEnable;
}

class ToolData : DataContainer {
	bool IsAlwaysActive;
}

class TopPlayersEntityData : EntityData {
}

class ToWorldSpaceTransformEntityData : EntityData {
	LinearTransform In1;
	Realm Realm;
}

class TrackComponentData : MeshComponentData {
	float ScrollFactor;
}

class TrackPlayerEntityData : GameEntityData {
	float SnapHeightOffsetY;
	bool RandomizeTracker;
	bool SnapHeightOnKilledDestroyed;
	bool CheckPlayerAlive;
	bool EnforceSharedCombatArea;
	bool UpdateFlagComponent;
	bool TrackMultiplePlayers;
	bool Reseted;
}

class TrackWheelComponentData : WheelComponentData {
	string BoneName;
}

class TrajectoryEntityData : EntityData {
	LinearTransform OutTransform;
}

class TransformBlendEntityData : EntityData {
	LinearTransform In2;
	LinearTransform In1;
	float BlendValue;
	float BlendValue2;
	Realm Realm;
}

class TransformEntityData : EntityData {
	LinearTransform DefaultTransform;
	Realm Realm;
}

class TransformHubEntityData : EntityData {
	LinearTransform In4;
	LinearTransform In1;
	LinearTransform In2;
	LinearTransform In3;
	LinearTransform In8;
	LinearTransform In5;
	LinearTransform In6;
	LinearTransform In7;
	Realm Realm;
}

class TransformModifierEntityData : EntityData {
	LinearTransform In;
	Realm Realm;
	ModifierAxis Left;
	ModifierAxis Up;
	ModifierAxis Forward;
	bool InvertLeft;
	bool InvertUp;
	bool InvertForward;
}

class TransformMultiplierEntityData : EntityData {
	LinearTransform In1;
	LinearTransform In2;
	Realm Realm;
}

class TransformPartPropertyTrackData : PropertyTrackData {
	TransformPart TransformPart;
	CurveInfinityType PreInfinity;
	CurveInfinityType PostInfinity;
	uint32 KeyStartIndex;
	string ResourceName;
	uint32 KeyCount;
	bool Weighted;
	bool IsStatic;
}

class TransformPropertyTrackData : SimplePropertyTrackData {
	LinearTransform[] Values;
}

class TransformSelectorEntityData : EntityData {
	LinearTransform In1;
	LinearTransform In2;
	Realm Realm;
	bool Selection;
}

class TransformSnapToGroundEntityData : EntityData {
	LinearTransform In;
	Realm Realm;
	float DistanceToGround;
	float RayCastLength;
	float RayCastUpOffset;
	bool AlignWithGroundNormal;
}

class TransformSplitterEntityData : EntityData {
	LinearTransform Transform;
	Realm Realm;
}

class TreeBase : Asset {
}

class TreeNodeBase : DataContainer {
	string NodeName;
}

class TriggerEntityData : GameEntityData {
	float Delay;
	bool RunOnce;
}

class TriggerEventEntityData : TriggerEntityData {
}

class TurbulanceData : ProcessorData {
	float Intensity;
}

class TurretControlConstantData : Asset {
	float SearchLookSpeed;
	float SlowLookSpeed;
	float NormalLookSpeed;
	float FastLookSpeed;
}

class TurretData : DataContainer {
	float PitchP;
	float YawP;
	float FakeShootSpaceMinDistance;
	float FakeShootSpaceMaxDistance;
	AIAimingConstraintsData AimingConstraints;
}

class UavCameraData : TargetCameraData {
	float ViewDistance;
	CameraSineCurveData[] ViewDistanceCurve;
	float ViewAngle;
	CameraSineCurveData[] ViewAngleCurve;
	float RotationSpeed;
	CameraSineCurveData[] RotationSpeedCurve;
	float ZoomFov;
	float ZoomDelay;
	float ZoomTransitionTime;
	float Fov;
	UavCameraPointData FocusPoint;
	UavCameraPointData CenterPoint;
	float UpWeightDistance;
}

class UI3dIconCompData : UIComponentData {
	Vec2 PixelOffset;
	float IconSize;
	float MaxFarFade;
	float MaxCloseFade;
	float SnapSafeZone;
	float SnapCenterYOffset;
	float ShrinkSnapAnimationTime;
	float TrackerHudRadiusX;
	float TrackerHudRadiusY;
	float MaxLookAtThreshold;
	float MinLookAtThreshold;
	float MinLookAtThresholdDistance;
	float DrawDistance;
	float FadeDistance;
	float FadeEndDistance;
	float MinimumDrawDistance;
	float MinimumFadeDistance;
	int32 MaxTagUpdatesPerFrame;
	float VerticalOffset;
	float ShowLabelRange;
	float TeamRadioDistance;
	float ScaleDistance;
	float MaxScaleMod;
	float MaxXRotation;
	float MaxYRotation;
	float HorisontalOffset;
	float ShowSupportAmmoThreshold;
	float VerticalOffsetMaxOffset;
	float VerticalOffsetScaleFactor;
	float ShowEngineerArmorThreshold;
	float ShowMedicHealthThreshold;
	bool SnapIcons;
	bool CircularSnap;
	bool OnlyShowSnapped;
}

class UI3dLaserTagCompData : UI3dIconCompData {
}

class UIActionData : Asset {
	string[] ActionKeys;
}

class UIAlerttagCompData : UI3dIconCompData {
}

class UIAnimatedTextureAsset : Asset {
	float FrameRate;
	TextureAsset TextureAtlas;
	UITextureAtlasInfo[] TextureInfos;
}

class UIAsset : Asset {
}

class UIAssignmentsCompData : UIComponentData {
}

class UIAudioEventAsset : Asset {
	UIAudioEventMapping[] AudioEventMappings;
}

class UIAwardDescription : UIItemDescription {
	bool IgnoreBuild;
}

class UIAwardsScreenCompData : UIComponentData {
	StatsCategoryBaseData[] TrackableAwardRow;
	StatsCategoryBaseData[] TrackableAwardCol;
}

class UIAwardsTrackingCompData : UIComponentData {
}

class UIBarDataBinding : UIDataBinding {
	UIDataSourceInfo Visibility;
	UIDataSourceInfo Value;
	UIDataSourceInfo Color;
	bool Refresh;
}

class UIBattleLogCompData : UIComponentData {
}

class UIBundlesAsset : Asset {
	UIBundleAssetState[] UIBundleAssetStateList;
}

class UIButtonDataBinding : UIDataBinding {
	UIDataSourceInfo ButtonsDatasource;
	UIButtonSet DefaultButtonSet;
	UIDataSourceInfo Visibility;
	bool InvertVisible;
	bool Visible;
	bool InputOnRelease;
}

class UICameraCompData : UIComponentData {
}

class UICampaignCompData : UIComponentData {
}

class UICapturepointCompData : UIComponentData {
}

class UICapturepointtagCompData : UI3dIconCompData {
}

class UIChatCompData : UIComponentData {
	ChatSettings Settings;
}

class UIColor : DataContainer {
	Vec4 Color;
	UIColorType ColorType;
}

class UIColorTemplate : Asset {
	UIColor[] Colors;
	bool Active;
}

class UICombatAreaAsset : Asset {
	string Prefix;
}

class UICombatAreaCompData : UIComponentData {
	string OutOfAreaSidPrefix;
}

class UICombatAreaEntityData : GameObjectData {
	UICombatAreaAsset Asset;
}

class UICompassDataBinding : UIDataBinding {
	UIDataSourceInfo Heading;
	UIDataSourceInfo Objectives;
	UIDataSourceInfo Visibility;
	UIDataSourceInfo ShowAirRadar;
	UIDataSourceInfo RadarSweepDegree;
}

class UIComponentData : Asset {
	string ShortName;
	string[] DataSources;
	UIUpdateType UpdateType;
	int32 UpdatesPerSecond;
}

class UIConnectionCompData : UIComponentData {
}

class UICoopCompData : UIComponentData {
}

class UICoopEndOfRoundCompData : UIComponentData {
}

class UICoopLevelDescription : LevelDescriptionComponent {
	string Debriefing;
	int32 DevTime;
	string[] UnlockedByLevels;
}

class UICreditsAsset : Asset {
	UICreditsPage[] Pages;
}

class UICreditsCompData : UIComponentData {
}

class UICrosshairDataBinding : UIDataBinding {
	UIDataSourceInfo Dispersion;
	UIDataSourceInfo Zoomed;
	UIDataSourceInfo Visibility;
	float DispersionBaseOffset;
}

class UICustomizationCompData : UIComponentData {
	Vec3 SoldierOffset;
	Vec3 SoldierRotation;
	Vec3 VehicleRotation;
	float NetworkThrottleTimer;
}

class UIDamageIndicatorCompData : UIComponentData {
	float MaxUpdateTime;
}

class UIDataBinding : DataContainer {
}

class UIDataInterfaceCompData : UIComponentData {
}

class UIDelayedCommandsCompData : UIComponentData {
}

class UIDetailedServerInfoCompData : UIComponentData {
	ServerInfoSetting[] Settings;
}

class UIDirectAccessCompData : UIComponentData {
}

class UIDistanceFieldAsset : Asset {
	TextureAsset DistanceFieldTexture;
}

class UIDogTagDescription : UIItemDescription {
	bool IgnoreBuild;
}

class UIDynamicDataBinding : UIDataBinding {
	UIDataSourceInfo[] Bindings;
	bool Refresh;
}

class UIDynamicTextureCompData : UIComponentData {
}

class UIEndOfRoundCompData : UIComponentData {
}

class UIEndOfRoundEntityData : GameEntityData {
	float PreEorTime;
	float EorTime;
}

class UIEventAsset : Asset {
	string Category;
	string[] EventList;
}

class UIFlagCounterCompData : UIComponentData {
}

class UIFontAsset : Asset {
	string SourceFile;
	UITextDatabase TextDatabase;
	string[] ScaleformFontName;
	bool NumericsOnly;
	bool CompleteKorean;
	bool CompleteJapanese;
	bool CompleteTraditionalChinese;
}

class UIFontCollection : Asset {
	LanguageFormat Language;
	UITextDatabase TextDatabase;
	UIFontAsset[] Fonts;
	ResourceBundleKind BundleKind;
}

class UIFontMappingCollection : Asset {
	UIFontMapping[] Fonts;
	UITextDatabase[] TextDatabase;
}

class UIFriendsCompData : UIComponentData {
}

class UIGameModeDescription : UIItemDescription {
	string Identifier;
	string Name;
	string Abbreviation;
	string Desc;
	int32 BattlelogId;
	string TexturePath;
	GameModeVariation[] Variations;
}

class UIGameQueueCompData : UIComponentData {
}

class UIGeneralCompData : UIComponentData {
}

class UIGenericItemDescription : UIItemDescription {
	string Identifier;
	string ImagePath;
}

class UIGraphAsset : Asset {
	UINodeData[] Nodes;
	GlobalNode GlobalNode;
	UINodeConnection[] Connections;
	UIAudioEventAsset AudioEventMappings;
	string BundleAssetName;
	UIEventAsset[] EventList;
	bool Modal;
	bool ProtectScreens;
	bool IsWin32UIGraphAsset;
	bool IsXenonUIGraphAsset;
	bool IsPs3UIGraphAsset;
}

class UIGraphEntityData : EntityData {
	EventSpec[] Events;
	UIGraphAsset GraphAsset;
	UIGraphPriority GraphPriority;
	UIState State;
	bool PopPreviousGraph;
}

class UIGraphPipelineSettings : DataContainer {
	bool OneBundlePerGraph;
}

class UIGunMasterCompData : UIComponentData {
}

class UIHardcoreCompData : UIComponentData {
}

class UIHUDMessageBinding : UIDataBinding {
	UIDataSourceInfo MessageQuery;
	UIDataSourceInfo VisibilityQuery;
	int32 NumberOfRows;
}

class UIImageDataBinding : UIDataBinding {
	string StaticImageUrl;
	UIDataSourceInfo ImageData;
	UIDataSourceInfo Visibility;
	bool Visible;
}

class UIIngameMenuCompData : UIComponentData {
}

class UIInputCompData : UIComponentData {
}

class UIInputEventNodePort : UINodePort {
	UIInputAction InputEventType;
}

class UIInstallHDContentCompData : UIComponentData {
}

class UIInteractionCompData : UI3dIconCompData {
	float RepairSnapDistance;
	bool RepairSnapCircle;
	bool PickupShrinkSnap;
}

class UIInterruptFlow : Asset {
	InterruptFlow[] interruptFlow;
}

class UIInventoryCompData : UIComponentData {
}

class UIItemDescription : DataContainer {
	uint32[] ItemIds;
	bool IgnoreBuild;
}

class UIItemDescriptionAsset : Asset {
	UIItemDescriptionAsset[] Children;
	UIItemDescription[] Items;
}

class UIKillCardCompData : UIComponentData {
}

class UIKillCounterCompData : UIComponentData {
}

class UIKitCompData : UIComponentData {
}

class UIKitItemDescription : UIItemDescription {
	string Name;
	string UnlockName;
	string Description;
	string Category;
	string TexturePath;
	string IconTexturePath;
	string UnlockTexturePath;
	UIHudIcon HudIcon;
	bool NotExplicitelySelectable;
	bool HiddenInProgression;
}

class UILeaderboardCompData : UIComponentData {
}

class UILevelCompData : UIComponentData {
}

class UILevelDescription : UIItemDescription {
	string LevelName;
	string TexturePath;
	string ThumbnailTexturePath;
}

class UILevelDescriptionComponent : LevelDescriptionComponent {
	string MPLoadingAssetPath;
	SoundAsset LoadingMusic;
	string LoadingMusicPath;
	string LevelImagePath;
	string LoadingImagePath;
	string SPLoadingAssetPath;
	UIGPSPosition GPSPosition;
	GameTipAsset HintAsset;
	UICreditsAsset[] CreditsAssets;
	UIMinimapData MinimapData;
	UILevelStatData LevelCompledStatData;
	UILevelStatData LevelScoreStatData;
	int32 SortIndex;
	bool IsMenuLevel;
}

class UILevelLocationDescription : UIItemDescription {
	string Name;
	string Description;
	string TexturePath;
}

class UILicenseDescription : UIItemDescription {
	string LicenseId;
	string PopupText;
}

class UILifeCounterCompData : UIComponentData {
}

class UILightExposureComponentData : UIComponentData {
}

class UIListDataBinding : UIDataBinding {
	int32 ListIndex;
	UIDataSourceInfo ListQuery;
	StaticListItem[] StaticItems;
	UIListEmptyRowType EmptyRowType;
	DefaultSelectionItem DefaultHighlightedRow;
	UIListRowType RowType;
	UIListNavigationType NavigationType;
	UIDataSourceInfo NavigationTypeSource;
	int32 RowSpacing;
	UIListUnFocusMode UnFocusMode;
	string DisabledRows;
	bool ClearListAtNavigationEvent;
	bool SendIndexWithEvent;
	bool ScreenRotationEnabled;
	bool Use3DSelection;
	bool FireHighlightOnMouseOut;
	bool DataIncludesButtonLayout;
	bool Visible;
	bool SpinnerEnabled;
	bool UseScrollBar;
	bool HighLightOnUpdate;
	bool KeepScrollOffset;
}

class UILoadLevelCompData : UIComponentData {
}

class UILocalizeCompData : UIComponentData {
}

class UIManageMapsCompData : UIComponentData {
}

class UIManagePlayersCompData : UIComponentData {
}

class UIManageServerPresetsCompData : UIComponentData {
}

class UIManDownCompData : UIComponentData {
	float DelayManDownTextTime;
}

class UIManualCompData : UIComponentData {
}

class UIMapmarkerCompData : UIComponentData {
	int32[] ProximityIntervals;
}

class UIMapmarkertagCompData : UI3dIconCompData {
}

class UIMatchCompData : UIComponentData {
}

class UIMatchesListCompData : UIComponentData {
}

class UIMemCardCompData : UIComponentData {
}

class UIMessageCompData : UIComponentData {
	float ScoreAggregateTime;
	MessageInfo ChatMessageInfo;
	MessageInfo KillMessageInfo;
	MessageInfo ScoreMessageInfo;
	MessageInfo ScoreMinorMessageInfo;
	MessageInfo ScoreMajorMessageInfo;
	MessageInfo GameMessageInfo;
	MessageInfo StaticMessageInfo;
	MessageInfo OutOfBoundsMessageInfo;
	MessageInfo KillScoreMessageInfo;
	MessageInfo LogLinesMessageInfo;
	MessageInfo TooltipMessageInfo;
	MessageInfo SubtitleMessageInfo;
	MessageInfo RewardMessageInfo;
	MessageInfo LocalKillMessageInfo;
	MessageInfo ServerAdminYellMessageInfo;
	MessageInfo GunMasterMessageInfo;
	string[] ForceSubtitlesForTheseLevels;
	string[] ForceSubtitlesOffForTheseLevels;
}

class UIMessageTriggerData : EntityData {
	Realm Realm;
}

class UIMinimapCompData : UIComponentData {
}

class UIMinimapIconTextureAtlasAsset : Asset {
	UIMinimapIconTexture[] Icons;
	TextureAsset TextureAtlas;
}

class UIMinimapVolumeEntityData : GameEntityData {
	Asset Asset;
	bool IsDefault;
}

class UIModDescription : UIItemDescription {
	string Identifier;
	string ShortName;
	string FullName;
	string Desc;
}

class UINametag : DataContainer {
	Vec3 TextColor;
	float IconFadeDistance;
	float IconMaxDistance;
	UIHudIcon Icon;
	float TextFadeDistance;
	float HealthFadeDistance;
	float HealthMaxDistance;
	float TextMaxDistance;
	float TargetInTimer;
	float TargetOutTimer;
}

class UINametagCompData : UI3dIconCompData {
	Vec4 SquadTint;
	Vec4 EnemyTint;
	Vec4 FriendlyTint;
	int32 OrderCooldown;
	int32 TooltipCooldown;
	float HealthBarSize;
	float NameFontSize;
	float NameGlowSize;
}

class UINametagCoopCompData : UINametagCompData {
}

class UINametagSPCompData : UINametagCompData {
}

class UINavigationCompData : UIComponentData {
}

class UINestedListDataBinding : UIDataBinding {
	int32 ListIndex;
	NestedList[] NestedLists;
	int32 RowSpacing;
	DefaultSelectionItem DefaultHighlightedRow;
	UIListNavigationType NavigationType;
	UIListRowType RowType;
	UIListEmptyRowType EmptyRowType;
	int32 SelectorWidth;
	UIDataSourceInfo Visibility;
	bool SendIndexWithEvent;
	bool UseScrollBar;
	bool DataIncludesButtonLayout;
	bool ClearListAtNavigationEvent;
	bool Use3DSelection;
	bool InvertVisible;
	bool Visible;
	bool ScreenRotationEnabled;
	bool HighLightOnUpdate;
	bool KeepScrollOffset;
}

class UINodeConnection : DataContainer {
	UINodeData SourceNode;
	UINodeData TargetNode;
	UINodePort SourcePort;
	UINodePort TargetPort;
	int32 NumScreensToPop;
}

class UINodeData : DataContainer {
	string Name;
	UIGraphAsset ParentGraph;
	bool IsRootNode;
	bool ParentIsScreen;
}

class UINodePort : DataContainer {
	string Name;
	string InstanceName;
	UIWidgetEventID Query;
	bool AllowManualRemove;
}

class UINumberDataBinding : UIDataBinding {
	UIDataSourceInfo Value;
	int32 NumValue;
	bool Refresh;
}

class UIObjectivesCompData : UIComponentData {
}

class UIOnDemandFontComponentData : UIComponentData {
	UIFontCollection[] FontCollections;
}

class UIPageHeaderBinding : UIDataBinding {
	UIDataSourceInfo Header;
	UIDataSourceInfo SubHeader;
	UIDataSourceInfo Icon;
	string StaticHeader;
	string StaticSubHeader;
	string StaticIcon;
	UILevelSpecificPageHeader[] LevelSpecificHeaders;
}

class UIPartData : DataContainer {
}

class UIPartPropertyList : DataContainer {
	UIPartProperties[] HudPropertyList;
}

class UIPersistenceCompData : UIComponentData {
}

class UIPlaygroupCompData : UIComponentData {
}

class UIPopupCompData : UIComponentData {
}

class UIPostProcessComponentData : UIComponentData {
	float HighlightThreshold;
	float XPower;
	float YPower;
	float Distort;
	float TimeScale;
	TextureAsset NoiseTexture;
	float Highlight;
	float RShift;
	float GShift;
	float BShift;
	bool TweakMode;
	bool Enabled;
}

class UIPremiumCompData : UIComponentData {
}

class UIPreRoundCompData : UIComponentData {
}

class UIPresenceCompData : UIComponentData {
}

class UIQueuedEventsCompData : UIComponentData {
	float InitialQueueDelay;
	bool ShowUnlocksBecomingAvailable;
}

class UIRankDescription : UIItemDescription {
	bool IgnoreBuild;
}

class UIRenderCompData : UIComponentData {
	Vec4 BackgroundRect1;
	Vec4 BackgroundRect0;
	TextureAsset BgTexture2;
	TextureAsset BgTexture1;
	float AlphaMin;
	float AlphaAnimationSpeed;
	float AlphaOffset;
	float AlphaMax;
}

class UIRightClickCompData : UIComponentData {
}

class UIScoreboardCompData : UIComponentData {
	float MaxUpdateInterval;
}

class UIScreenAsset : UIGraphAsset {
}

class UIScreenEventCompData : UIComponentData {
}

class UIScreenshotCompData : UIComponentData {
	uint32 ResizeImageWidth;
	ScreenshotInfo[] ScreenshotInfos;
	uint32 ResizeImageHeight;
	bool AutoResizeImage;
}

class UIServerBrowserCompData : UIComponentData {
}

class UIServerListCompData : UIComponentData {
}

class UIServerListFilterBarCompData : UIComponentData {
}

class UISessionDataComponentData : UIComponentData {
}

class UISettings : SystemSettings {
	UISystemType System;
	UIBundlesAsset Bundles;
	ProfileOptionsAsset ProfileOptions;
	LanguageFormat Language;
	DataCopSettings DataCop;
	bool OneBundlePerGraph;
	bool DrawEnable;
}

class UISettingsCompData : UIComponentData {
	UISettingsPage[] SettingsPages;
}

class UISetupServerWizardCompData : UIComponentData {
	int32 PasswdMinLen;
}

class UISetValueData : EntityData {
	UIDataSourceInfo DataSource;
	int32 IntValue;
	float FloatValue;
	string StringValue;
	bool BoolValue;
}

class UISoldierCompData : UIComponentData {
	float CriticalHealthThreshold;
	float HitShaderDamageMultiplier;
	float HitShaderMinDamage;
	float EKGLineThickness;
	int32 ShockTraumaAbilityIndex;
	int32 RangerPTProgramAbilityIndex;
	int32 FocusAbilityIndex;
	float EKGLineAlpha;
	float HitShaderGradientDurationMultiplier;
	float HitShaderMaxDamage;
	float HitShaderIndicatorDurationMultiplier;
	bool UseVehicleTeamSpawn;
	bool UseSquadSpawn;
	bool SpawnOnSquadLeaders;
}

class UISoundCompData : UIComponentData {
}

class UISpawnLogicCompData : UIComponentData {
}

class UISpawnPointCompData : UIComponentData {
}

class UISpectatorCompData : UIComponentData {
}

class UISquadCompData : UIComponentData {
	string Squad15;
	string Squad32;
	string Squad1;
	string Squad2;
	string Squad3;
	string Squad4;
	string Squad5;
	string Squad6;
	string Squad7;
	string Squad8;
	string Squad9;
	string Squad10;
	string Squad11;
	string Squad12;
	string Squad13;
	string Squad14;
	string Squad16;
	string Squad24;
	string Squad17;
	string Squad18;
	string Squad19;
	string Squad20;
	string Squad21;
	string Squad22;
	string Squad23;
	string Squad31;
	string Squad25;
	string Squad26;
	string Squad27;
	string Squad28;
	string Squad29;
	string Squad30;
	bool HideLocalSquadBoostData;
}

class UIStateAsset : Asset {
	UIComponentData[] UIComponents;
	UIAsset[] ActionscriptLibraries;
	string[] ActionscriptNames;
	string StateName;
	string StatePath;
}

class UIStatsCompData : UIComponentData {
}

class UIStoreCompData : UIComponentData {
}

class UITeamCompData : UIComponentData {
}

class UITeamSupportTagCompData : UI3dIconCompData {
}

class UITextDatabase : Asset {
	LanguageFormat Language;
	guid BinaryChunk;
	uint32 BinaryChunkSize;
	guid HistogramChunk;
	uint32 HistogramChunkSize;
}

class UITextDataBinding : UIDataBinding {
	string StaticText;
	UIDataSourceInfo TextData;
	UIDataSourceInfo Visibility;
	bool Refresh;
	bool OverrideDirectAccess;
}

class UITextureStreamingComponentData : UIComponentData {
}

class UITicketCounterCompData : UIComponentData {
}

class UITrackingtagCompData : UI3dIconCompData {
	bool ShowUnlockedLockAlways;
	bool ShowUnlockedLockOnRadar;
	bool ShowUnlockedLockOnHeat;
	bool ShowUnlockedLockOnLaserPainted;
}

class UITrainingCompData : UIComponentData {
}

class UIUnlocksCompData : UIComponentData {
}

class UIVehicleCompData : UIComponentData {
	int32 RangeMeterUpdatesPerSecond;
}

class UIVehicleDescription : UIItemDescription {
	string Name;
	string Description;
	string TexturePath;
}

class UIVehicleUnlockDescription : UIItemDescription {
	string Name;
	string Description;
	string Category;
	string TexturePath;
	string IconTexturePath;
	string UnlockTexturePath;
	bool HiddenInProgression;
	bool NotExplicitelySelectable;
}

class UIVehicleWeaponDescription : UIItemDescription {
	string Name;
}

class UIVoiceCompData : UIComponentData {
	uint32 HudMaxSpeakers;
}

class UIWeaponAccessoryDescription : UIItemDescription {
	string Name;
	string Description;
	string Category;
	string TexturePath;
	string IconTexturePath;
	string UnlockTexturePath;
	string MiscTexturePath;
	bool CoreAccessory;
	bool HiddenInProgression;
}

class UIWeaponCompData : UIComponentData {
	float MinHitIndicatorLimit;
	float MaxHitIndicatorLimit;
	float NormalHitIndicatorLimit;
}

class UIWeaponDescription : UIItemDescription {
	string Name;
	string UnlockName;
	string Description;
	string Category;
	string TexturePath;
	string IconTexturePath;
	string UnlockTexturePath;
	string Ammo;
	string RateOfFire;
	string Range;
	bool FireModeSingle;
	bool FireModeBurst;
	bool FireModeAuto;
	bool HiddenInProgression;
}

class UIWidgetAsset : UIAsset {
	WidgetEventQueryPair[] WidgetEvents;
}

class UIWidgetEventCompData : UIComponentData {
}

class UIWidgetMovieCompData : UIComponentData {
}

class UIWidgetPathBinding : UIDataBinding {
	UIDataSourceInfo WidgetPathQuery;
	UIDataSourceInfo Visibility;
}

class UnderFireTriggerEntityData : TriggerEntityData {
	float Radius;
	float CoolDownTime;
	MaterialContainerPair TriggerOnMaterialOnly;
	AreaTriggerInclude TriggeredBy;
	bool DisableIfTrackEntityIsLost;
	bool RandomYaw;
	bool IndicateHit;
}

class UnlockableColorCollection : DataContainer {
	ColorReference DefaultValue;
	ColorUnlockPartData[] PossibleValues;
}

class UnlockableShaderParameterValueCollection : DataContainer {
	string ShaderParameterName;
}

class UnlockableTextureCollection : DataContainer {
	TextureAsset DefaultValue;
}

class UnlockableTextureSliceCollection : DataContainer {
	int32 DefaultValue;
	TextureSliceUnlockPartData[] PossibleValues;
}

class UnlockAsset : UnlockAssetBase {
	Asset[] LinkedTo;
}

class UnlockAssetBase : Asset {
	uint32 UnlockScore;
	UnlockUserDataBase UnlockUserData;
	string DebugUnlockId;
	uint32 Identifier;
	UnlockAvailability AvailableForPlayer;
	UnlockAssetBase NextLevelUnlockAsset;
	bool AutoAvailable;
	bool HiddenInProgression;
}

class UnlockComponentData : ComponentData {
	UnlockAssetBase UnlockAsset;
	uint32 UnlockDataKey;
	bool UnlockableFromAllEntries;
	bool InvertUnlockTest;
}

class UnlockUserDataBase : Asset {
}

class UnlockValuePair : DataContainer {
	string Id;
}

class UpdateAgeData : ProcessorData {
	float Lifetime;
}

class UpdateAlphaLevelMaxData : ProcessorData {
	float MaxLevel;
}

class UpdateAlphaLevelMinData : ProcessorData {
	float MinLevel;
}

class UpdateAlphaLevelScaleData : ProcessorData {
	float Exponent;
}

class UpdateCameraProximityData : ProcessorData {
	Vec3 Size;
	float ForwardOffset;
}

class UpdateClipScaleData : ProcessorData {
	int16[] Lookup;
}

class UpdateColorData : ProcessorData {
	Vec3 Color;
}

class UpdateLinearVelocityData : ProcessorData {
}

class UpdateOrientationData : ProcessorData {
}

class UpdateRotationData : ProcessorData {
}

class UpdateSizeData : ProcessorData {
	Vec2 Pivot;
}

class UpdateSizeXData : ProcessorData {
}

class UpdateSizeYData : ProcessorData {
}

class UpdateSizeZData : ProcessorData {
}

class UpdateTextureCoordsData : ProcessorData {
	EmitterTextureInfo TextureInfo1;
	float TextureBlendValue;
}

class UpdateTransparencyData : ProcessorData {
	float CullThreshold;
}

class UrgencySetData : DataContainer {
	string Name;
	UrgencyModifierData[] UrgencyModifiers;
}

class UrgencyUserData : DataContainer {
	UrgencyUserData Base;
	UrgencyModifierData[] UrgencyModifiers;
	UrgencySetData[] ModifierSets;
}

class UserComponentData : UIComponentData {
}

class UserMusicArbiterNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class UserMusicControllerNodeData : AudioGraphNodeData {
	AudioGraphNodePort Override;
	AudioGraphNodePort Restore;
	bool RestoreOnDeactivated;
}

class ValueDebugNodeData : AudioGraphNodeData {
	DebugValueInput[] Values;
}

class ValueSelectorEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Input;
	float CaseValue;
}

class ValueSelectorNodeData : AudioGraphNodeData {
	ValueSelectorEntry[] Inputs;
	AudioGraphNodePort Value;
	AudioGraphNodePort Out;
	float DefaultCaseValue;
}

class ValueUnlockAsset : UnlockAssetBase {
	UnlockValuePair[] UnlockValues;
}

class VaultWaypointData : AbstractLocoWaypointData {
	AILocoVaultTaskData VaultTask;
}

class Vec2PropertyTrackData : SimplePropertyTrackData {
	Vec2[] Values;
}

class Vec2RecordingData : PropertyRecordingData {
	Vec2[] Values;
}

class Vec3EntityData : EntityData {
	Vec3 DefaultValue;
	Realm Realm;
}

class Vec3MathOpEntityData : EntityData {
	Realm Realm;
	Vec3MathOp[] Operators;
}

class Vec3PropertyTrackData : SimplePropertyTrackData {
	Vec3[] Values;
}

class Vec3RecordingData : PropertyRecordingData {
	Vec3[] Values;
}

class Vec4PropertyTrackData : SimplePropertyTrackData {
	Vec4[] Values;
}

class Vec4RecordingData : PropertyRecordingData {
	Vec4[] Values;
}

class VecSplitterEntityData : EntityData {
	Vec3 Vec3;
	Vec4 Vec4;
	Realm Realm;
}

class VectorShapeData : BaseShapeData {
	Vec3[] Points;
	Vec3[] Normals;
	float Tension;
	bool IsClosed;
	bool AllowRoll;
}

class VegetationBaseEntityData : GameEntityData {
	LinearTransform[] BasePoseTransforms;
	Vec3[] BasePoseTranslations;
	int32[] Hierarchy;
	SkinnedMeshAsset Mesh;
	SkinnedMeshAsset ShadowMesh;
	PhysicsEntityData PhysicsData;
}

class VegetationSystemSettings : DataContainer {
	float WindVariation;
	float WindVariationRate;
	float WindStrength;
	float JointTensionLimit;
	int32 ForceShadowLod;
	uint32 MaxPreSimsPerJob;
	uint32 SimulationMemKbClient;
	float MaxActiveDistance;
	uint32 SimulationMemKbServer;
	uint32 JobCount;
	int32 JointTensionLimitIndex;
	float TimeScale;
	bool LocalInfluencesEnabled;
	bool SubDestructionEnabled;
	bool DissolveEnable;
	bool Enable;
	bool SimulateServerSide;
	bool EnableJobs;
	bool ShadowMeshEnable;
	bool DrawNodes;
	bool DrawEnable;
	bool BatchDrawEnable;
	bool DestructionEnabled;
	bool UseShadowLodOffset;
}

class VegetationTreeEntityData : VegetationBaseEntityData {
	EffectBlueprint GroundImpactEffect;
	EffectBlueprint StemRipEffect;
	float StemPhysicsWidth;
	float ColiPlaneDepth;
	float StemHitpoints;
	float BranchHitpoints;
	float BranchL2Hitpoints;
	float StemStiffness;
	float StemStiffnessSpread;
	float BranchStiffness;
	float BranchStiffnessL2;
	int32 StemBoneCount;
	float WindStem;
	float WindBranch;
	float WindBranchL2;
	EffectBlueprint TreeFallEffect;
	float BreakableJointThreshold;
	float FallDirectionEnd;
	EffectBlueprint LocalWindEffect;
	float ImpactThreshold;
	float CollisionImpactMultiplier;
	float FallDirectionStart;
	EffectBlueprint SplashDistantEffect;
	EffectBlueprint BulletImpactEffect;
	float PartsTimeToLive;
	uint32 ShadowLODOffset;
	EffectBlueprint SplashNearEffect;
	EffectBlueprint CollisionEffect;
	bool ForceFullSim;
	bool UseImpactThreshold;
	bool UsePhysicsShapes;
	bool ConstraintStemB1;
	bool ConstraintStemB2;
	bool ClientSideOnly;
}

class VehicleAsset : VehicleBlueprint {
}

class VehicleBlueprint : ObjectBlueprint {
}

class VehicleCameraData : TargetCameraData {
	Vec3 MoveToPosition;
	Vec3 MoveToPositionSlopeFactor;
	Vec3 TargetOffset;
	Vec3 TargetOffsetSlopeFactor;
	Vec3 RotationFactor;
	float PositionFactor;
	float ResetDistance;
	bool FixedPosition;
	bool FixedAngleZ;
	bool UseTerrainAdjustment;
}

class VehicleComponentData : ChassisComponentData {
}

class VehicleConfigData : DataContainer {
	Vec3 CenterOfMass;
	Vec3 CenterOfMassHandlingOffset;
	Vec3 InertiaModifier;
	AeroDynamicPhysicsData AeroDynamicPhysics;
	VehicleParachuteData ParachutePhysics;
	MotorbikeData MotorbikePhysics;
	MotionDampingData MotionDamping;
	VehicleInputData Input;
	FloatPhysicsData FloatPhysics;
	StabilizerData Stabilizer;
	StabilizerSettings[] Stabilizers;
	ConstantForceData[] ConstantForce;
	VehicleMode VehicleModeAtReset;
	float BodyMass;
	float GravityModifier;
	float YawMin;
	float YawMax;
	float DownForceBaseFactor;
	float DownForceWheelFactor;
	float VehicleModeChangeEnteringTime;
	float VehicleModeChangeStartingTime;
	float VehicleModeChangeStoppingTime;
	float VehicleModeChangeLeavingTime;
	float StandStillLowSpeedTimeLimit;
	float StaticFrictionBreakCollisionMod;
	float StaticFrictionBreakVelocityMod;
	float CoefficientOfAirFriction;
	float AirDensity;
	float AirDragArea;
	float WindResistanceBaseFactor;
	float WindResistanceVelocityFactor;
	float WindResistanceVelocityFactorMin;
	float WindResistanceVelocityFactorMax;
	AntiRollBars AntiRollBars;
	bool UseDownForceWheelFactor;
	bool UseGearbox;
	bool UseStandStillBrake;
	bool UseStandStillSleep;
	bool UseTurnAroundForce;
	bool UseMotorcycleControl;
	bool InvertPitchAllowed;
	bool UseWindResistance;
	bool UseDownForce;
}

class VehicleCustomizationAsset : Asset {
	CustomizationTable Customization;
}

class VehicleDeployWeaponData : WeaponData {
	float DeployAreaRadius;
	ObjectBlueprint PreviewObject;
	float DeployAreaGroundRayLength;
	float DeployAreaGroundFlatness;
	bool UsePreview;
	bool CheckClearSky;
	bool CanRemoteEnterVehicle;
}

class VehicleEntityData : ControllableEntityData {
	Vec3 CriticallyDamagedEffectPosition;
	Vec3 FLIRKeyColor;
	Vec3 PreExplosionEffectPosition;
	Vec3 InteractionOffset;
	float DisabledDamageThreshold;
	string ControllableType;
	float PreDestructionDamageThreshold;
	VehicleHealthZoneData RearHealthZone;
	VehicleHealthZoneData LeftHealthZone;
	VehicleHealthZoneData RightHealthZone;
	float MinSpeedForMineActivation;
	VehicleHealthZoneData FrontHealthZone;
	float UpsideDownDamage;
	float WaterDamageOffset;
	float ArmorMultiplier;
	float RegenerationDelayMultiplier;
	float RegenerationRateMultiplier;
	float EmergencyRepairHealth;
	float DecayDelay;
	float DecayRate;
	float BelowWaterDamageDelay;
	EffectBlueprint CriticallyDamagedEffect;
	float RegenerationRate;
	float CriticalDamageTime;
	EffectBlueprint PreExplosionEffect;
	float RegenerationDelay;
	float PreExplosionTime;
	ExplosionEntityData Explosion;
	CompositeMeshAsset Mesh;
	ObjectBlueprint CockpitMesh;
	float VelocityDamageMagnifier;
	float ExitSpeedThreshold;
	VehicleHudData HudData;
	string NameSid;
	int32 MaxPlayersInVehicle;
	float NametagHeightScale;
	VehicleSoundData Sound;
	float UpsideDownDamageDelay;
	float UpsideDownAngle;
	float WaterDamage;
	float LockingTimeMultiplier;
	float NametagHeightOffset;
	float HighAltitudeLockHeight;
	float VelocityDamageThreshold;
	EntityVoiceOverInfo VoiceOverInfo;
	float ExitCameraSwitchDelay;
	float KillSoldierCollisionSpeedThreshold;
	float ExitDirectionSpeedThreshold;
	AngleOfImpactData AngleOfImpact;
	VehicleLockableInfoData VehicleLockableInfo;
	float FLIRValue;
	MPModeData MPMode;
	bool IgnoreSoldierCollisionNormal;
	bool ShowPlayerHealth;
	bool ForegroundRenderCockpitMesh;
	bool RenderVehicleMesh;
	bool IsAffectedByEMP;
	bool ThrowOutSoldierInsideOnWaterDamage;
	bool UseAsTeamSpawner;
	bool IsLockable;
	bool ChoseExitPointByDirection;
	bool HealthZonesShareDamage;
	bool NeverReportVehicleAsEmpty;
	bool ExitAllowed;
	bool UseLowAltitudeHeatSignature;
	bool AllowVehicleOutsideCombatAreas;
	bool EnableGroundmapLighting;
	bool MotionBlurMask;
	bool UseProtectedShields;
	bool UseDriverEyePosForNametagPos;
	bool EquipmentFakeVehicle;
	bool ExplosionPacksAttachable;
}

class VehicleEntryListenerComponentData : ComponentData {
	VehicleEntryListenerBinding VehicleEntryListener;
	VehicleCameraControlBinding VehicleCameraControl;
	int32 AnimationEntitySpacePriority;
	float AnimationWheelTransformDelay;
}

class VehicleExitPointComponentData : ComponentData {
	Vec3 Impulse;
	float TerrainHeight;
	int32 Ordinal;
	float Velocity;
	bool InheritCameraDirection;
	bool CheckForVehicleOverrun;
}

class VehicleInputTweakData : DataContainer {
	VehicleInputTweakType InputTweakType;
	float MinSpeed;
	float MaxSpeed;
	float MinSpeedScale;
	float MaxSpeedScale;
}

class VehicleParachuteComponentData : ComponentData {
	VehicleParachuteBinding Binding;
	float UndeployTime;
	float TimeInvisibleAfterSpawn;
	int32 VehicleType;
	bool DropParachuteOnUndeploy;
}

class VehicleParachuteData : DataContainer {
	float TerminalVelocity;
	float FreefallGravityMultiplier;
	float DragCoefficient;
	float MaxRollVelocity;
	float MaxPitchVelocity;
	float MaxYawVelocity;
	float DeployTime;
	float UndeployGroundHeight;
	float AngularDescentDamping;
	float AngularDeployDamping;
	float DeployPhysicsStart;
	float DeployInitialDragStart;
	float InitialDragStartVelocityScale;
	float InitialDragAngularVelocityPitch;
	float InitialDragRandomAngularVelocityRollMax;
	float RampLength;
}

class VehicleProjectileEntityData : ProjectileEntityData {
	VehicleBlueprint Vehicle;
	float EnterDelay;
	float NoVehicleCollisionTime;
	float AlignWithGroundRayLength;
	bool AutoEnter;
	bool AlignWithGround;
	bool CheckGroundWhenSpawned;
	bool DeployInsideNeutralCombatAreaOnly;
}

class VehicleSoundData : DataContainer {
	SoundAsset BulletImpact;
}

class VehicleSpawnReferenceObjectData : SpawnReferenceObjectData {
	LinearTransform AirDropCarrierTransform;
	float TimeUntilAbandoned;
	float TimeUntilAbandonedIsDestroyed;
	EntryEnterRestriction EnterRestriction;
	float BotBailWhenHealthBelow;
	float BotBailOutDelay;
	float WreckDuration;
	float RespawnRange;
	int32 ActiveStanceEntryIndex;
	int32 ActiveStance;
	float KeepAliveRadius;
	float VehicleIsNearDistance;
	bool SetTeamOnSpawn;
	bool ApplyDamageToAbandonedVehicles;
	bool EnableAvailableSeatOutput;
	bool DisregardSpawnAllowedSetting;
	bool AffectedByImpulse;
}

class VehicleSpawnStateEntityData : EntityData {
	Vec3 InitialVelocity;
	float StartupDelayModifier;
	float InitialThrottle;
	uint32 EngineIndex;
	float InitialRpmModifier;
	float HeightOffset;
	float Radius;
}

class VehicleState : MetricState {
	string VehicleName;
}

class VehicleStateTriggerEntityData : TriggerEntityData {
	float LockAmount;
	uint32 BulletCount;
	uint32 HealthToSet;
	uint32 SeatSpecificIndexForHuman;
	uint32 SeatSpecificIndexForAi;
	float DestructionRadius;
	uint32 HealthToCheck;
	bool AllowHumanToEnterAllSeats;
	bool AllowAiToEnterAllSeats;
	bool BanAiFromSpecificSeat;
	bool TriggerCriticalOnHealthSet;
	bool CheckHealthGreaterOrEqual;
	bool RestrictHumanToSpecificSeat;
	bool ShouldDestroyVehicles;
	bool ShouldDestroyBangers;
}

class VehicleVisualCustomizationAsset : Asset {
	ShaderTextureUnlockPartCollection[] TextureUnlockPartCollections;
	TextUnlockPartData[] TextUnlockParts;
}

class VehicleWaterEffectData : DataContainer {
	Vec3 Position;
	EffectBlueprint Effect;
}

class VehicleWaypointData : WaypointData {
	float Speed;
	float SpeedOverrideMovingTowards;
	float Angleoffset;
	float StopHereRadius;
	float StoppingDeceleration;
	float MinSlowdownSpeed;
	bool StopHere;
}

class VeniceCombatAreaCamera : DataContainer {
}

class VeniceExplosionEntityData : ExplosionEntityData {
	float UnspottableTime;
	bool UnspotsOnExplode;
	bool SpotsOnExplode;
	bool IsCausingSuppression;
}

class VeniceFPSCameraData : FPSCameraData {
	float SuppressionBlurAmountMultiplier;
	float SuppressionBlurSizeMultiplier;
}

class VeniceGameplayLevelDescriptionComponent : LevelDescriptionComponent {
	bool AllowParachuteFromMobileSpawnpoint;
}

class VeniceHudConfigAsset : DataContainer {
	SoundWaveAsset AmmoPickupSound;
	SoundWaveAsset WeaponPickupSound;
	SoundWaveAsset NewObjectiveSound;
	SoundWaveAsset ObjectiveCompletedSound;
	SoundWaveAsset ObjectiveUpdatedSound;
	SoundWaveAsset MPVictorySoundMec;
	SoundWaveAsset MPVictorySoundUs;
	SoundWaveAsset MPVictorySoundRu;
	SoundWaveAsset MPDefeatSoundMec;
	SoundWaveAsset MPDefeatSoundUs;
	SoundWaveAsset MPDefeatSoundRu;
	SoundWaveAsset ArtilleryAiming;
	SoundWaveAsset ArtilleryAimingOOA;
	SoundWaveAsset MortarStrikeLocking;
	SoundWaveAsset LaserDesignatorLocked;
	SoundWaveAsset LaserDesignatorLocking;
	UINametag[] Nametags;
	SpawnScreenWeaponData[] SpawnScreenWeapons;
	float MaxOrderIconDistance;
	float InnerNametagRadius;
	float OuterNametagRadius;
	float CriticalHealthThreshold;
	UITaggedVehicleCrosshair TaggedVehicleCrosshair;
	UIMinimapConfig Minimap;
	bool ShowSpawnPointsOnMinimap;
	bool NametagHealthVisibleForAll;
}

class VeniceMapMarkerHudData : DataContainer {
	UIHudIcon Icon;
}

class VeniceMatchmakingLevelDescriptionComponent : LevelDescriptionComponent {
	string Mod;
	string[] Licenses;
}

class VeniceMissionObjectiveHudData : MissionObjectiveHudData {
}

class VeniceOnlineConfiguration : OnlineConfiguration {
	OnlinePlatformConfiguration[] Platforms;
	EntitlementQuery[] EntitlementQueries;
	bool UseFallback;
}

class VeniceOnlineSettings : SystemSettings {
	uint32 WebFeedMaxFetchAttempts;
	OnlinePlatformConfiguration[] Platforms;
	string ServiceNameOverride;
	string ClientGameConfigurationOverride;
	int32 BlazeLogLevel;
	int32 DirtySockLogLevel;
	string BattlelogReportURL;
	EntitlementQuery[] EntitlementQueries;
	string WebFeedUrlPrefix;
	float SnowrollerOrphanTimeout;
	int32 QueueCapacityOverride;
	string WebFeedCountUrlPrefix;
	uint32 MatchFeedMaxFetchAttempts;
	DTagUploadPolicy DogTagUploadPolicy;
	uint32 WebFeedUnreadCountFetchPeriod;
	string MatchImagesUrlPrefix;
	uint32 WebFeedMaxItems;
	uint32 WebFeedMinimumMillisecondsBetweenRequests;
	uint32 WebFeedMillisecondsBetweenNewRequestAttempt;
	uint32 MatchFeedMinimumMillisecondsBetweenRequests;
	uint32 MatchFeedMinimumMillisecondsBetweenMatchRequests;
	uint32 PingPeriod;
	uint32 MatchFeedMinimumMillisecondsBetweenNewRequestAttempt;
	string MatchFeedDetailsUrlPrefix;
	string MatchFeedListUrlPrefix;
	uint32 MatchFeedMinimumMillisecondsBetweenMatchReloads;
	bool EnableSnowroller;
	bool EnableQoS;
	bool PunkBusterActivateClient;
	bool PunkBusterActivateServer;
	bool BattlelogReport;
	bool UseFallback;
}

class VeniceRichPresenceLevelDescriptionComponent : LevelDescriptionComponent {
	RichPresencePresenceString PresenceMode;
	RichPresenceContextSetting[] ContextValues;
}

class VeniceSoldierCustomizationAsset : SoldierCustomizationAsset {
}

class VeniceSoldierHealthModuleData : SoldierHealthModuleData {
	float TimeForCorpse;
	float PostReviveResponseTime;
	float InteractiveManDownThreshold;
	PoseConstraintsData InteractiveManDownPoseConstraints;
	float ManDownStateTime;
	float ManDownStateHealthPoints;
	float ImmortalTimeAfterSpawn;
	EntryInputActionEnum[] AbortSpawnImmortalityInputs;
	float PostReviveHealth;
	float CriticalFakeImmortalTime;
	float RegenerationDelay;
	float RegenerationRate;
	SoldierHealthModuleBinding Binding;
	float SprintDisabledWhenDamagedTime;
	float SprintDisabledDamageThreshold;
	RotateToHitData ManDownRotate;
	bool InteractiveManDown;
}

class VeniceSoldierWeaponCustomizationAsset : SoldierWeaponCustomizationAsset {
}

class VeniceUICombatAreaAsset : UICombatAreaAsset {
	UIDistanceFieldAsset DistanceField;
	UIDistanceFieldAsset SurroundingDistanceField;
}

class VeniceUIConfiguration : Asset {
	string MetaDataAssetPath;
}

class VeniceUISettings : SystemSettings {
	string MetaDataAssetPath;
	bool GetStatsInOnlineFlow;
}

class VeniceUnlockUserData : UnlockUserDataBase {
	bool CheckSquad;
}

class VeniceVehicleCustomizationAsset : VehicleCustomizationAsset {
	VehicleCategory Category;
	string NameSid;
}

class VersionData : Asset {
	string disclaimer;
	int32 Version;
	string DateTime;
	string BranchId;
	string GameName;
}

class ViewFxData : DataContainer {
	PoissonRadialBlurData PoissonRadialBlur;
	ColorTintData ColorTint;
	float BlurAdd;
	bool ColorTintEnable;
	bool PoissonRadialBlurEnable;
}

class VignetteComponentData : ComponentData {
	Vec2 Scale;
	Vec3 Color;
	Realm Realm;
	float Exponent;
	float Opacity;
	bool Enable;
}

class VirtualRasterQuadtreeData : RasterQuadtreeData {
}

class VisualEnvironmentBlueprint : ObjectBlueprint {
}

class VisualEnvironmentEffectEntityData : EffectEntityData {
	Vec4 LifetimeCurve;
	Vec4 CullDistanceCurve;
	Vec4 CullAngleCurve;
	float Lifetime;
	VisualEnvironmentBlueprint VisualEnvironment;
	bool SampleOnStartOnly;
}

class VisualEnvironmentEntityData : GameEntityData {
	float Visibility;
	int32 Priority;
}

class VisualEnvironmentReferenceObjectData : ReferenceObjectData {
	int32 Priority;
	bool OverrideVisibility;
}

class VisualEnvironmentSettings : DataContainer {
	float SunRotationX;
	float SunRotationY;
	bool DrawStats;
}

class VisualTerrainEntityData : EntityData {
	TerrainData Terrain;
	VisualTerrainSettings Settings;
}

class VisualTerrainSettings : DataContainer {
	Vec2 DebugOverlayBrushCoverageMin;
	TerrainRenderMode RenderMode;
	uint32 MeshScatteringInstanceCullJobCount;
	float PatchErrorFov;
	float TriangleSizeMin;
	float LodScale;
	float LodCenterExtrapolationDistanceMax;
	float LodCenterExtrapolationTime;
	float MeshScatteringDensityScaleFactor;
	float DxTessellatedTriWidth;
	float DxTessellationPatchShrink;
	uint32 DxTessellationPatchFacesPerSide;
	float ZPassDistance;
	float DebugOverlayGridSize;
	uint32 TextureAtlasSampleCountXFactor;
	uint32 TextureAtlasSampleCountYFactor;
	float TextureSamplesPerMeterMax;
	float TextureDetailFalloffFactor;
	float TextureDetailFalloffDistance;
	float TextureDetailFalloffCurve;
	float TextureInvisibleDetailReductionFactor;
	float TextureOccludedDetailReductionFactor;
	uint32 TextureRenderJobCount;
	float MeshScatteringDistanceScaleFactor;
	float DebugOverlayIsolineSpacing;
	uint32 TextureRenderJobsLaunchedPerFrameCountMax;
	uint32 TextureTileSamplesPerSide;
	uint32 TextureTileBorderWidth;
	int32 TextureLevelOffset;
	uint32 TextureClodFrameCount;
	float MeshScatteringDensityMarginFactor;
	float TextureClodCutoffPriority;
	float MeshScatteringWindSpeed;
	uint32 TextureCompressJobCount;
	uint32 MeshScatteringInstancesPerCellMax;
	int32 TextureCompressionQuality;
	float TextureDetailSlopeBoost;
	float TextureGenerationMipBias;
	float DebugOverlayBrushSize;
	uint32 MeshScatteringBuildChannelCount;
	uint32 MeshScatteringTreeNodePoolCapacity;
	float MeshScatteringInvisibleCellFovFactor;
	uint32 MeshScatteringInstanceCullListCount;
	float MeshScatteringPregenerationDistanceRatio;
	uint32 TessellationFacesPerSideMin;
	uint32 MaxNonVisibleTextureUpdateCount;
	uint32 TextureQuadsPerTileLevel;
	float WaterDepthMetersPerSample;
	float DynamicMaskDecalWidthScale;
	int32 DrawQuadtreeZoomIndex;
	uint32 MeshScatteringClodFrameCount;
	uint32 MeshScatteringBuildChannelsLaunchedPerFrameCountMax;
	uint32 SlotReuseWaitCount;
	uint32 MeshScatteringCellPoolCapacity;
	uint32 MeshScatteringCullRecordCount;
	uint32 PatchSlotCount;
	uint32 BuildJobCount;
	uint32 OccluderLodBoostLevelCount;
	float DecalZPassDrawDistance;
	float DecalOffsetY;
	float Decal3dFarDrawDistanceScaleFactor;
	float OccludedMinDistance;
	uint32 PatchFacesPerSide;
	bool DrawOnlyDecalZPassEnable;
	bool DrawDecal3dEnable;
	bool DrawTextureTileBoxesEnable;
	bool DrawEnable;
	bool DrawPatchBoxesEnable;
	bool DrawDebugTextEnable;
	bool DrawWaterEnable;
	bool PrioritizationSpuJobEnable;
	bool DrawDecalZPassEnable;
	bool DrawQuadtreesEnable;
	bool TextureVtIndirectionJobEnable;
	bool VertexBufferHeightsEnable;
	bool DrawDebugTexturesEnable;
	bool ForceDecalReducedQuality;
	bool DebugOverlayIsolinesEnable;
	bool TextureClodEnable;
	bool DebugOverlayWireframeEnable;
	bool DebugOverlaySketchTextureEnable;
	bool DrawDecal2dEnable;
	bool DetailOverlayEnable;
	bool DecalEnable;
	bool DrawPatchesEnable;
	bool DrawQuadtreeStatsEnable;
	bool DestroyAll;
	bool DrawQuadtreeAtlasTexturesEnable;
	bool SlotDebugOutputEnable;
	bool UpdateJobsEnable;
	bool PrioritizationOcclusionEnable;
	bool CullSpuJobEnable;
	bool PrepareBuildSpuJobEnable;
	bool BuildSpuJobEnable;
	bool RegenerateTexturesEnable;
	bool DynamicMaskEnable;
	bool GpuTextureCompressionEnable;
	bool TextureBlockOnStreamingEnable;
	bool PatchErrorFovEnable;
	bool DxDisplacementMappingEnable;
	bool TextureKeepPoolFullEnable;
	bool PatchLodTransitionsEnable;
	bool PatchMaterialSortingEnable;
	bool CullSampleBoundingBoxHeightEnable;
	bool CastShadowsEnable;
	bool GlobalColormapEnable;
	bool OccluderEnable;
	bool OccluderJobEnable;
	bool OccluderSpuJobEnable;
	bool TextureLayerCullingEnable;
	bool OccludedEnable;
	bool DrawTextureDebugDepthComplexity;
	bool MeshScatteringEnable;
	bool MeshScatteringJobsEnable;
	bool MeshScatteringCastShadowsEnable;
	bool DrawMeshScatteringEnable;
	bool DrawMeshScatteringCellBoxesEnable;
	bool DrawMeshScatteringNodeBoxesEnable;
	bool DrawMeshScatteringCulledCellBoxesEnable;
	bool DrawMeshScatteringDebugMaskScaleTexturesEnable;
	bool DrawMeshScatteringStatsEnable;
	bool DrawMeshScatteringQuadtreeEnable;
	bool TextureDrawTerrainLayersEnable;
	bool TextureForceUpdateEnable;
	bool TextureCompressFastAlgorithmEnable;
	bool MeshScatteringForceUpdateEnable;
	bool TextureCompressSpuJobsEnable;
	bool DrawTextureDebugColors;
	bool ForceGraphicsDriverCrash;
	bool MeshScatteringBuildVisibleFirst;
	bool ForcePatchRebuildEnable;
	bool DebugOverlayBrushEnable;
	bool WireframeEnable;
	bool TextureVtIndirectionSpuJobEnable;
	bool DrawVertexYTextureEnable;
	bool MeshScatteringInstanceCountLodEnable;
	bool MeshScatteringCullSpuJobEnable;
	bool MeshScatteringInstanceCullSpuJobEnable;
	bool MeshScatteringPrioritizationSpuJobEnable;
	bool MeshScatteringSpuJobEnable;
	bool Enable;
	bool EditServiceEnable;
	bool MeshScatteringInstanceCullEnable;
	bool ZeroViewportEnable;
	bool DebugOverlayGridEnable;
	bool MeshScatteringInstanceCullBoxTestEnable;
	bool MeshScatteringInstanceFrustumCullEnable;
	bool MeshScatteringInstanceOcclusionCullEnable;
	bool MeshScatteringInstanceAdditionalCullEnable;
	bool DrawMeshScatteringInstanceBoxesEnable;
	bool MeshScatteringInstanceCullDynamicAllocEnable;
	bool Ps3MeshScatteringInstanceCellMemoryEnable;
}

class VisualVectorShapeData : VectorShapeData {
	float ErrorTolerance;
	SurfaceShaderBaseAsset Shader3d;
	uint32 DrawOrderIndex;
	float TessellationTriangleSize;
}

class VoiceOverArithmeticNode : VoiceOverExpressionNode {
	VoiceOverValueConnection A;
	VoiceOverValueConnection B;
	VoiceOverValue Result;
	VoiceOverArithmeticExpressionType Operation;
}

class VoiceOverCharacterAsset : Asset {
}

class VoiceOverCompareNode : VoiceOverExpressionNode {
	VoiceOverValueConnection A;
	VoiceOverValueConnection B;
	VoiceOverValue False;
	VoiceOverValue True;
	VoiceOverCompareExpressionType Operation;
}

class VoiceOverConstantBooleanValue : VoiceOverConstantValue {
	bool Value;
}

class VoiceOverConstantFloatValue : VoiceOverConstantValue {
	float Value;
}

class VoiceOverConstantGlobalValue : VoiceOverConstantValue {
	VoiceOverGlobalConstantValue Source;
}

class VoiceOverConstantIntegerValue : VoiceOverConstantValue {
	int32 Value;
}

class VoiceOverConstantNode : VoiceOverExpressionNode {
	VoiceOverValue Value;
	VoiceOverConstantValue Source;
}

class VoiceOverConstantValue : DataContainer {
}

class VoiceOverConstantVectorValue : VoiceOverConstantValue {
	Vec4 Value;
}

class VoiceOverContainerNode : VoiceOverStructureNode {
	VoiceOverValueConnection[] Condition;
	VoiceOverIntervalNode Interval;
	VoiceOverStructureNode[] TrueRelationship;
	VoiceOverStructureNode[] FalseRelationship;
	VoiceOverContainerConditionMode ConditionMode;
	float Probability;
}

class VoiceOverConversationGroupEntityData : EntityData {
	VoiceOverConversationQueueGroup QueueGroup;
}

class VoiceOverConversationNode : VoiceOverStructureNode {
	VoiceOverDialogGroup[] Groups;
	VoiceOverValueConnection[] Condition;
	VoiceOverIntervalNode Interval;
	VoiceOverStructureNode[] FinishedRelationship;
	VoiceOverStructureNode[] BlockedRelationship;
	VoiceOverContainerConditionMode ConditionMode;
	float Probability;
	VoiceOverPronunciation Pronunciation;
	VoiceOverConversationInterruptMode InterruptMode;
	int32 Priority;
	VoiceOverConversationQueueMode QueueMode;
	float Relevancy;
	int8 TrackCount;
	int8 LastSequenceIndex;
}

class VoiceOverConversationQueueGroup : DataContainer {
	string Name;
	VoiceOverConversationQueueGroupPolyphony PolyphonyMode;
	uint32 Polyphony;
}

class VoiceOverDialogClip : DataContainer {
	float Offset;
	VoiceOverDialogTake[] Takes;
	VoiceOverDialogClip[] OffsetReferences;
	VoiceOverDialogClipEvents Events;
	int8 SequenceIndex;
}

class VoiceOverDialogClipEvents : DataContainer {
	uint32 StartedNameHash;
	uint32 FinishedNameHash;
}

class VoiceOverDialogGroup : DataContainer {
	SoundAsset Sound;
	VoiceOverDialogTrack[] Tracks;
}

class VoiceOverDialogTrack : DataContainer {
	VoiceOverValueConnection Source;
	VoiceOverValueConnection TakeControl;
	VoiceOverDialogTakeMapping[] TakeIndexMapping;
	VoiceOverDialogTakeBehavior TakeSwitching;
	VoiceOverDialogClip[] Clips;
	AudioGraphNodeData SamplerNode;
	AudioGraphNodeData Output;
	VoiceOverConversationQueueGroup QueueGroup;
	int8 ParentTrackIndex;
	bool TakeSwitchingOnResume;
}

class VoiceOverDistanceNode : VoiceOverExpressionNode {
	VoiceOverValueConnection A;
	VoiceOverValueConnection B;
	VoiceOverValueConnection Threshold;
	VoiceOverValue Distance;
	VoiceOverValue False;
	VoiceOverValue True;
	VoiceOverCompareExpressionType Operation;
}

class VoiceOverEvent : DataContainer {
	string Name;
	VoiceOverNamedValue[] Parameters;
	VoiceOverLogicAsset Owner;
}

class VoiceOverEventEntityData : EntityData {
	VoiceOverNamedValue EventPlayer;
	VoiceOverEvent VoEvent;
	float FinishedDelay;
	VoiceOverNamedValue ExtraEventPlayer;
	float TriggerDelay;
	bool RunOnce;
}

class VoiceOverEventNode : VoiceOverStructureNode {
	VoiceOverIntervalNode Interval;
	VoiceOverStructureNode[] Relationship;
	VoiceOverValueRedirect[] Redirects;
	VoiceOverEvent Event;
}

class VoiceOverExpressionNode : VoiceOverNode {
}

class VoiceOverGlobalConstantValue : DataContainer {
	string Name;
	VoiceOverConstantValue Source;
}

class VoiceOverGlobalNode : VoiceOverExpressionNode {
	VoiceOverValue Value;
	VoiceOverNamedValue Field;
	VoiceOverObject Object;
}

class VoiceOverGroup : DataContainer {
	string Name;
	int32 Priority;
}

class VoiceOverInfoNode : VoiceOverExpressionNode {
	VoiceOverValueConnection Object;
	VoiceOverValue Value;
	VoiceOverNamedValue Field;
	VoiceOverObject ExpectedType;
}

class VoiceOverInterval : DataContainer {
	string Name;
}

class VoiceOverIntervalNode : VoiceOverExpressionNode {
	VoiceOverValueConnection Threshold;
	VoiceOverValue Time;
	VoiceOverValue False;
	VoiceOverValue True;
	VoiceOverInterval Interval;
}

class VoiceOverLabel : DataContainer {
	string Name;
}

class VoiceOverLabelNode : VoiceOverExpressionNode {
	VoiceOverLabelSource[] Sources;
	VoiceOverValue False;
	VoiceOverValue True;
	VoiceOverLabel[] WantedLabels;
	VoiceOverLabel[] UnwantedLabels;
	VoiceOverLabelSourceMode SourceMode;
	VoiceOverLabelCompareMode WantedCompareMode;
	VoiceOverLabelCompareMode UnwantedCompareMode;
}

class VoiceOverLabelSource : DataContainer {
	VoiceOverValueConnection Source;
}

class VoiceOverLanguageRoot : DataContainer {
	AudioLanguage Language;
	string Path;
}

class VoiceOverLogicAsset : Asset {
	VoiceOverEvent[] Events;
	VoiceOverGroup[] Groups;
	VoiceOverLogicFlow[] Flows;
	VoiceOverSystemAsset System;
}

class VoiceOverLogicFlow : DataContainer {
	string Name;
	VoiceOverGroup Group;
	VoiceOverValue[] Locals;
	VoiceOverEventNode[] Roots;
}

class VoiceOverManuscriptAsset : Asset {
	AudioLanguage MasterLanguage;
	VoiceOverLanguageRoot[] Languages;
	VoiceOverWaveNameTranslation NameTranslation;
	string SheetName;
	string StringIdColumn;
	string FileNameColumn;
	string PathColumn;
	string WaveAssetStatusColumn;
	string CharacterColumn;
	string VoiceColumn;
	string StringIdPrefix;
	VoiceOverManuscriptLanguageColumns[] LanguageColumns;
	int32 FirstContentRow;
	string OutputPath;
	StreamPoolAsset StreamPool;
	bool KeepPath;
	bool StringIdUpperCase;
	bool AllowDelete;
}

class VoiceOverNamedValue : VoiceOverValue {
	string Name;
}

class VoiceOverNode : DataContainer {
}

class VoiceOverObject : VoiceOverNamedValue {
	VoiceOverNamedValue[] Properties;
}

class VoiceOverProbabilityNode : VoiceOverExpressionNode {
	VoiceOverValue False;
	VoiceOverValue True;
	float Probability;
}

class VoiceOverPronunciation : DataContainer {
	string Name;
	AudioLanguage PrimaryLanguage;
	AudioLanguage SecondaryLanguage;
	VoiceOverPronunciationFallback SecondaryFallback;
}

class VoiceOverRelationshipInput : DataContainer {
}

class VoiceOverStructureConnection : DataContainer {
	VoiceOverStructureNode TargetNode;
	VoiceOverRelationshipInput TargetInput;
}

class VoiceOverStructureNode : VoiceOverNode {
	VoiceOverLogicFlowMode FlowMode;
}

class VoiceOverSystemAsset : Asset {
	VoiceOverInterval[] Intervals;
	VoiceOverLabel[] Labels;
	VoiceOverObject[] Types;
	VoiceOverObject[] Objects;
	VoiceOverGlobalConstantValue[] Constants;
	AudioLanguage MasterLanguage;
	VoiceOverPronunciation DefaultPronunciation;
	VoiceOverPronunciation[] Pronunciations;
	VoiceOverConversationQueueGroup[] QueueGroups;
	VoiceOverConversationQueueGroup DefaultPositionedQueueGroup;
	VoiceOverConversationQueueGroup DefaultUnpositionedQueueGroup;
}

class VoiceOverTriggerNode : VoiceOverStructureNode {
	VoiceOverTriggerParameter[] Parameters;
	float Delay;
	VoiceOverEvent Event;
}

class VoiceOverTriggerParameter : DataContainer {
	VoiceOverValueConnection Source;
	VoiceOverNamedValue EventParameter;
}

class VoiceOverValue : DataContainer {
	VoiceOverValueType ValueType;
}

class VoiceOverValueConnection : DataContainer {
	VoiceOverExpressionNode TargetNode;
	VoiceOverValue TargetValue;
}

class VoiceOverValueRedirect : DataContainer {
	VoiceOverValue Source;
	VoiceOverValue Target;
}

class VoiceOverVariableNode : VoiceOverExpressionNode {
	VoiceOverValue Value;
	VoiceOverNamedValue Source;
}

class VolumeVectorShapeData : VectorShapeData {
	float Height;
}

class WarningSystemComponentData : ComponentData {
	SoundAsset AimWarnSoundEffect;
	SoundAsset MissileWarnSoundEffect;
	SoundAsset LowHealthWarnSoundEffect;
	SoundAsset LockingWarnSoundEffect;
	SoundAsset LockedWarnSoundEffect;
	WarningPlayerType PlayerType;
}

class WarpAnimationComponentData : ComponentData {
	LinearTransform ConnectTransform;
	CannedAnimationBinding CannedAnimBinding;
	int32 AnimationEntitySpacePriority;
	WarpAnimationBinding WarpBinding;
	GameplayBones BoneToAlign;
	bool RequireAnimationWeight;
	bool ForceAnimationTransform;
	bool ExternalConnectTransform;
}

class WarpAnimationEntityData : EntityData {
	LinearTransform ConnectTransform;
	int32 AnimationEntitySpacePriority;
	WarpAnimationBinding WarpBinding;
	GameplayBones BoneToAlign;
	bool ForceAnimationTransform;
	bool RequireAnimationWeight;
	bool ExternalConnectTransform;
}

class WaterAsset : Asset {
}

class WaterData : Asset {
}

class WaterEntityData : GamePhysicsEntityData {
	WaterAsset Asset;
}

class WaveSwitcherNodeData : AudioGraphNodeData {
	AudioGraphNodePort Index;
	AudioGraphNodePort Advance;
	AudioGraphNodePort Wave;
	AudioGraphNodePort IndexChanged;
	SoundWaveAsset[] Waves;
	float DefaultIndex;
	bool IsRandom;
	bool RandomStartIndex;
}

class WaypointComponentData : ComponentData {
	bool Looping;
}

class WaypointData : DataContainer {
	int32 SchematicsNameHash;
	uint16 WaypointId;
	bool UseClientsPosition;
}

class WaypointsShapeData : VectorShapeData {
	WaypointData[] Waypoints;
}

class WaypointTriggerEntityData : EntityData {
	Realm Realm;
}

class WeaponAimingSimulationModifier : WeaponModifierBase {
	SoldierAimingSimulationData AimingController;
}

class WeaponAnimatedFireTypeModifier : WeaponModifierBase {
	AnimatedFireEnum AnimatedFireType;
}

class WeaponAnimationConfigurationModifier : WeaponModifierBase {
	float[] ZoomInOutMeshTransitionFactors;
	AnimationConfigurationData AnimationConfiguration;
	AnimatedFireEnum AnimatedFireType;
}

class WeaponAnimTypeModifier : WeaponModifierBase {
	WeaponAnimType WeaponAnimType;
}

class WeaponClassModifier : WeaponModifierBase {
	WeaponClassEnum WeaponClass;
}

class WeaponComponentData : PartComponentData {
	Vec3 ProjectileSpawnOffset;
	float ImpulseStrength;
	MeshAsset WeaponMesh;
	WeaponFiringData WeaponFiring;
	string DamageGiverName;
	GameAIWeaponData AIData;
	WeaponData CustomWeaponType;
	WeaponClassification Classification;
	float ExplosionDamageMultiplier;
	float ReloadTimeMultiplier;
	float DamageMultiplier;
	uint32 WeaponItemHash;
	float OverheatDropPerSecondMultiplier;
	float LockTimeMultiplier;
	float LockingAcceptanceAngleMultiplier;
	bool SequentialFiring;
}

class WeaponData : ToolData {
	bool ShowLaserPaintedVehicles;
}

class WeaponDeployTimeModifier : WeaponModifierBase {
	float DeployTime;
	float DisableZoomOnDeployTime;
	float AltDeployTime;
	int32 AltDeployId;
}

class WeaponEntityData : GameEntityData {
	WeaponStateData[] WeaponStates;
	WeaponClassEnum WeaponClass;
	GameAIWeaponData AIData;
	WeaponFiringData WeaponFiring;
	WeaponData CustomWeaponType;
}

class WeaponFiringData : GameDataContainer {
	FiringFunctionData PrimaryFire;
	float DeployTime;
	float ReactivateCooldownTime;
	float DisableZoomOnDeployTime;
	float AltDeployTime;
	int32 AltDeployId;
	WeaponSwayData WeaponSway;
	float SupportDelayProne;
	float SupportDelayStand;
	RumbleFiringData Rumble;
	bool InflictSelfDamage;
	bool UseAutoAiming;
	bool ShowEnemyNametagOnAim;
	bool ReloadWholeMags;
	bool DisableReloadWhileSprinting;
	bool AbortReloadOnSprint;
}

class WeaponFiringDataAsset : GameDataContainerAsset {
}

class WeaponFiringDataModifier : WeaponModifierBase {
	WeaponFiringData WeaponFiring;
}

class WeaponFiringEffectsModifier : WeaponModifierBase {
	FireEffectData[] FireEffects1p;
	FireEffectData[] FireEffects3p;
}

class WeaponInputRouterComponentData : ComponentData {
	float MaxFireRate;
	uint32 RotationCount;
}

class WeaponLagEntityData : EntityData {
	WeaponLagBinding Binding;
}

class WeaponLagSpringEffectData : DataContainer {
	WeaponLagEffectSpringVector OffsetSprings;
	WeaponLagEffectSpringVector RotationSprings;
	WeaponLagEffectForceData JumpForces;
	WeaponLagEffectForceData LandForces;
	WeaponLagEffectForceData PoseUpForces;
	WeaponLagEffectForceData PoseDownForces;
	float ZoomForceModifier;
}

class WeaponMagazineModifier : WeaponModifierBase {
	int32 MagazineCapacity;
	int32 NumberOfMagazines;
}

class WeaponMiscModifier : WeaponModifierBase {
	bool EnableBreathControl;
	bool CanBeInSupportedShooting;
	bool UnZoomOnBoltAction;
	bool HoldBoltActionUntilZoomRelease;
	bool IsSilenced;
}

class WeaponModifierBase : DataContainer {
}

class WeaponOffsetData : DataContainer {
	float WeaponOffsetX;
	float WeaponOffsetY;
	float WeaponOffsetZ;
	float WeaponZoomedOffsetX;
	float WeaponZoomedOffsetY;
	float WeaponZoomedOffsetZ;
}

class WeaponOverrideData : DataContainer {
	DataContainer Data;
	WeaponOverrideValue[] Values;
}

class WeaponPickupEntityData : PickupEntityData {
	WeaponPickupData[] Weapons;
	bool UseForPersistence;
}

class WeaponProjectileModifier : WeaponModifierBase {
	ProjectileEntityData ProjectileData;
}

class WeaponRegularSocketObjectData : WeaponSocketObjectData {
	LinearTransform Transform;
	LinearTransform[] Mesh3pTransforms;
}

class WeaponShotModifier : WeaponModifierBase {
	Vec3 InitialSpeed;
	int32 NumberOfBulletsPerShell;
}

class WeaponSkinnedSocketObjectData : WeaponSocketObjectData {
}

class WeaponSocketObjectData : SocketObjectDataBase {
	uint32[] ReferencedAssetHashes;
	Asset Asset1p;
	Asset Asset1pzoom;
	Asset Asset3p;
}

class WeaponSoundModifier : WeaponModifierBase {
	SoundAsset Sound;
}

class WeaponSpeedData : DataContainer {
	float ZoomOutSpeed;
	float ZoomInSpeed;
	float UnDeploySpeed;
	float DeploySpeed;
}

class WeaponStateEntityData : EntityData {
	Realm Realm;
	int32 WeaponSlot;
}

class WeaponSuppressionData : DataContainer {
	float MaxMultiplier;
	float MinMultiplier;
	float MinDistance;
	float MaxDistance;
}

class WeaponSwayData : DataContainer {
}

class WeaponUnlockPickupEntityData : PickupEntityData {
	WeaponUnlockPickupData[] Weapons;
	bool UseForPersistence;
	bool RandomlySelectOneWeapon;
}

class WeaponZoomModifier : WeaponModifierBase {
	float ZoomRenderFov;
}

class WebPresenceBackendData : PresenceBackendData {
}

class WheelComponentData : PartComponentData {
	WheelConfigData Config;
	WheelPhysicsType PhysicsType;
	float EffectClampVelocity;
}

class WheelConfigData : DataContainer {
	Vec3 Offset;
	Vec3 Inertia;
	RotationBodyData RotationBody;
	SphereCollisionData SphereCollision;
	SpringData Spring;
	float Mass;
	float Radius;
	float Width;
	float RollingResistanceInternalBaseFactor;
	float RollingResistanceBaseFactor;
	float RollingResistanceVelocityFactor;
	float EngineBrakeVelocityFactor;
	float EngineBrakeMinFactor;
	float EngineBrakeMaxFactor;
	Vec2[] TransmissionLoss;
	float DiffGearRatio;
	float LowSpeedSteeringSensitivity;
	float MidSpeedSteeringSensitivity;
	float HighSpeedSteeringSensitivity;
	float SensitivityRangeScale;
	float LowSpeedSteeringSensitivityLimit;
	float MidSpeedSteeringSensitivityLimit;
	float HighSpeedSteeringSensitivityLimit;
	float TrackedTurnSpeedLimit;
	float TrackedForwardSpeedLimit;
	Curve2D SteerInertia;
	SensitivityAtVelocity[] SteeringSensitivity;
	float SlopeGripMinAngle;
	float SlopeGripMaxAngle;
	int32 SlopeGripExponent;
	float OffGroundGravityModifier;
	float SideSlipAngleMaxSlipCondition;
	float AngularVelocityMinSlipCondition;
	float WheelVelocityXMinSlipCondition;
	float WheelSlipRatioMaxSlipCondition;
	float LongitudinalFrictionForceMaxFactor;
	float LateralFrictionForceMaxFactor;
	FrictionScaleAtVelocity[] LongitudeFrictionScale;
	FrictionScaleAtVelocity[] LattitudeFrictionScale;
	float WheelFrictionLattitudeBrakeScale;
	float MaxSlipRatio;
	float Resistance;
	float FxTorqueRadiusMultiplier;
	float FrictionMomentVelocityMin;
	float FrictionMomentVelocityMax;
	float FrictionMomentMultiplier;
	float FrictionMomentMaxFactor;
	float BrakeFactor;
	float BrakeForce;
	float HandBrakeFactor;
	float HandBrakeForce;
	float LateralPosK;
	float LateralNegK;
	float LongitudinalPosK;
	float LongitudinalNegK;
	float AlignMomScale;
	float WheelBaseLateral;
	float WheelBaseLongitudinal;
	int32 DrivingType;
	int32 SteeringType;
	int32 FrictionMethod;
	int32 AckermanDeviceType;
	float CollisionYawDampeningDuration;
	float CollisionYawDampening;
	float ConstantSpringForceFrictionScale;
	int32 RotationDirectionIndex;
	int32 SteeringAngleIndex;
	int32 PacejkaConfigIndex;
	int32 EngineIndex;
	MaterialContainerPair CollisionMaterialPair;
	bool AlwaysGrip;
	bool UseRollingResistanceBaseFactor;
	bool UseEngineBrake;
	bool IsAllowedToSpin;
	bool HasSteeringInverted;
	bool UseFrictionMoment;
	bool UseLowSpeedAutoBrake;
	bool AdjustWheelRotation;
	bool UseRollingResistanceVelocityFactor;
}

class WidgetNode : UINodeData {
	UIWidgetAsset WidgetAsset;
	int32 FocusIndex;
	int32 ZDepthLevel;
	WidgetVerticalAlignment VerticalAlign;
	WidgetHorisontalAlignment HorisontalAlign;
	UIDataBinding DataBinding;
	UIWidgetProperty[] WidgetProperties;
	string InstanceName;
	UINodePort[] Inputs;
	UINodePort[] Outputs;
	bool AlwaysInFocus;
}

class WindComponentData : ComponentData {
	Realm Realm;
	float WindDirection;
	float WindStrength;
}

class WindowSettings : SystemSettings {
	int32 PosX;
	int32 PosY;
	uint32 Width;
	uint32 Height;
	bool BordersEnable;
	bool AutoSize;
	bool FullscreenAutoSize;
	bool FullscreenWhenJoiningServer;
	bool EnableEscape;
	bool EnableInputOnActivate;
	bool HibernateOnClose;
	bool Hidden;
	bool Minimized;
}

class WingComponentData : PartComponentData {
	WingPhysicsData Config;
}

class WingPhysicsData : DataContainer {
	float Lift;
	float FlapLift;
	Curve2D LiftCoefficient;
	float Drag;
	float FlapDrag;
	Curve2D DragCoefficient;
	float AngularVelocityLiftModifier;
	float DragRotationModifier;
	float BaseAngleOfAttack;
	int32 InputForFlap;
	float FlapTurnSpeed;
	float VisualFlapTurnSpeed;
	float VisualFlapAngleLimit;
	Curve2D MaxFlapAngleScaleFactor;
	float LandingFlapLift;
	LandingFlapData LandingFlapLogic;
}

class WorldData : SubWorldData {
	MaterialGridData RuntimeMaterialGrid;
}

class WorldObjectListData : DataContainer {
}

class WorldPartData : SpatialPrefabBlueprint {
	guid HackToSolveRealTimeTweakingIssue;
	bool UseDeferredEntityCreation;
	bool Enabled;
}

class WorldPartInclusion : SubWorldInclusion {
}

class WorldPartInclusionCriterion : SubWorldInclusionCriterion {
}

class WorldPartInclusionSetting : SubWorldInclusionSetting {
}

class WorldPartInclusionSettings : SubWorldInclusionSettings {
}

class WorldPartReferenceObjectData : ReferenceObjectData {
}

class WorldRenderSettings : DataContainer {
	Vec3 DynamicEnvmapDefaultPosition;
	Vec3 SubSurfaceColor;
	float ViewportScale;
	float ShadowMinScreenArea;
	float ShadowViewportScale;
	uint32 FxaaQuality;
	float CullScreenAreaScale;
	float PlanarReflectionCullFOV;
	uint32 GenericEntityMaxVisibleEntityCount;
	float ShadowmapSizeZScale;
	uint32 ShadowmapResolution;
	uint32 ShadowmapQuality;
	float ShadowmapPoissonFilterScale;
	uint32 ShadowmapSliceCount;
	float ShadowmapSliceSchemeWeight;
	float ShadowmapFirstSliceScale;
	float ShadowmapViewDistance;
	uint32 PlanarReflectionWidth;
	float ShadowmapExtrusionLength;
	float ShadowmapMinScreenArea;
	float TempPlanarReflectionY;
	float SubSurfaceRolloffKeyLight;
	int32 FxaaForceVendor;
	uint32 PlanarReflectionHeight;
	float LightIntensityScale;
	float LightLodSpecularFadeAreaEnd;
	float ShadowmapMinFov;
	float LightLodSpecularFadeAreaStart;
	float LightLodRadiusFactor;
	float LightForceIntensity;
	float LightLodFadeArea;
	float LightLodMinArea;
	int32 DrawDebugDynamicEnvmapMipLevel;
	uint32 MaxDecalVolumeCount;
	float MotionBlurScale;
	float MotionBlurMax;
	float MotionBlurNoiseScale;
	uint32 MotionBlurQuality;
	uint32 MaxSpotLightShadowCount;
	MipmapFilterMode DynamicEnvmapFilterMode;
	uint32 MotionBlurMaxSampleCount;
	uint32 MotionBlurFrameAverageCount;
	float MotionBlurMaxFrameTime;
	float ForceMotionBlurDepthCutoff;
	float ForceMotionBlurCutoffGradientScale;
	uint32 MultisampleCount;
	float MultisampleThreshold;
	uint32 MaxPointLightCount;
	uint32 ReflectionEnvmapSize;
	float SpotLightNearPlane;
	float SpotLightShadowmapPoissonFilterScale;
	int32 OnlyShadowmapSlice;
	WorldViewMode ViewMode;
	uint32 SpotLightShadowmapResolution;
	QualityLevel SpotLightShadomapLevel;
	uint32 SpotLightShadowmapQuality;
	int32 OnlyLightTileY;
	int32 OnlyLightTileX;
	float XenonHdrColorScale;
	float XenonHdrColorScaleFactor;
	uint32 Ps3LightTileJobMaxFbTileCount;
	int32 OnlyLightTileIndex;
	uint32 Ps3LightTileJobCount;
	uint32 Ps3LightTileJobPriority;
	uint32 XenonLightTileMaxLineLightCount;
	uint32 XenonLightTileMaxSpotLightCount;
	uint32 XenonLightTileConstantBufferSize;
	uint32 XenonLightTileMaxPointLightCount;
	uint32 MaxDestructionVolumeCount;
	float DynamicEnvmapFilterWidth;
	float LightTileMinArea;
	uint32 DynamicEnvmapResolution;
	ShaderGBufferLayout GBufferLayout;
	int32 DrawDebugSkyEnvmapMipLevel;
	float DecalVolumeScale;
	uint32 LightOverdrawMaxLayerCount;
	float LightRadiusScale;
	float LightAttenuationThreshold;
	uint32 Ps3LightTileMethod;
	float Ps3LightTileJobYieldGranularity;
	uint32 OutdoorLightTileBatchCount;
	uint32 XenonDrawDebugLightTileGridMode;
	float LightStencilMinArea;
	uint32 MaxSpotLightCount;
	MipmapFilterMode SkyEnvmapFilterMode;
	float SkyEnvmapFilterWidth;
	uint32 GBufferTestCount;
	uint32 SkyEnvmapResolution;
	uint32 SkyEnvmapSidesPerFrameCount;
	float SubSurfaceRolloffLocalLight;
	int32 OnlyTileIndex;
	bool OccluderMeshZPrepassEnable;
	bool OccluderMeshZPrepassDebugEnable;
	bool WireframeEnable;
	bool HalfResEnable;
	bool HalfResLensFlaresEnable;
	bool ZPassEnable;
	bool ForegroundEnable;
	bool TiledHalfResCompositeEnable;
	bool ForegroundZPassEnable;
	bool DrawDebugVelocityBuffer;
	bool ForegroundDepthClearEnable;
	bool ForegroundAsMainEnable;
	bool CustomEnvmapEnable;
	bool SkyEnvmapEnable;
	bool DrawDebugVisibleEntityTypes;
	bool DrawDebugHalfResEnvironment;
	bool DrawSolidBoundingBoxes;
	bool BilateralHalfResCompositeEnable;
	bool ForegroundTransparentEnable;
	bool TiledHalfResStencilOccludersEnable;
	bool SkyEnvmapUpdateEnable;
	bool SkyEnvmapForceUpdateEnable;
	bool SkyEnvmapUse8BitTexture;
	bool DynamicEnvmapEnable;
	bool ScreenEffectEnable;
	bool DrawDebugZBufferEnable;
	bool MotionBlurStencilPassEnable;
	bool FinalPostEnable;
	bool DrawDebugQuarterShadowmaps;
	bool DrawDebugSkyEnvmap;
	bool DxShadowmap16BitEnable;
	bool DrawDebugTransShadowmap;
	bool DrawDebugSpotLightShadowmaps;
	bool DrawShadowFrustums;
	bool DrawDebugShadowmaps;
	bool SkyEnable;
	bool DrawBoundingSpheres;
	bool DrawFrustums;
	bool StaticEnvmapEnable;
	bool SkyFogEnable;
	bool DrawLineBoundingBoxes;
	bool DrawDebugDestructionVolumes;
	bool LensFlaresEnable;
	bool DrawDebugLensFlareOccluders;
	bool DrawDebugLensFlares;
	bool LensFlareOcclusionEnable;
	bool DrawDebugWorldOcclusions;
	bool CloudShadowEnable;
	bool OverrideDynamicAO;
	bool DrawDebugDynamicAO;
	bool EmissiveEnable;
	bool UnlitEnable;
	bool SkyEnvmapMipmapGenEnable;
	bool DrawLightSources;
	bool GBufferClearEnable;
	bool DxGBufferLight16BitEnable;
	bool DxGBufferNormal16BitEnable;
	bool GBufferAlphaTestSimpleEnable;
	bool SpecularLightingEnable;
	bool SkinLightingEnable;
	bool TranslucencyLightingEnable;
	bool DynamicEnvmapLightingEnable;
	bool OutdoorLightEnable;
	bool PointLightsEnable;
	bool LineLightsEnable;
	bool ConeLightsEnable;
	bool SpotLightsEnable;
	bool LightProbesEnable;
	bool LightStencilMethodEnable;
	bool LightVolumeMethodEnable;
	bool LightVolumeDepthTestEnable;
	bool OutputGammaCorrectionEnable;
	bool DrawDebugMultisampleClassify;
	bool OutdoorKeyLightEnable;
	bool OutdoorSkyLightEnable;
	bool OutdoorLightSpecularEnable;
	bool OutdoorLightTilingEnable;
	bool OutdoorLightTileRenderEnable;
	bool OutdoorLightTileBlendEnable;
	bool OutdoorLightTileSimpleShaderEnable;
	bool Ps3TiledHalfTargetEnable;
	bool XenonOutdoorLightTilingEnable;
	bool XenonPointLightsTilingEnable;
	bool XenonSpotLightsTilingEnable;
	bool XenonLineLightsTilingEnable;
	bool XenonAsyncLightJobsEnable;
	bool XenonLightTileDownsampleSpecularCheckEnable;
	bool XenonLightTileCpuPointLightCullingEnable;
	bool Ps3TiledSSAOTargetsEnable;
	bool Ps3SCullEnable;
	bool Ps3ColorCompressionEnable;
	bool Enable;
	bool Ps3TilingEnable;
	bool Ps3DepthBoundsLightCullingEnable;
	bool Ps3ZCullEnable;
	bool ConsoleRenderTargetPoolSharingEnable;
	bool XenonFloatDepthBufferEnable;
	bool Ps3LightTileJobYieldEnable;
	bool Ps3HdrClearEnable;
	bool XenonFastHdrEnable;
	bool ShadowmapViewDistanceScaleEnable;
	bool Ps3RenderTargetPoolGBufferOffsetEnable;
	bool HdrEnable;
	bool SpotLightShadowmapEnable;
	bool SimpleShadowmapsEnable;
	bool DrawTransparent;
	bool DrawTransparentDecal;
	bool ShadowmapFixedDepthEnable;
	bool DrawDebugDynamicEnvmap;
	bool MotionBlurGeometryPassEnable;
	bool DxLinearDepth32BitFormatEnable;
	bool DynamicEnvmapMipmapGenEnable;
	bool MotionBlurEnable;
	bool ColoredShadowmapSlicesEnable;
	bool DxDeferredCsPathEnable;
	bool DrawDebugGBuffer;
	bool DrawDebugLightSources;
	bool DrawDebugLightShadowSources;
	bool DrawDebugLightStats;
	bool DrawDebugLightTiles;
	bool DrawDebugLightTileVolumes;
	bool DrawDebugLightTileFbGrid;
	bool DrawDebugLightTileGrid;
	bool DrawDebugLightTileSources;
	bool ApplyShadowmapsEnable;
	bool GenerateShadowmapsEnable;
	bool DxSpotLightShadowmap16BitEnable;
	bool Ps3Shadowmap16BitEnable;
	bool Ps3SpotLightShadowmap16BitEnable;
	bool GenericEntityRendererEnable;
	bool SetupJobEnable;
	bool ShadowmapAccumBilinearEnable;
	bool LightWidthEnable;
	bool LightIntensityNormalizationEnable;
	bool LightCullEnable;
	bool LightDepthCullEnable;
	bool LightNormalCullEnable;
	bool LightConeCullEnable;
	bool LightTileOverlayEnable;
	bool Ps3ShadowmapTilingEnable;
	bool LightAttenuationThresholdEnable;
	bool SkyVisibilityEnvmapScalingEnable;
	bool ZBufferShadowTestEnable;
	bool ShadowmapsEnable;
	bool ShadowmapAccumEnable;
	bool ShadowmapCullVolumeEnable;
	bool OpaqueSortBySolutionEnable;
	bool MainOpaqueZPassEnable;
	bool DrawDebugDecalVolumes;
	bool PlanarReflectionEnable;
	bool TransparencyShadowmapsEnable;
	bool DynamicCullDrawOccludedBoxesEnable;
	bool PlanarReflectionBlur;
	bool DrawDebugPlanarReflectionCullFrustum;
	bool FreezePlanarReflectionCullFrustum;
	bool PlanarReflectionDebugCullMode;
	bool ShadowmapFixedMovementEnable;
	bool DecalVolumeEnable;
	bool DrawDebugPlanarReflection;
	bool FxaaEnable;
	bool DynamicCullSpuJobEnable;
	bool DynamicCullZBufferTestEnable;
	bool ViewFxEnable;
}

class XenonPresenceBackendData : PresenceBackendData {
	uint32 TitleId;
}

class XorEntityData : EntityData {
	Realm Realm;
	bool In1;
	bool In2;
}

class ZoomLevelData : DataContainer {
	float FieldOfView;
	float DispersionMultiplier;
	float LookSpeedMultiplier;
	float SprintLookSpeedMultiplier;
	float MoveSpeedMultiplier;
	float SwayPitchMultiplier;
	float SwayYawMultiplier;
	float SupportedSwayPitchMultiplier;
	float SupportedSwayYawMultiplier;
	float TimePitchMultiplier;
	float TimeYawMultiplier;
	float RecoilMultiplier;
	float FadeToBlackDuration;
	float RecoilFovMultiplier;
	float CameraImpulseMultiplier;
	ZoomLevelActivateEventType OnActivateEventType;
	float StartFadeToBlackAtTime;
	float FadeFromBlackDuration;
	float StartFadeFromBlackAtTime;
	float ScreenExposureAreaScale;
	bool FadeToBlackInZoomTransition;
	bool UseFovSpecialisation;
	bool AllowFieldOfViewScaling;
}
