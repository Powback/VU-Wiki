class AABBData : BaseShapeData {
	Vec3 Position;
	Vec3 HalfExtents;
}

class AbstractAwardData : TreeNodeBase {
}

class AbstractLeaderboardData : DataContainer {
	string LeaderboardName;
}

class AbstractLocoWaypointData : WaypointData {
	AILocoBaseTaskData BaseTask;
}

class AbstractPersistenceData : Asset {
}

class AbstractPersistentStatRef : DataContainer {
}

class ActionNode : UINodeData {
	int32 ActionKey;
	string[] Params;
	Asset ActionAsset;
	UINodePort In;
	UINodePort Out;
	UINodePort[] DataInputs;
	bool AppendIncomingParams;
}

struct ActionSuppressor {
	EntryInputActionEnum ActionToSuppress;
	float SuppressingValue;
}

enum AddGameBanResponseType {
	AddGameBanResponseType_Success = 0,
	AddGameBanResponseType_Failure = 1,
	AddGameBanResponseType_UserNotFound = 2,
	AddGameBanResponseType_UserCannotBeBanned = 3
}

enum AdministrationEventType {
	AdministrationEventType_Add = 0,
	AdministrationEventType_Remove = 1,
	AdministrationEventType_Clear = 2,
	AdministrationEventType_List = 3,
	AdministrationEventType_Load = 4,
	AdministrationEventType_Save = 5
}

enum AdministrationRestrictionLevel {
	AdministrationRestrictionLevel_Zero = 0,
	AdministrationRestrictionLevel_One = 1,
	AdministrationRestrictionLevel_Two = 2,
	AdministrationRestrictionLevel_Three = 3,
	AdministrationRestrictionLevel_Count = 4
}

class AdsrNodeData : AudioGraphNodeData {
	AudioGraphNodePort Trigger;
	AudioGraphNodePort Release;
	AudioGraphNodePort A;
	AudioGraphNodePort D;
	AudioGraphNodePort S;
	AudioGraphNodePort R;
	AudioGraphNodePort Value;
	AudioGraphNodePort Finished;
}

class AdvancedDogTagData : DogTagData {
	string StatCode;
	string StatSID;
	bool IsStatMeasuredInTime;
}

class AdvertisementComponentData : PartComponentData {
	string Identifier;
	string AdTexture;
}

class AdvertisementLevelDescriptionComponent : LevelDescriptionComponent {
	string Identifier;
	AdvertisementZoneMember[] Members;
}

struct AdvertisementZoneMember {
	string Identifier;
	string Filename;
}

class AeroDynamicPhysicsData : DataContainer {
	Vec3 BodyDrag;
	Vec3 BodyDragOffsetYZ;
	Vec3 BodyDragOffsetXZ;
	Vec3 BodyDragOffsetXY;
}

class AIAimingConstraintsData : DataContainer {
	float MinYaw;
	float MaxYaw;
	float MinPitch;
	float MaxPitch;
}

enum AIAltFireFromAntState {
	AltFireFromAntState_NoForcedFire = 0,
	AltFireFromAntState_Prepare = 1,
	AltFireFromAntState_ForceFire = 2
}

enum AIDeathReactionAnimationType {
	AIDeathReactionAnimationType_1 = 0,
	AIDeathReactionAnimationType_2 = 1,
	AIDeathReactionAnimationType_3 = 2,
	AIDeathReactionAnimationType_4 = 3,
	AIDeathReactionAnimationType_5 = 4,
	AIDeathReactionAnimationType_Count = 5
}

class AIDifficultyData : GameAIDifficultyData {
	string Name;
	float AccuracyIncreaseTimeModifier;
	float StartAccuracyModifierStanding;
	float StartAccuracyModifierCrouching;
	float FinalAccuracyModifierStanding;
	float FinalAccuracyModifierCrouching;
	float ReadinessReactionTimeMultiplier;
}

class AIEntryData : GameAIEntryData {
	AIVehicleBehaviourData EquipmentType;
	ArmamentData Armament;
	MobilityData Mobility;
	StrengthType StrengthType;
	float ReuseTime;
	bool Forbidden;
	bool HasExposedSoldier;
	bool InterludeOnly;
	bool InvalidForAI;
}

class AiffWriterNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Start;
	AudioGraphNodePort Stop;
	SoundGraphPluginRef Plugin;
	string FileName;
}

enum AIHitReactionAnimationType {
	AIHitReactionAnimationType_1 = 0,
	AIHitReactionAnimationType_2 = 1,
	AIHitReactionAnimationType_3 = 2,
	AIHitReactionAnimationType_4 = 3,
	AIHitReactionAnimationType_5 = 4,
	AIHitReactionAnimationType_Count = 5
}

struct AILocoBaseTaskData {
	AntPoseEnum PoseChangeMovingTowards;
	AntAttentionStateEnum AttentionChangeMovingTowards;
	AntSpeedLevel SpeedChangeMovingTowards;
	AntPoseEnum PoseChange;
	AntAttentionStateEnum AttentionStateChange;
	AntSpeedLevel SpeedLevelChange;
	float Radius;
	bool IsScripted;
}

struct AILocoBinding {
	AntRef LocoTarget;
	AntRef AttentionState;
	AntRef EndPoseEnum;
	AntRef CurrentPoseEnum;
	AntRef EnterExitPoseEnum;
	AntRef RunStyle;
	AntRef TargetWaypointPosition;
	AntRef TargetSpeedLevel;
	AntRef EnableProceduralHeadAim;
}

class AILocoComponentData : ComponentData {
	AILocoBinding Binding;
	AILocoVaultBinding VaultBinding;
	AILocoCoverBinding CoverBinding;
	float WantedYaw;
	int32 AnimationEntitySpacePriority;
}

struct AILocoCoverBinding {
	AntRef PrepareFire;
	AntRef ThrowGrenade;
	AntRef PeekOut;
	AntRef IdleBehindCover;
	AntRef PeekType;
	AntRef CoverTypeEnum;
	AntRef CoverFireStyle;
	AntRef EnterCover;
	AntRef ExitCover;
	AntRef IsCloseCover;
	AntRef DistanceScale;
	AntRef AbsoluteDistance;
	AntRef AngleToNormal;
	AntRef OutAngle;
	AntRef ThreatAngle;
	AntRef StopExitCoverOutAround;
	AntRef EnterStrategy;
	AntRef ExitStyle;
}

struct AILocoCoverTaskData {
	Vec3 WantedPos;
	Vec3 ThreatPosition;
	AntPoseEnum CoverPose;
	float WaitTime;
	CoverPeekType PeekOut;
	float WorldAngle;
	float OffsetLength;
	AntPoseEnum ExitPose;
	float ExitAngle;
	float DistanceToNextWaypoint;
	AntCoverEnum CoverType;
	CoverEnterStrategy EnterStrategy;
	CoverExitStyle ExitStyle;
	CoverFireType PrepareFireType;
	bool ForceExitCover;
	bool UseClientPosition;
}

struct AILocoMoveTaskData {
	Vec3 WantedPos;
	float WorldAngle;
	float WaitTime;
	AntPoseEnum EnterPose;
	AntPoseEnum ExitPose;
	bool OverrideAngle;
	bool UseClientPosition;
}

struct AILocoVaultBinding {
	AntRef Vault;
	AntRef DistanceBeforeVault;
	AntRef HeightBeforeVault;
	AntRef LengthOfVaultableObject;
	AntRef HeightAfterVault;
	AntRef DistanceAfterVault;
	AntRef VaultType;
}

struct AILocoVaultTaskData {
	Vec3 StartPoint;
	float DistanceBeforeVault;
	float HeightBeforeVault;
	float HeightAfterVault;
	float LengthOfVaultableObject;
	float WorldAngle;
	float DistanceAfterVault;
	WaypointVaultType VaultType;
	bool UseClientPosition;
}

class AimAtOrderEntityData : BFOrderEntityData {
}

class AimerModifierData : Asset {
	float LookSpeedMultiplier;
	bool OnlyInSupportedShooting;
}

struct AimingConstraintEntityBinding {
	AntRef ProneAimLimit;
	AntRef ProneAimDistance;
}

class AimingConstraintEntityCommonData : Asset {
	AimingConstraintEntityBinding AimingConstraintsBinding;
	AimingConstraintsData AimingConstraints;
	float DisableAimingConstraintsDelay;
	float ConstraintMoveSpeedMultiplier;
	float ShuffleAnimationThreshold;
	float ShuffleAnimationDelay;
}

class AimingConstraintEntityData : EntityData {
	AimingConstraintEntityCommonData CommonData;
	bool EnabledInProne;
}

struct AimingConstraintsData {
	float MinYaw;
	float MaxYaw;
	float MinPitch;
	float MaxPitch;
}

struct AimingPoseData {
	float MinimumPitch;
	float MaximumPitch;
	float TargetingFov;
	float AimSteadiness;
	float SpeedMultiplier;
	float RecoilMultiplier;
}

enum AimOrigin {
	AoDefault = 0,
	AoCamera = 1,
	AoWeapon = 2
}

struct AIProximityReactionsBinding {
	AntRef AIReaction;
	AntRef AIExplosionReaction;
	AntRef AIExplosionForce;
	AntRef AIStunReaction;
	AntRef AIStunReactionRandomFactor;
	AntRef AIReactionDirection;
	AntRef FireNearby;
	AntRef AimUpAndDown;
	AntRef FocusAimScale;
	AntRef FocusAiming;
	AntRef EnableProceduralHeadAim;
	AntRef KillFromAnimation;
	AntRef PlayerAnimationKill;
	AntRef PlayerInitiatedRagdoll;
}

class AIProximityReactionsComponentData : ComponentData {
	AIProximityReactionsBinding Binding;
	float MinExplosionImpulseForce;
	float MaxExplosionLookDistance;
	float FireReactionDistance;
	bool Enabled;
}

struct AirMissileJammingData {
	float MinTurnSpeed;
	float MaxRadius;
	float MinRadius;
	float Theta;
	float Phi;
	float UpdateJammingPositionTime;
	float MaxTurnSpeed;
	float QuietModeProbability;
	float QuietModeTime;
	float JammingTime;
	float TurnCalculationTime;
	bool EnableAirMissileJamming;
}

class AirRadarData : UIPartData {
	float RadarRange;
	float RadarSensitivity;
	float HeatSensitivity;
	UIHudIcon MissileIcon;
	UIHudIcon CenterIcon;
	UIHudIcon FriendlyIcon;
	UIHudIcon EnemyIcon;
	UIHudIcon LaserPaintedIcon;
	UIHudIcon NorthIcon;
	SubScreenData SubScreen;
	UIHudIcon WestIcon;
	UIHudIcon SouthIcon;
	UIHudIcon EastIcon;
	bool TrackLaserPaintedObjects;
	bool TrackOnlyUsedVehicles;
	bool UseCameraComponentTransform;
}

class AirResistanceData : ProcessorData {
	float DragFactor;
}

class AISettingsData : Asset {
	SoundEnvironmentConstantData SoundEnvironmentConstants;
	CoverConstantData CoverConstants;
	DecisionConstantData DecisionConstants;
	PositionEvaluationConstantData PositionEvaluationConstants;
	TimingConstantData TimingConstants;
	DebugConstantData DebugConstants;
	ReadinessLevels ReadinessLevels;
	BehaviourTemplateData DefaultBehaviourTemplate;
	AIVehicleBehaviourData DefaultVehicleType;
}

enum AIStunReactionAnimationType {
	AIStunReactionAnimationType_1 = 0,
	AIStunReactionAnimationType_2 = 1,
	AIStunReactionAnimationType_3 = 2,
	AIStunReactionAnimationType_4 = 3,
	AIStunReactionAnimationType_5 = 4,
	AIStunReactionAnimationType_Count = 5
}

class AISystemAsset : GameAISystem {
	AIVehicleTypes Behaviours;
	OrderSettings Orders;
	AISettingsData Settings;
}

class AIVehicleBehaviourData : DataContainer {
	string Name;
	string[] Controls;
	string[] Behaviours;
	string[] Goals;
	IntentData[] Intents;
}

class AIVehicleTypes : Asset {
	AIVehicleBehaviourData[] VehicleTypes;
	BehaviourData[] Goals;
	BehaviourData[] Intents;
}

class AIWeaponData : GameAIWeaponData {
	Strengths Strengths;
	float MaxBurstCoolDownTime;
	float LostTargetBurstCoolDownModifier;
	float FinalAccuracyPercentage;
	float AimTransitionFireDelay;
	float MinRange;
	float MaxRange;
	float OptimalRangePercentage;
	ReloadBehavior ReloadBehavior;
	float MinExtraReloadTime;
	float MaxExtraReloadTime;
	float MinBurstCoolDownTime;
	float AimAngularVelocity;
	float InnerInaccurateDistance;
	float AngleToTargetSnap;
	float SweepDistance;
	float SweepTime;
	float WaitTimeBeforeFire;
	BurstLimit BurstLimitNear;
	BurstLimit BurstLimitFar;
	float StartAccuracyPercentage;
	float MinimumAccuracyBeforeFiring;
	float OuterInaccurateDistance;
	float AdditionalMinimumAccuracyAtMinRange;
	float GravityModifier;
	SweepSelectionType SweepType;
	AimOrigin AimOrigin;
	bool UseZoom;
	bool AllowedAgainstImmortals;
	bool AimWhileReloading;
	bool AimHighIndirectPath;
	bool Indirect;
	bool IsMelee;
	bool SweepFirstAttack;
	bool IsBlindFireAllowed;
	bool CanAltAttack;
	bool IsStandStill;
	bool CanSuppress;
	bool UseFromCover;
	bool InaccuracyFollowsTarget;
	bool UseInaccuracyAtCloseRange;
	bool DisableWeaponSway;
	bool IsAiAllowed;
}

class AlignmentData : DataContainer {
	EntryInputActionEnum AlignAction;
	float StopTolerance;
	float Speed;
}

class AllowedVehiclesData : DataContainer {
}

class AlternateCameraViewData : DataContainer {
	Vec3 MeshOffset;
	HudData Hud;
	float FieldOfView;
	float WorldSpaceLockEfficiency;
	RigidMeshAsset Mesh;
	ObjectBlueprint MaskMeshBlueprint;
	float FadeInDuration;
	float FovTransitionTime;
	float BlackDuration;
	InputSuppressionData InputSuppression;
	float ScreenExposureAreaScale;
	float FadeOutDuration;
	bool AllowFieldOfViewScaling;
	bool LockMeshToRenderView;
	bool ToggleViewChange;
	bool UseProfileOptionForToggleViewChange;
	bool FLIREnabled;
	bool FadeToBlack;
}

class AlternateSpawnEntityData : SpatialEntityData {
	TeamId Team;
	float Priority;
	bool Enabled;
}

struct AmmoConfigData {
	int32 MagazineCapacity;
	int32 NumberOfMagazines;
	uint32 TraceFrequency;
	uint32 AmmoPickupMinAmount;
	uint32 AmmoPickupMaxAmount;
	float AutoReplenishDelay;
	int32 AmmoBagPickupAmount;
	float AmmoBagPickupDelayMultiplier;
	bool AutoReplenishMagazine;
}

class AmmoCrateEntityData : GameEntityData {
	MapMarkerEntityData Marker;
	StaticModelEntityData Model;
	float RefillDelay;
	float Radius;
	bool EnableReplenish;
}

class AndEntityData : EntityData {
	Realm Realm;
	bool In1;
	bool In2;
}

struct AngleOfImpactData {
	float Zone12Delimiter;
	float Zone23Delimiter;
	float Zone1Multiplier;
	float Zone2Multiplier;
	float Zone3Multiplier;
	bool Enabled;
}

enum AngleUnit {
	AngleUnit_Radians = 0,
	AngleUnit_Degrees = 1
}

struct Animated1pOnlyWeaponBinding {
	AntRef UndeployFinished;
	AntRef CameraFreeWeight;
	AntRef Deploy1P;
	AntRef HideWeapon1p;
}

struct Animated3pOnlyWeaponBinding {
	AntRef Deploy3P;
	AntRef HideWeapon3p;
}

enum AnimatedAimingEnum {
	AnimatedAimingTwoHanded = 0,
	AnimatedAimingRightHanded = 1,
	AnimatedAimingDisabled = 2
}

class AnimatedCameraData : CameraData {
	SkeletonAsset Skeleton;
	string CameraBone;
	string FovBone;
}

class AnimatedDestructionComponentData : AntAnimatableComponentData {
}

class AnimatedDriverEntityData : GameEntityData {
	LinearTransform InputTransform;
	AntRef VehicleBoost;
	AntRef VehicleSpeed;
	AntRef VehicleMovementState;
	AntRef VehicleClutch;
	AntRef VehicleBrake;
	float MovementStateStandThreshold;
	NormalizeSettings Yaw;
	NormalizeSettings Roll;
	NormalizeSettings Pitch;
	bool DelayAnimationWheelTransform;
}

enum AnimatedFireEnum {
	AnimatedFireAutomatic = 0,
	AnimatedFireSingle = 1,
	AnimatedFireHoldAndRelease = 2,
	AnimatedFireDelayedSingleShot = 3,
	AnimatedFireSimple = 4
}

class AnimatedPointCloudAsset : Asset {
}

struct AnimatedPointCloudAttributeDesc {
	PointCloudAttributeUsage Usage;
	PointCloudAttributeQuantization IFrameQuantization;
	PointCloudAttributeQuantization DFrameQuantization;
}

class AnimatedPointCloudComponentData : ComponentData {
	AnimatedPointCloudAsset PointCloud;
	float ExternalTime;
	bool StartPaused;
}

class AnimatedPointCloudEntityData : EntityData {
	Realm Realm;
	AnimatedPointCloudAsset PointCloud;
	float ExternalTime;
	bool StartPaused;
}

class AnimatedSkeletonDatabase : DataContainer {
	RagdollAsset[] Ragdolls;
	AnimatedSkeletonDatabaseItem[] Items;
}

struct AnimatedSkeletonDatabaseItem {
	SkeletonAsset Asset;
	int32[] Names;
	SkeletonCollisionData SoldierCollision;
	SkeletonCollisionData RagdollCollision;
	RagdollAsset Ragdoll;
	string[] SpecialBones;
	string HipBone;
	string HeadBone;
}

class AnimatedTransformEntityData : EntityData {
	AntRef Animatable;
	float ExternalTime;
	AntRef Controller;
	string BoneName;
}

struct AnimatedWeaponBinding {
	AntRef Deploy;
	AntRef AltDeploy;
	AntRef Undeploy;
	AntRef QuickSwitch;
	AntRef Reload;
	AntRef ReloadShotgun;
	AntRef Fire;
	AntRef FireSingle;
	AntRef FireHoldAndRelease;
	AntRef FireSimple;
	AntRef FirstShotSpawned;
	AntRef BoltAction;
	AntRef PumpAction;
	AntRef MeleeAttack;
	AntRef QuickThrow;
	AntRef QuickThrowType;
	AntRef AimBody;
	AntRef AlwaysAimHead;
	AntRef OneHanded;
	AntRef OneHandedAiming;
	AntRef AimingEnabled;
	AntRef LowerGun;
	AntRef BreathControl;
	AntRef RflType;
	AntRef PstlType;
	AntRef HgrType;
	AntRef ATType;
	AntRef ShgType;
	AntRef LMGType;
	AntRef BagType;
	AntRef SnpType;
	AntRef Zoom;
	AntRef AimBodyWeight;
	AntRef DisableZoomToggleWeight;
	AntRef ZoomParameter;
	AntRef ZoomScaleFactor;
	AntRef Dispersion;
	AntRef AimTargetPosBody;
	AntRef ZoomOutSpeed;
	AntRef ZoomInSpeed;
	AntRef UnDeploySpeed;
	AntRef DeploySpeed;
	AntRef LightEnabled;
	AntRef FireModeChanged;
	AntRef AnimType;
	AntRef GunDown;
	AntRef NumberOfBulletsLeftInGun;
	AntRef BulletsLeftInGun;
	AntRef AbortVehicleDeploy;
	AntRef CurrentProjectileIndex;
	AntRef WeaponActionESIG;
	AntRef IsSprinting;
	AntRef PreparingToBash;
	AntRef JustStartedSprinting;
	AntRef KickBackInIronSight;
	AntRef ZoomingTime;
	AntRef TriggerZoomGunTwitch;
	AntRef WeaponChooserSignal;
	AntRef WeaponClassSignal;
	AntRef OffsetX;
	AntRef OffsetY;
	AntRef OffsetZ;
	AntRef AIAllowFire;
	AntRef AIAltFireFromAnt;
}

struct AnimationConfigurationData {
	AnimationConfigurationShootModuleData ShootModuleData;
	WeaponOffsetData WeaponOffsetModuleData;
	WeaponSpeedData WeaponSpeedModuleData;
}

struct AnimationConfigurationShootModuleData {
	float ZoomedKickbackFactor;
}

class AnimationControlledStateData : CharacterStateData {
	float UpNormalTolerance;
}

struct AnimationDrivenBinding {
	AntRef Velocity;
	AntRef EnableCollision;
}

class AnimationEnumerationChoiceEntityData : EntityData {
	Realm Realm;
	int32 Value;
}

class AnimationEnumerationEntityData : EntityData {
	Realm Realm;
	AntEnumeration AntEnum;
}

class AnimationSignalEntityData : EntityData {
	Realm Realm;
	AntRef Signal;
	AntRef IntGameState;
	AntRef FloatGameState;
	int32 ValueInt;
	float ValueFloat;
	bool Reset;
	bool Continuous;
}

class AnimationSpawnTemplate : DataContainer {
	AntEnumeration RunStyle;
}

class AnimationTurretRotationComponentData : ComponentData {
	TurretRotationInfo[] Rotations;
	int32 SoldierBaseIndex;
	bool UseVehicleWorldTransform;
	bool OutputWorldTransform;
}

class AntAnimatableComponentData : ComponentData {
	Realm Realm;
	SubRealm SubRealm;
	AntAnimationHandlerData AnimationData;
	SkinnedMeshAsset Mesh;
	bool AutoActivate;
	bool AnimationControlledFromStart;
	bool ForceDisableCulling;
}

struct AntAnimatableData {
	AntRef Actor;
	ProceduralAwarenessAntRefs ProceduralAwareness;
	AntRef RightHandEffectorDisableOverride;
	AntRef LeftHandEffectorDisableOverride;
	MasterSkeletonAsset MasterSkeletonAsset;
}

struct AntAnimationHandlerData {
	AntAnimatableData Animatable;
	AntRef RootController;
	LodBinding LodBinding;
	AntPackageAsset[] AntPackageData;
	GameplayBone[] BonesToMirror;
	bool ReportBackFromAnt;
	bool EnableMasterSlaveCopy;
	bool IsProp;
}

class AntAnimationSetAsset : Asset {
	SkeletonAsset SkeletonAsset;
	int32 ActorAssetIndex;
	int32[] ClipAssetIndices;
	int32[] LoopingClipAssetIndices;
	int32 SceneOpMatrixAssetIndex;
	bool UseTraj2Ref;
	bool AllowAnimationCulling;
}

enum AntAttentionStateEnum {
	AntAttentionStateEnum_Relaxed = 0,
	AntAttentionStateEnum_Ready = 1,
	AntAttentionStateEnum_Combat = 2,
	AntAttentionStateEnum_Evasive = 3,
	AntAttentionStateEnum_AntEnumCount = 4,
	AntAttentionStateEnum_NoChange = 5,
	AntAttentionStateEnum_Count = 6,
	AntAttentionStateEnum_Dummy1 = 7
}

enum AntCoverEnum {
	AntCoverEnum_RightCover = 0,
	AntCoverEnum_LeftCover = 1,
	AntCoverEnum_MiddleCover = 2,
	AntCoverEnum_MediumLeftCover = 3,
	AntCoverEnum_MediumRightCover = 4,
	AntCoverEnum_Prone = 5,
	AntCoverEnum_Count = 6
}

enum AntCoverFireType {
	AntCoverFireType_PeekFire = 0,
	AntCoverFireType_FireStepOut = 1,
	AntCoverFireType_FireOver = 2,
	AntCoverFireType_BlindFireAround = 3,
	AntCoverFireType_BlindFireOver = 4,
	AntCoverFireType_FlankedWhileFiring = 8,
	AntCoverFireType_FireStepOutSlow = 10,
	AntCoverFireType_FireStepOutUrgent = 11,
	AntCoverFireType_FireStepOut_Crouched = 12,
	AntCoverFireType_FireLmg = 13,
	AntCoverFireType_FireFromHipStepOut = 14
}

class AntDrivenComponentData : ComponentData {
	AnimationDrivenBinding CharacterGameState;
}

struct AntDynamicAvoidanceBinding {
	AntRef TimeUntilCollision;
	AntRef DistanceUntilCollision;
	AntRef NormalizedVelocity;
	AntRef Speed;
}

enum AntEntryIdEnum {
	AntEntryIdEnum_Humvee_Driver = 0,
	AntEntryIdEnum_Humvee_Gunner = 1,
	AntEntryIdEnum_Humvee_PassengerRearLeft = 2,
	AntEntryIdEnum_Humvee_PassengerRearRight = 3,
	AntEntryIdEnum_F16_Pilot = 4,
	AntEntryIdEnum_SU37_Pilot = 5,
	AntEntryIdEnum_AH6_Pilot = 6,
	AntEntryIdEnum_AH64_Pilot = 7,
	AntEntryIdEnum_AH64_Gunner = 8,
	AntEntryIdEnum_Vodnik_Driver = 9,
	AntEntryIdEnum_Vodnik_Gunner = 10,
	AntEntryIdEnum_Humvee_PassengerFrontRight = 11,
	AntEntryIdEnum_Vodnik_PassengerFrontRight = 12,
	AntEntryIdEnum_Vodnik_PassengerRearRight = 13,
	AntEntryIdEnum_Vodnik_PassengerRearLeft = 14,
	AntEntryIdEnum_VadsGunner = 15,
	AntEntryIdEnum_F18F_Pilot = 16,
	AntEntryIdEnum_F18F_Navigator = 17,
	AntEntryIdEnum_M1A2_Gunner = 18,
	AntEntryIdEnum_M1A2_Driver = 19
}

class AntEnumeration : DataContainer {
	AntRef AntAsset;
	int32 Value;
}

struct AntEventData {
	int32 TagId;
	EventSpec Event;
}

class AntEventEntityData : GameEntityData {
	AntEventData[] OnEnterEvents;
	AntEventData[] OnUpdateEvents;
	AntEventData[] OnLeaveEvents;
	bool SendAsPlayerEvent;
	bool AutoActivate;
}

enum AntHitReactionWeaponType {
	AntHitReactionWeaponType_Pistol = 0,
	AntHitReactionWeaponType_SMG = 1,
	AntHitReactionWeaponType_AssaultRifle = 2,
	AntHitReactionWeaponType_LMG = 3,
	AntHitReactionWeaponType_Shotgun = 4,
	AntHitReactionWeaponType_SniperRifle = 5,
	AntHitReactionWeaponType_Explosion = 6,
	AntHitReactionWeaponType_Flashbang = 7,
	AntHitReactionWeaponType_Melee = 8
}

struct AntInteractionBinding {
	AntRef OtherAnimatableID;
}

class AntInteractionData : GameEntityData {
	AntInteractionBinding AntBindings;
}

class AntiRollBar : DataContainer {
	float Stiffness;
	float TorqueActivationLimit;
}

struct AntiRollBars {
	AntiRollBar Front;
	AntiRollBar Rear;
}

struct AntiSpamConfig {
	float DetectionInterval;
	uint32 DetectionIntervalMaxMessageCount;
	uint32 ServerSideMessageCountTolerance;
	uint32 SecondsBlocked;
	uint32 ServerSideSecondsBlockedTolerance;
	string NotificationSid;
	string StillBlockedSid;
	SoundWaveAsset WarningSound;
}

class AntMemorySettings : DataContainer {
	int32 RTPoolLayersControllers;
	int32 RTPoolStateflowControllers;
	int32 RTPoolStateflowNodeControllers;
	int32 RTPoolTransitionControllers;
	int32 RTPoolClipControllers;
	int32 RTPoolChooserControllers;
	int32 RTPoolLoopingControllers;
	int32 RTPoolTransparentControllers;
}

class AntPackageAsset : Asset {
	string Win32FileName;
	string XePs3FileName;
	AntPackagingType PackagingType;
	guid StreamingGuid;
	uint32 ChunkSize;
}

enum AntPackagingType {
	AntPackagingType_Static = 0,
	AntPackagingType_Chunk = 1,
	AntPackagingType_Bundle = 2,
	AntPackagingType_AnimationSet = 3
}

enum AntPoseEnum {
	AntPoseEnum_Stand = 0,
	AntPoseEnum_Crouch = 1,
	AntPoseEnum_AntEnumCount = 2,
	AntPoseEnum_NoChange = 3,
	AntPoseEnum_Count = 4
}

class AntProjectAsset : Asset {
	AntPackageAsset[] PackageAssets;
	string AntNativeProjectName;
	AntRef SceneOp;
	int32 ProjectId;
}

struct AntRef {
	int32 AssetId;
}

class AntSettings : DataContainer {
	float DetailedCollisionSpeedLimit;
	float LeanSignalScale;
	float LeanSignalClamp;
	int32 MaxInterpolationSlots;
	int32 MaxSingleBoneInterpolationSlots;
	float ReducedInterpolationDistance;
	float TrajectoryInterpolationDistance;
	float ForceLodDistance;
	int32 MaxAnimatablesPerPoseJob;
	float CheckGiantSoldiers;
	bool ClientEmulatesServer;
	bool UseCameraFov;
	bool UpdateEnable;
	bool EnablePA;
	bool UseWeaponFov;
	bool DisableAnimManagerSceneOps;
	bool DisableAILodFeature;
	bool DisableModelAnimationCulling;
	bool EnableJobs;
	bool ForcePoseUpdate;
	bool RunAsHighPriority;
	bool InterpolatePoses;
	bool AllowVariableTickLength;
	bool EnablePackageCache;
	bool UseHIK;
	bool UpdateLoddingEnable;
	bool BlockOnJobs;
	bool EnableDebugLogFile;
	bool EnablePoseJobs;
	bool UsePA;
}

enum AntSpeedLevel {
	AntSpeedLevel_Still = 0,
	AntSpeedLevel_Walk = 1,
	AntSpeedLevel_Jog_DEPRECATED_DO_NOT_USE = 2,
	AntSpeedLevel_Sneak = 3,
	AntSpeedLevel_Run = 4,
	AntSpeedLevel_Sprint = 5,
	AntSpeedLevel_Stairs_Walk_Up = 6,
	AntSpeedLevel_Stairs_Walk_Down = 7,
	AntSpeedLevel_Stairs_Run_Up = 8,
	AntSpeedLevel_Stairs_Run_Down = 9,
	AntSpeedLevel_Stairs_Sprint_Up = 10,
	AntSpeedLevel_Stairs_Sprint_Down = 11,
	AntSpeedLevel_AntEnumCount = 12,
	AntSpeedLevel_NoChange = 13,
	AntSpeedLevel_Count = 14
}

class AntTrackData : CustomSequenceTrackData {
	AntTrackItemData[] AntTrackItemDatas;
}

class AntTrackItemData : DataContainer {
	AntRef Controller;
	int32 SequenceTrackIndex;
	int32 StartTime;
	uint32 NumTicks;
	bool ResumeAtEnd;
}

class AreaProximityEntityData : EntityData {
	Realm Realm;
	float ProximityDistance;
	UpdatePass UpdatePass;
	bool AutoStart;
}

class AreaTriggerEntityData : TriggerEntityData {
	LinearTransform GeometryTransform;
	AreaTriggerInclude Include;
	float InsideAreaEventRepeatTime;
	float Radius;
	bool UseCharacterEntity;
	bool OneInsideAreaEventPerSoldier;
	bool TriggerOnlyOnLeave;
	bool ResetOnEnable;
	bool TriggerOnLeaveOnDeath;
	bool TriggerOnLeaveOnDisable;
}

enum AreaTriggerInclude {
	ATNone = 0,
	ATAll = 1,
	ATPlayers = 2,
	ATAI = 3,
	ATAI_Allies = 4,
	ATAI_Enemies = 5,
	ATPlayersNotInVehicle = 6
}

struct AreaValueTeam {
	int32 AreaValue;
	TeamId Team;
}

class ArmamentData : DataContainer {
	int32 ThreatLength;
	TurretData TurretData;
	bool IsAntiAircraft;
}

class ArmDisarmAwardEntityData : GameEntityData {
}

class ArtilleryStrikeEntityData : GameEntityData {
	MissileEntityData MissileData;
	float MissileSpawnRadius;
	float DurationOfArtilleryStrike;
	float MaxDelayBetweenProjectiles;
	float MinDelayBetweenProjectiles;
	float MaxDelayBetweenStrikes;
	float MinDelayBetweenStrikes;
	float MinRadiusToSoldier;
	float RadiusWhenFollowingSoldier;
	float HeightOffsetWhenFollowingSoldier;
	uint32 NumberOfStrikes;
	uint32 MaxProjectilesPerStrike;
	uint32 MinProjectilesPerStrike;
	bool FollowSoldier;
}

class ArtilleryStrikeWeaponData : WeaponData {
	float MaxStrikeDistance;
	float StrikeRadius;
	float SpawnHeight;
	float MaxRandomSpawnHeight;
	float StrikeCameraOffset;
	float SpawnHeightMultiplier;
	TargetCameraData Camera;
	float AimingCameraHeight;
	float StrikeCameraHeight;
	float AimingCameraOffset;
	float StrikeCameraFov;
	float AimingCameraFov;
	float DelayBeforeAimingCamera;
	float ValidMinDistance;
	float FireCameraTime;
	float StrikeCameraTime;
	float ValidMaxDistance;
	float ValidMaxAngle;
	bool IncreaseSpawnHeightWithDistance;
	bool EnableProjectileTrails;
	bool EnableCameraRotation;
	bool FireProjectileFromWeapon;
}

class AssemblyDescriptorData : InterfaceDescriptorData {
}

class Asset : DataContainer {
	string Name;
}

struct AssetAabbs {
	AxisAlignedBox[] PartAabb;
}

struct AudioCurve {
	AudioCurvePoint[] Points;
	AudioCurveType CurveType;
}

struct AudioCurvePoint {
	float X;
	float Y;
	float K;
}

enum AudioCurveType {
	AudioCurveType_Spline = 0
}

class AudioGraphAssetParameter : AudioGraphParameter {
}

class AudioGraphData : DataContainer {
	AudioGraphNodeData[] Nodes;
	AudioGraphParameter[] PublicParameters;
	AudioGraphEvent[] PublicEvents;
	AudioGraphAssetParameter[] PublicAssetParameters;
	uint16 PublicValueCount;
	uint16 ValueCount;
}

class AudioGraphEvent : AudioGraphParameter {
}

class AudioGraphNodeData : DataContainer {
}

struct AudioGraphNodePort {
	float UnconnectedValue;
	uint16 ValueIndex;
	bool IsConnected;
}

class AudioGraphNodePortGroup : DataContainer {
}

class AudioGraphParameter : DataContainer {
	float DefaultValue;
	uint32 NameHash;
	uint16 ValueIndex;
}

class AudioLanguage : DataContainer {
	string Name;
	LanguageFormat LanguageMapping;
}

struct AudioLanguageMapping {
	AudioLanguage Source;
	AudioLanguage Target;
}

class AudioLanguagesDependancyObject : DataContainer {
	AudioLanguage[] AudioLanguages;
}

class AudioLanguageSetting : DataContainer {
	string Name;
	uint32 NameHash;
	string DisplayName;
	AudioLanguageMapping[] Mappings;
	bool IsDefault;
}

class AudioMaterialDefinitions : Asset {
}

struct AudioObstructionMaterialInfo {
	MaterialContainerPair Material;
	float ObstructionFrequency;
	float GainReduction;
}

class AudioSettings : DataContainer {
	uint32 WaveCacheSize;
	uint32 WaveCacheHeadroom;
	float WaveCachePruneTimeLimit;
	uint32 WaveCacheRsxSize;
	float WaveCacheRsxPruneTimeLimit;
	uint32 WaveCacheMaxReadIssueCount;
	uint32 WaveCacheMaxReadActiveCount;
	float AudioCoreCpuLoadLimit;
	float AudioCoreCpuLoadRecovery;
	int32 AudioCoreThread;
	int32 AudioCoreMixJobThreadCount;
	int32 AudioCoreMaxMixJobThreadCount;
	uint32 MaxAudibleSoundCount;
	int32 AudioCoreMinProcStageVoicesToGoWide;
	uint32 DelayLineAllocSize;
	uint32 ReverbAllocSize;
	bool AudioCoreMultipleMixJobsEnabled;
}

class AudioSystemAsset : Asset {
	SoundMasterPatchAsset MasterPatch;
	SoundWaveAsset DefaultWave;
	StreamPoolAsset[] StreamPools;
	uint32 SampleRate;
	float SoundSpeed;
	float DopplerFactor;
	SoundTestAsset Tests;
	MixerSystemAsset MixerSystem;
	AudioLanguage[] Languages;
	AudioLanguageSetting[] LanguageSettings;
	AudioLanguage DefaultLanguage;
	SoundScopeData[] Scopes;
	SoundScopeStrategyData[] ScopeStrategies;
	SoundScopeSetupData[] ScopeSetups;
}

enum AudioSystemSpeakerSetup {
	FiveDotOne = 6,
	SevenDotOne = 8
}

struct AutoAimData {
	Vec3 AutoAimOuterBoxOffset;
	Vec3 AutoAimOuterBoxExtends;
	Vec3 AutoAimInnerBoxOffset;
	Vec3 AutoAimInnerBoxExtends;
	CharacterPoseType PoseType;
}

class AutoSquadEntityData : GameEntityData {
	SquadId SquadId;
}

class AutoTeamEntityData : GameEntityData {
	uint32 TeamDifferenceToAutoBalance;
	TeamAssignMode TeamAssignMode;
	uint32 PlayerCountNeededToAutoBalance;
	bool ForceIntoSquad;
	bool RotateTeamOnNewRound;
	bool AutoBalance;
}

class AvengerScoringHandlerData : ScoringHandlerData {
	float AvengerKillTimeout;
}

class AwardableTreeBase : TreeBase {
	StatCategoryTreeCollection StatCategoryTreeCollection;
	CriteriaData[] GeneralCriteria;
	bool GeneralStatistics;
}

class AwardAchievementData : AwardData {
}

class AwardData : AbstractAwardData {
	AwardData[] FilteredChildAwards;
	CriteriaData[] Criteria;
	string Code;
	string Description;
	string NameSid;
	AwardKitAssociation KitAssociation;
	string ImageName;
	string ImageSmallName;
	string ImageFancyName;
	string SoundName;
	AwardType Repeat;
	string[] Licenses;
	uint32 MaxRepetitions;
	CriteriaAward[] Dependencies;
	AwardGroup Group;
	StatsMultiplicity Multiplicity;
	CriteriaGateList UnlockGates;
	AwardData ParentAward;
	float Score;
	ScoringBucket Bucket;
	BasicUnlockInfo[] UnlockInfos;
	bool ActiveOnCreation;
	bool Visible;
}

class AwardDataTree : AwardableTreeBase {
	AwardData[] FilteredAwards;
}

enum AwardGroup {
	AwardGroup_Undefined = 0,
	AwardGroup_Ribbons = 1,
	AwardGroup_DogTags = 2,
	AwardGroup_Medals = 3,
	AwardGroup_Star = 4,
	AwardGroup_Mission = 5,
	AwardGroup_LevelComplete = 6,
	AwardGroup_Achievements = 7,
	AwardGroup_LastAwardGroup = 8
}

class AwardHeaderData : AbstractAwardData {
	AwardGroup Group;
	StatsMultiplicity Multiplicity;
}

enum AwardKitAssociation {
	AwardKitAssociation_Undefined = 0,
	AwardKitAssociation_Assault = 1,
	AwardKitAssociation_Engineer = 2,
	AwardKitAssociation_Recon = 3,
	AwardKitAssociation_Support = 4,
	AwardKitAssociation_All = 5,
	AwardKitAssociation_LAST_ITEM = 6
}

class AwardStarData : AwardData {
	AwardStarNameData StarTemplate;
}

class AwardStarNameData : DataContainer {
	AwardStarNameInstance[] NameInstances;
}

struct AwardStarNameInstance {
	string Name;
	StatsCategoryBaseData Category;
}

struct AwardStatus {
	string Code;
	uint32 CurrentValue;
	uint32 OriginalValue;
	CounterStatus[] Counters;
	bool IsCounting;
}

enum AwardType {
	AwardType_OnceGlobally = 0,
	AwardType_OncePerRound = 1,
	AwardType_Unlimited = 2,
	AwardType_Limited = 3,
	AwardType_GateList = 4
}

class AxesInputActionData : InputActionData {
	InputDeviceAxes Axis;
	bool NormalizeInput;
}

enum BackendType {
	Backend_Lan = 0,
	Backend_Blaze = 1,
	Backend_Peer = 2,
	Backend_Local = 3,
	Backend_Count_ = 4
}

class BandPassFir64NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Bandwidth;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class BandPassIir2NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Bandwidth;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class BangerEntityData : DynamicGamePhysicsEntityData {
	float[] Scales;
	MeshAsset Mesh;
	ExplosionEntityData Explosion;
	float TimeToLive;
	uint32 DestructiblePartCount;
	bool UseVariableNetworkFrequency;
}

class BangerSpawnImpulseParams : DataContainer {
	float MinHorizontalAngle;
	float MaxHorizontalAngle;
	float MinVerticalAngle;
	float MaxVerticalAngle;
	float MinStrength;
	float MaxStrength;
	float WaterStrengthModifier;
	float LinearDamping;
	float AngularDamping;
}

class BaseEmitterData : ProcessorData {
	EmitterDocument EmitterAsset;
}

class BaseShapeData : GameObjectData {
}

class BaseSkeletonAsset : Asset {
}

class BasicDogTagData : DogTagData {
}

struct BasicUnlockInfo {
	guid UnlockGuid;
	uint32 Identifier;
	uint32 UnlockScore;
	string[] Licenses;
	string[] AdditionalLicenses;
	string StringId;
}

class BehaviourData : UrgencyUserData {
	string Name;
}

class BehaviourTemplateData : GameBehaviourTemplateData {
	float StandProbability;
	float CrouchProbability;
	float TurnAgainstTargetDistance;
	float InvestigateStopDelay;
	float ExplosiveObjectChance;
	uint32 MinAttackBursts;
	uint32 MaxAttackBursts;
	float AttackUrgencyModifier;
	float AltAttackProbability;
	float ReadinessReactionTimeMultiplier;
	UIntRange FireBlindOverBurstCount;
	float CloseRangeAccuracyDistanceOverride;
	float MeleeRange;
	float MeleeMaxTime;
	float MeleeProbability;
	FloatRangeDefaultZero CoverSwitchTime;
	float FireStyleTimeout;
	float FireLeanChance;
	UIntRange FireLeanBurstCount;
	float FireStepOutChance;
	UIntRange FireStepOutBurstCount;
	float FireStepOutSlowChance;
	UIntRange FireStepOutSlowBurstCount;
	float FireStepOutUrgentChance;
	UIntRange FireStepOutUrgentBurstCount;
	float FireStepOutFireFromHipChance;
	UIntRange FireStepOutFireFromHipBurstCount;
	float FireStepOutStandToCrouchChance;
	UIntRange FireStepOutStandToCrouchBurstCount;
	CoverFireType AlwaysInFirePose;
	float FireGrenadeStepOutChance;
	UIntRange FireGrenadeStepOutBurstCount;
	float FireOverChance;
	UIntRange FireOverBurstCount;
	float FireBlindOutChance;
	UIntRange FireBlindOutBurstCount;
	float FireBlindOverChance;
	int32 SuppressingBurstCount;
	float FireGrenadeBlindOverChance;
	UIntRange FireGrenadeBlindOverBurstCount;
	float FireLmgChance;
	UIntRange FireLmgBurstCount;
	float ShotAtFireGrenadeBlindOverChance;
	int32 SuppressingBurstCountMin;
	int32 SuppressingBurstCountMax;
	FloatRange CoverWaitTime;
	float MaxAngleDiffForBlindFire;
	float StrafeToCoverProbablity;
	float MaxSuppressTime;
	float InvestigateVisualTestDist;
	float AlwaysStrafeToCoversWithinDistance;
	float ChargeSurpriseVelocity;
	float ChargeSurpriseNearDistance;
	float ChargeSurpriseFlankedDistance;
	float ShotAtFireBlindOutChance;
	float ShotAtFireBlindOverChance;
	float AccuracyIncreaseTime;
	float TargetStrengthFactor;
	float ReloadBelowPercent;
	float TargetDistanceFactor;
	float SuppressIndirectProbability;
	float TargetDangerFactor;
	float TargetIsAttackingFactor;
	float AccuracyModifierVsNonHumans;
	float AccuracyModifier;
	float SoldierMovementVolumeOverride;
	bool AlwaysUpdate;
	bool LeaveVehicleOnSearchAndDestroyOrder;
	bool ShouldFireThroughSmoke;
	bool AlwaysStrafeToFirstCover;
	bool CanMeleeFromScriptedCover;
	bool AlwaysStrafeToCoversBehindMe;
	bool UseShotAtSettings;
	bool StepBackIfBeingShot;
	bool DisableMissileGravity;
}

class BFAISettingsData : AISettingsData {
	MovementConstantData MovementConstants;
	TurretControlConstantData TurretControlConstants;
	SearchAndDestroyConstantData SearchAndDestroyConstants;
	FollowConstantData FollowConstants;
	CombatConstantData CombatConstants;
}

class BFAISystem : AISystemAsset {
}

class BFOrderEntityData : OrderEntityData {
	bool ForbiddenToFire;
}

class BFServerConfiguration : DataContainer {
	BFServerConfigurationSchedule[] Schedules;
}

struct BFServerConfigurationData {
	uint32 ScoreMultiplier;
	string Licenses;
}

struct BFServerConfigurationSchedule {
	string[] Licenses;
	string[] Levels;
	BFServerConfigurationData Data;
}

class BFServerSettings : SystemSettings {
	string ServerMessage;
	float CTFRoundTimeModifier;
	string ForceTeamForPlayerTag;
	int32 ForceTeamForPlayerTagTeam;
	float NoInteractivityTimeoutTime;
	float NoInteractivityThresholdLimit;
	uint32 NoInteractivityBanRoundCount;
	uint32 TeamKillCountForKick;
	float TeamKillValueForKick;
	float TeamKillValueIncrease;
	float TeamKillValueDecreasePerSecond;
	uint32 TeamKillKickForBan;
	int32 RoundMaxPlayerCount;
	int32 RoundMinPlayerCount;
	int32 RoundLockdownCountdown;
	int32 RoundRestartCountdown;
	int32 RoundWarmupTimeout;
	string BannerUrl;
	string ServerPreset;
	string ServerDescription;
	string ServerAdministrationSettings;
	uint32 GameSize;
	string ServerAdministrationMapRotation;
	string ServerAdministrationMapRotationInformation;
	uint32 ServerAdministrationRoundsPerMap;
	string Spectators;
	string PunkBusterVersion;
	uint32 TeamSwitchImbalanceLimit;
	string GameMod;
	string PingSite;
	string OverrideServerConfigurationStartTime;
	uint32 GunMasterWeaponsPresetIndex;
	int32 ServerConfigurationRefreshInterval;
	int32 DeathmatchFriendZoneFallbackCount;
	VoiceChannel DefaultVoiceChannel;
	bool MapSequencerEnabled;
	bool KickAPlayerOnVIPJoin;
	bool IsManDownRotationEnabled;
	bool IsKillerCameraEnabled;
	bool PremiumStatus;
	bool OverrideAutoBalance;
	bool AutoBalance;
}

class BFTargetEvaluatorComponentData : TargetEvaluatorComponentData {
	TargetEvaluationConstantData Settings;
}

class BigWorldSetting : DataContainer {
	SoundAsset Sound;
	int32 MinDistance;
	int32 MaxDistance;
	float MinDelayTimeInMinutes;
	float MaxDelayTimeInMinutes;
}

class BigWorldSettingsAsset : Asset {
	BigWorldSetting[] Settings;
}

class BinaryLogicNode : UINodeData {
	UINodePort In;
	UINodePort True;
	UINodePort False;
	UIDataSourceInfo DataSourceInfo;
}

struct BinaryOption {
	string Name;
}

struct BlazeCreateGameParameters {
	MatchmakingCreateGameParameters Base;
}

class BlazePresenceBackendData : PresenceBackendData {
	MatchmakingSession[] MatchmakingSessions;
	bool UseDemanglerService;
}

class BlazeServerBackendData : ServerBackendData {
	BlazeCreateGameParameters CreateParameters;
	OnlineEnvironmentConsoleUrl ConfigUrl;
}

enum BlendShaderMode {
	BsmLerp = 0,
	BsmAdd = 1,
	BsmSubtract = 2,
	BsmMultiply = 3,
	BsmMultiply2x = 4,
	BsmScreen = 5,
	BsmDifference = 6,
	BsmLighten = 7,
	BsmDarken = 8,
	BsmOverlay = 9
}

enum BlinkType {
	BTHold = 0,
	BTBlink = 1,
	BTCount = 2
}

class Blueprint : EntityBusData {
}

class BlueprintAndVariationPair : Asset {
	Asset BaseAsset;
	ObjectVariation Variation;
}

class BlueprintBundle : Asset {
	Blueprint Blueprint;
	RegistryContainer RegistryContainer;
}

class BlueprintBundleLoaderEntityData : GameEntityData {
}

class BlueprintBundleMetadata : DataContainer {
	string BundlePathName;
	string BundleName;
	string BlueprintName;
}

class BlueprintBundleMetadataContainer : Asset {
	BlueprintContainerItem[] Items;
}

class BlueprintBundleSelectorEntityData : GameEntityData {
	SpawnEntitySelector BlueprintSelector;
}

class BlueprintBundleStateLogicEntityData : GameEntityData {
	string[] BundleNames;
}

class BlueprintContainerItem : DataContainer {
	BlueprintBundleMetadata Metadata;
}

struct BlurEffectData {
	float DispersionStrength;
	float DispersionThreshhold;
	float ExplosionStrength;
	float BulletStrength;
	float ExplosionFalloffSpeed;
	float BulletFalloffSpeed;
}

enum BlurFilter {
	BfNone = 0,
	BfGaussian3Pixels = 1,
	BfGaussian5Pixels = 2,
	BfGaussian7Pixels = 3,
	BfGaussian9Pixels = 4,
	BfGaussian15Pixels = 5,
	BfGaussian31Pixels = 6
}

class BoatFloatPhysicsData : HullFloatPhysicsData {
	float FrontRatio;
}

struct BoltActionData {
	float BoltActionDelay;
	float BoltActionTime;
	bool HoldBoltActionUntilFireRelease;
	bool HoldBoltActionUntilZoomRelease;
	bool ForceBoltActionOnFireTrigger;
	bool UnZoomOnBoltAction;
	bool ReturnToZoomAfterBoltAction;
}

class BoneCollisionComponentData : ComponentData {
	SkeletonCollisionData SkeletonCollisionData;
}

struct BoneCollisionData {
	Vec4 DebugDrawColor;
	Vec3 CapsuleOffset;
	string BoneName;
	HitReactionType AnimationHitReactionType;
	MaterialContainerPair MaterialPair;
	int32 BoneAxis;
	float CapsuleLength;
	float CapsuleRadius;
	PitchModifier MinPitch;
	PitchModifier MaxPitch;
	bool ValidInHiLod;
	bool ValidInLowLod;
	bool UsePhysicsRotation;
	bool DeactivateIfBehindWall;
}

class BoneFakePhysicsData : DataContainer {
	FakePhysicsData FakePhysics;
	string BoneName;
	int32 BoneId;
}

class BoolEntityData : EntityData {
	Realm Realm;
	bool DefaultValue;
}

class BoolHubEntityData : EntityData {
	Realm Realm;
	int32 InputCount;
	int32 InputSelect;
}

class BoolPropertyTrackData : SimplePropertyTrackData {
	bool[] Values;
}

class BoolRecordingData : PropertyRecordingData {
	bool[] Values;
}

struct BoolShaderParameter {
	string ParameterName;
	bool Value;
}

class BoolToEventEntityData : EntityData {
	Realm Realm;
	bool Value;
	bool InitalEvent;
}

class BoolUnlockValuePair : UnlockValuePair {
	bool DefaultValue;
	bool UnlockedValue;
}

struct Boost {
	float ForwardStrength;
	float ReverseStrength;
	float DissipationTime;
	float RecoveryTime;
	float CrawlStrength;
	float AccelerationScale;
}

class BotPriorityConfigData : DataContainer {
	Vec3 DebugColor;
	float Distance;
	int32 Period;
	float AngleOffset;
	bool AppliesToExecution;
	bool AppliesToDecisions;
}

class BoxEvaluatorData : EvaluatorData {
	Vec3 Dimensions;
	Vec3 Pivot;
}

class BoxFloatPhysicsData : FloatPhysicsData {
}

class BreakableControllerComponentData : DestructionControllerComponentData {
	uint32 BreakablePartCount;
	uint32 NetworkIdCount;
}

enum BreakableControllerComponentNetworkId {
	BreakableControllerComponentNetworkId_Collapsed = 0,
	BreakableControllerComponentNetworkId_SpawnPartObjectsOnCollapse = 1,
	BreakableControllerComponentNetworkId_ExtraPartCount = 2
}

enum BreakableControllerComponentNetworkIdMultiplier {
	BreakableControllerComponentNetworkIdMultiplier_HidePartObjects = 0,
	BreakableControllerComponentNetworkIdMultiplier_DisablePart = 1,
	BreakableControllerComponentNetworkIdMultiplier_PartCount = 2
}

class BreakableModelEntityData : GamePhysicsEntityData {
	SurfaceShaderBaseAsset DecalVolumeShader;
	float DecalVolumeScaleFactor;
	MeshAsset Mesh;
	uint32 BoneCount;
	EdgeModelLightMapData EdgeModelLightMapData;
}

class BreakablePartComponentData : DestructionPartComponentData {
	uint32 HealthPercentage;
	bool Collapsable;
	bool DestroyNearbyStaticEntities;
}

class BreakableRuinComponentData : ComponentData {
	ObjectBlueprint RuinModel;
}

class BreathControlData : DataContainer {
	float BreathControlTime;
	float BreathControlReleaseTime;
	float BreathControlPenaltyMultiplier;
	float BreathControlPenaltyTimeout;
}

class BulletEntityData : MeshProjectileEntityData {
	float Stamina;
	SoundAsset FlyBySound;
	ExplosionEntityData DudExplosion;
	float Gravity;
	float ImpactImpulse;
	float DetonationTimeVariation;
	float VehicleDetonationRadius;
	float VehicleDetonationActivationDelay;
	float FlyBySoundRadius;
	float FlyBySoundSpeed;
	float FirstFrameTravelDistance;
	float DistributeDamageOverTime;
	float StartDamage;
	float EndDamage;
	float DamageFalloffStartDistance;
	float DamageFalloffEndDistance;
	float TimeToArmExplosion;
	bool HasVehicleDetonation;
	bool InstantHit;
	bool StopTrailEffectOnUnspawn;
}

struct BulletHitInfo {
	Vec3 Direction;
	Vec3 SpawnPosition;
	SoldierWeaponUnlockAsset WeaponUnlockAsset;
	AntHitReactionWeaponType WeaponType;
	int32 BoneType;
	int32 ShooterPlayerId;
}

struct BurstLimit {
	int32 Min;
	int32 Max;
}

class BusNodeData : SoundBusData {
	AudioGraphNodePort Out;
	SoundGraphPluginRef VuPlugin;
}

enum Buttons {
	NoneButton = 0,
	XButton = 1,
	SquareButton = 2,
	CircleButton = 3,
	TriangleButton = 4
}

class ByteRasterData : RasterQuadtreeData {
}

class CameraActionData : SimpleMovementActionBaseData {
	CameraMovementActionMode ActionMode;
}

struct CameraBinding {
	AntRef Render1pInBackground;
	AntRef ForceRender1pInForeground;
}

class CameraComponentData : ComponentData {
	Vec3 CameraTransitionPos;
	float FieldOfView;
	float ForceFieldOfView;
	TargetCameraData Camera;
	AlternateCameraViewData AlternateView;
	RegularCameraViewData RegularView;
	float FreezeHeight;
	StanceCameraData StanceData;
	CameraComponentSoundData CameraSoundData;
	SoldierAnimatedCameraData SoldierAnimatedCamera;
	float CameraTransitionTime;
	uint32 MeshParentComponentNumber;
	bool EnableCameraMesh;
	bool ReceiveImpulsesAsThirdPerson;
	bool UseCameraTransition;
	bool AlternateViewEnabled;
	bool IsFirstPerson;
	bool IgnoreOwnerOrientation;
}

class CameraComponentSoundData : DataContainer {
	SoundAsset SwitchToAlternateViewSound;
	SoundAsset SwitchToNormalViewSound;
}

class CameraData : GameObjectData {
	Vec3 OcclusionRayOffset;
	float ShakeFactor;
	float PreFadeTime;
	float FadeTime;
	float FadeWaitTime;
	float SoundListenerRadius;
	ViewFxData ViewFx;
	float NearPlane;
	float ShadowViewDistanceScale;
	float SoundOcclusion;
	bool StayFadedWhileStreaming;
}

class CameraEnterAreaTriggerEntityData : EntityData {
	Realm Realm;
	float TimeTreshold;
	UpdatePass UpdatePass;
	bool AutoStart;
}

class CameraEntityBaseData : SpatialEntityData {
	string NameId;
	int32 Priority;
	bool Enabled;
}

class CameraEntityData : CameraEntityBaseData {
	float Fov;
}

enum CameraIds {
	NoCameraId = 0,
	FreeCameraId = 1,
	EntryCameraId = 2,
	CameraIdCount = 3
}

struct CameraLeapData {
	LinearTransform Transform;
	float Time;
	float FovModifier;
}

class CameraLoosePartPhysicsData : LoosePartPhysicsData {
	float Scale;
}

class CameraModeAsset : Asset {
}

enum CameraMovementActionMode {
	CameraMovementActionMode_Start = 0,
	CameraMovementActionMode_Stop = 1,
	CameraMovementActionMode_StartAndStop = 2
}

class CameraParamsComponentData : ComponentData {
	float ViewDistance;
	float NearPlane;
	float SunShadowmapViewDistance;
}

class CameraProximityEvaluatorData : EvaluatorData {
	Vec3 Size;
	Vec3 Offset;
	Vec3 InnerRadiusDirection;
	float InnerRadius;
	float ForwardOffset;
}

class CameraRecoilData : DataContainer {
	float SpringConstant;
	float SpringDamping;
	float SpringMinThresholdAngle;
}

class CameraShakeNodeData : AudioGraphNodeData {
	AudioGraphNodePort Pitch;
	AudioGraphNodePort Yaw;
	AudioGraphNodePort Roll;
}

struct CameraSineCurveData {
	float Frequency;
	float Amplitude;
	float PhaseShift;
}

class CameraTransition : DataContainer {
}

class CancelOrderEntityData : BFOrderEntityData {
}

struct CannedAnimationBinding {
	AntRef LevelIndex;
	AntRef ScenarioIndex;
	AntRef ActorIndex;
	AntRef PartIndex;
	AntRef TriggerCannedAnimation;
	AntRef ExitCannedAnimation;
	AntRef ExternalTime;
	AntRef BlendValue;
	AntRef AdvanceScenario;
	AntRef EnteredLoop;
}

class CannedScenarioEntityData : EntityData {
	CannedAnimationBinding CannedAnimBinding;
	int32 AnimationEntitySpacePriority;
	bool AlwaysClearEntitySpaceWhenInScenario;
}

enum CapturableType {
	CTDefault = 0,
	CTUnableToChangeTeam = 1,
	CTCaptureEnablable = 2
}

class CapturePointEntityData : GameEntityData {
	int32 EnemyTicketLossWhenCaptured;
	int32 MinNrToTakeControl;
	ObjectBlueprint[] FlagTemplates;
	ObjectBlueprint CapturePoint;
	TeamId InitialOwnerTeam;
	float CaptureRadius;
	int32 MaxCaptureMultiplier;
	int32 AreaValue;
	uint32 SpawnMenuListOrdinal;
	AreaValueTeam[] AreaValues;
	int32 TimeToGetControl;
	int32 TimeToLoseControl;
	float ReturnMultiplier;
	int32 OnlyTakeableByTeam;
	float ShowRadius;
	float HideRadius;
	float AddedMultiplierPerPlayer;
	float Modify3DIconVerticalOffset;
	CapturableType CapturableType;
	string IntruderWarningSID;
	bool IsCapturedInUpperSphere;
	bool DisableWhenLosingControl;
	bool LoseControlWhenNotClose;
	bool DisableIfEnemyInside;
	bool IsVisible;
	bool ForceSnap;
	bool UseAreaValuesPerTeam;
	bool IntruderWarning;
	bool ShowOnMinimap;
	bool HoistFlag;
	bool StartAtBottom;
	bool RemoveWhenCaptured;
	bool SeesawCapturing;
}

class CapturePointScoringHandlerData : ScoringHandlerData {
	float SquadCappingBonus;
}

class CellDetailSelectionRule : PackagingRule {
	PackagingDetailLevel Detail;
}

enum ChangeGameSettingType {
	CGSNone = 0,
	CGSInvertVerticalLookAxis = 1,
	CGSCount = 2
}

class ChangeReadinessOrderEntityData : BFOrderEntityData {
	ReadinessLevel Pulse;
	ReadinessLevel Minimum;
	bool AllowDecrease;
}

class CharacterAnimationEntityData : EntityData {
	LinearTransform EntitySpaceTransform;
	AntRef Controller;
	float TrackLength;
	float ExternalTime;
	float WarpAnimationBlendTime;
	bool RestoreControllerOnFinish;
}

class CharacterAnimationSpaceEntityData : EntityData {
	Realm Realm;
	AntRef SpacePositionGS;
	AntRef SpaceRotationGS;
	float WarpAnimationBlendTime;
}

class CharacterAsset : CharacterBlueprint {
}

class CharacterBlueprint : ObjectBlueprint {
}

class CharacterCameraComponentData : ComponentData {
	TargetCameraData[] Cameras;
	string CameraBoneName;
}

class CharacterCustomizationAsset : Asset {
	string LabelSid;
	UIHudIcon UIHudIcon;
	VoiceOverLabel[] VoiceOverLabels;
	CustomizationTable VisualTable;
	CustomizationTable SpecializationTable;
}

class CharacterCustomizationComponentData : ComponentData {
	CharacterSocketListAsset SocketList;
	MeshLodGroup SharedLodGroup;
}

class CharacterEntityData : ControllableEntityData {
	PersonViewMode DefaultViewMode;
	PlayerSpawnType PlayerSpawnType;
	bool CharacterLightingEnable;
}

class CharacterHealthComponentData : ComponentData {
	float MaxHealth;
	float RegenerateHealthPerSecond;
	bool RegenerateHealth;
	bool IsImmortal;
}

class CharacterInVehicleScenarioEntityData : GameEntityData {
	Realm Realm;
	AntRef ScenarioAntRef;
	int32 LevelId;
	int32 ScenarioId;
	int32 ActorId;
	int32 PartId;
}

class CharacterLightingComponentData : ComponentData {
	Vec3 BottomLight;
	Vec3 TopLight;
	CharacterLightingMode CharacterLightingMode;
	float CameraUpRotation;
	float TopLightDirY;
	float BlendFactor;
	float TopLightDirX;
	bool LockToCameraDirection;
	bool FirstPersonEnable;
	bool CharacterLightEnable;
}

enum CharacterLightingMode {
	CharacterLightingMode_Add = 0,
	CharacterLightingMode_Blend = 1
}

struct CharacterMeleeBinding {
	AntRef TriggerMelee;
	AntRef SelfActor;
	AntRef OtherActor;
	AntRef MeleeActive;
}

struct CharacterMeleeCommonBinding {
	AntRef MeleeDistance;
	AntRef MeleeAngle;
	AntRef MeleeDefenceTime;
	AntRef MeleeSequenceTime;
	AntRef MeleeAborted;
	AntRef CloseToTarget;
	AntRef MeleeType;
}

class CharacterPhysicsComponentData : ComponentData {
	CharacterPhysicsData CharacterPhysics;
	bool EnableCollisionOnSpawn;
}

class CharacterPhysicsData : Asset {
	CharacterPoseData[] Poses;
	CharacterStateData[] States;
	CharacterStateType DefaultState;
	CharacterSprintData Sprint;
	MaterialContainerPair MaterialPair;
	int32 PushableObjectWeight;
	float Mass;
	float MaxAscendAngle;
	float PhysicalRadius;
	float WaterDepthLimit;
	float InputAcceleration;
	float LadderAcceptAngle;
	float LadderAcceptAnglePitch;
	float JumpPenaltyTime;
	float JumpPenaltyFactor;
	float RadiusToPredictCollisionOnCharacters;
	bool AllowPoseChangeDuringTransition;
}

enum CharacterPoseAction {
	CPTNoAction = 0,
	CPTForceToStand = 1,
	CPTForceToCroch = 2,
	CPTForceToProne = 3
}

enum CharacterPoseCollisionType {
	CharacterPoseCollisionType_Capsule = 0,
	CharacterPoseCollisionType_Pencil = 1
}

struct CharacterPoseConstraintsData {
	bool StandPose;
	bool CrouchPose;
	bool PronePose;
}

class CharacterPoseData : DataContainer {
	Vec3 EyePosition;
	Vec3 CollisionBoxMaxExpand;
	Vec3 CollisionBoxMinExpand;
	float Height;
	float StepHeight;
	Vec2[] ThrottleModifierCurve;
	CharacterPoseType PoseType;
	CharacterPoseCollisionType CollisionType;
	LookConstraintsData LookConstraints;
	PoseTransitionTime[] TransitionTimes;
}

enum CharacterPoseType {
	CharacterPoseType_Stand = 0,
	CharacterPoseType_Crouch = 1,
	CharacterPoseType_Prone = 2,
	CharacterPoseTypeCount = 3
}

class CharacterSocketListAsset : Asset {
	SocketData[] GameplaySockets;
	SocketData[] RigidVisualSockets;
	SocketData[] SkinnedVisualSockets;
}

class CharacterSpawnReferenceObjectData : SpawnReferenceObjectData {
	PlayerSpawnType PlayerType;
	uint32 VehicleEntryIndex;
	SoldierSpawnTemplateData Template;
	float HumanTargetPreference;
	UIHudIcon MinimapIcon;
	bool AllowFallbackOnNextAvailabeVehicleEntry;
	bool CheckMaxPlayersInVehicle;
	bool AffectMinimapPosition;
	bool IsTarget;
	bool IgnoreVehicleIcon;
}

class CharacterSprintData : DataContainer {
	float SprintPowerDecreasePerSecond;
	float SprintPowerIncreasePerSecond;
	float SprintMinimumPower;
	bool AllowContinousSprinting;
}

class CharacterStateData : DataContainer {
	CharacterStatePoseInfo[] PoseInfo;
}

class CharacterStatePoseInfo : DataContainer {
	CharacterPoseType PoseType;
	float Velocity;
	float AccelerationGain;
	float DecelerationGain;
	float SprintGain;
	float SprintMultiplier;
	SpeedModifierData SpeedModifier;
}

class CharacterStateTriggerEntityData : TriggerEntityData {
	uint32 ActiveWeaponSlot;
	float Pitch;
	CharacterPoseAction CharacterPose;
	uint32 AmmoToSet;
	CharacterPoseAction PoseToCheck;
	SoldierWeaponBlueprint Weapon;
	uint32 HealthToSet;
	uint32 HealthToCheck;
	uint32 SeatIndex;
	bool ExcludeConnectedVehicles;
	bool ContinueToCheckIfHoldingWrongWeapon;
	bool StayInVehicleOnMove;
	bool CheckHealthGreaterOrEqual;
	bool CheckAllWeapons;
	bool ShouldCheckSeatIndex;
	bool UseExitPointWhenLeavingVehicle;
	bool DisablePhysicsWhenLeavingVehicle;
	bool UsePitch;
}

enum CharacterStateType {
	CharacterStateType_OnGround = 0,
	CharacterStateType_Jumping = 1,
	CharacterStateType_InAir = 2,
	CharacterStateType_Climbing = 3,
	CharacterStateType_Falling = 4,
	CharacterStateType_User_0 = 5,
	CharacterStateType_Parachute = 5,
	CharacterStateType_User_1 = 6,
	CharacterStateType_Swimming = 6,
	CharacterStateType_User_2 = 7,
	CharacterStateType_AnimationControlled = 7,
	CharacterStateType_User_3 = 8,
	CharacterStateType_Sliding = 8,
	CharacterStateType_User_4 = 9,
	CharacterStateType_User_5 = 10,
	CharacterStateType_StateCount = 11
}

struct CharacterWeaponBinding {
	AntRef WeaponId;
}

class CharacterWeaponComponentData : ComponentData {
	SoldierWeaponBlueprint DefaultWeaponBlueprint;
	string AimBoneName;
	SkeletonAsset WeaponSkeleton;
}

class ChaseCameraData : TargetCameraData {
	Vec3 TargetOffset;
	Vec3 ToWantedPositionScale;
	float AwayFromTargetForceScale;
	float TargetRotationOffset;
	float MaxViewRotationAngleDeg;
	float WantedAngleDeg;
	float WantedDistance;
	float MaxDistance;
	float SnapDistance;
	float ForceFieldRadius;
	float CollisionRadius;
	float ForceFieldForceScale;
	float MaxVelocity;
	float VelocityDrag;
	float PillExpandSizeSpeedAcceleration;
	float PillMinimumCollisionRadius;
	float PillMaximumCollisionRadius;
	float PillMinimumCollisionLength;
	float LookDistanceScale;
	float LookDistanceInFrontOfTarget;
	uint32 UpdateRate;
	bool KeepTargetPitch;
	bool InheritTargetVelocity;
	bool ShouldRollWithTarget;
	bool HasCollision;
}

class ChassisComponentData : PartComponentData {
	VehicleConfigData VehicleConfig;
	GearboxConfigData GearboxConfig;
	VehicleWaterEffectData[] WaterStreakEffects;
	VehicleWaterEffectData[] WaterEffects;
	float TriggerGroundEffectImpulse;
	LandingGearLogicData LandingGearLogic;
	bool AlwaysFullThrottle;
	bool ForceLandingGearsRetract;
	bool AllowNegativeThrottle;
}

enum ChatChannelType {
	CctSayAll = 0,
	CctTeam = 1,
	CctSquad = 2,
	CctSquadLeader = 3,
	CctAdmin = 4,
	CctSize = 5
}

class ChatSettings : Asset {
	ChatChannelType[] Channels;
	AntiSpamConfig AntiSpam;
}

class ChildBarrelComponentData : ChildComponentData {
}

class ChildComponentData : PartComponentData {
	LinearTransform AlignTransform;
	MovingBodyData MovingBody;
	VehicleHealthZoneData HealthZone;
	float SoundEffectStartRpm;
	float SoundEffectStopRpm;
	AlignmentData AlignmentSettings;
	SoundAsset SoundEffect;
	bool EnableAlignToCamera;
	bool WorldSpacePositionLock;
}

class ChildMovingBodyData : LinearMovingBodyData {
	float InputDelay;
	float Speed;
	EntryInputActionEnum InputAction;
	float TriggerImpulse;
	bool IsOneShotInput;
}

class ChildRotationBodyData : RotationBodyData {
	float ForceModifier;
	float ResetForceModifier;
	float ResetForceInputThreshold;
	EntryInputActionEnum RotationInput;
	float WorldSpaceLockEfficiency;
	bool UseLinearInput;
}

struct ChildStaticModelNetworkInfo {
	IndexRange NetworkRange;
	uint32 ParentPartComponentIndex;
	uint32 ParentHealthStateIndex;
	uint32 InstanceIndex;
}

struct ChunkStreamerCell {
	Vec2[] Shape;
	string BundleName;
}

class ChunkStreamerEntityData : EntityData {
	ChunkStreamerCell[] Cells;
}

class ClearAreaTriggerEntityData : TriggerEntityData {
	TeamId TeamOfImmortalSoldiers;
	bool RemoveBangers;
	bool RemoveVehicles;
	bool RemoveEffects;
	bool RemoveStaticModels;
	bool RemoveDebrisClusters;
	bool ExcludeImmortalSoldiersInTeam;
	bool RemoveMeshProxies;
	bool RemoveSoldiers;
}

class ClientEffectMaskVolumeEntityData : GameEntityData {
	Vec4 ApplyEffectCurve;
	float LifeTimeInSeconds;
	float UpdatePeriodInSeconds;
	float Radius;
}

enum ClientGameType {
	ClientGameType_SinglePlayer = 0,
	ClientGameType_Hosted = 1,
	ClientGameType_Joined = 2
}

class ClientJuiceState : MetricState {
	int32 SessionId;
}

class ClientMetricsSettings : DataContainer {
	bool Enabled;
}

class ClientPlayerInputPlaybackEntityData : EntityData {
	Realm Realm;
	string FileName;
}

class ClientPlayerInputRecorderEntityData : EntityData {
	Realm Realm;
	string FileNameBase;
}

class ClientSettings : SystemSettings {
	float LoadedTimeout;
	uint32 OutgoingRate;
	float LoadingTimeout;
	float IncomingFrequency;
	uint32 IncomingRate;
	float DuplicationChance;
	uint32 Team;
	float MaxDropDuration;
	float ReorderingChance;
	float DropSpikeChance;
	float MinDropDuration;
	float MaxIncomingLatency;
	float PacketDrops;
	float MaxLatency;
	float MinIncomingLatency;
	float CorruptionChance;
	string ServerIp;
	string ScreenshotSuffix;
	int32 SpawnPointIndex;
	float MinLatency;
	string ScreenshotFilename;
	float IngameTimeout;
	float AimScale;
	string SecondaryServerIp;
	bool SkipFastLevelLoad;
	bool ScreenshotToFile;
	bool IgnoreClientFireRateMultiplier;
	bool InputEnable;
	bool LoadMenu;
	bool PauseGameOnStartUp;
	bool DebugMenuOnLThumb;
	bool InvertPitch;
	bool OccludersEnabled;
	bool IsPresenceEnabled;
	bool InvertFreeCamera;
	bool Scheme2FlipY;
	bool InvertYaw;
	bool LipSyncEnabled;
	bool IsInternetSimulationEnabled;
	bool OnDamageSpottingEnabled;
	bool EmittersEnabled;
	bool PadRumbleEnabled;
	bool OvergrowthEnabled;
	bool EffectsEnabled;
	bool TerrainEnabled;
	bool WaterPhysicsEnabled;
	bool VegetationEnabled;
	bool WorldRenderEnabled;
	bool RenderTags;
	bool DebrisClusterEnabled;
	bool HavokVisualDebugger;
	bool HavokVDBShowsEffectsWorld;
	bool HavokCaptureToFile;
	bool UseMouseAndKeyboardSystem;
	bool UseGlobalGamePadInput;
	bool ThreadedLoadingEnable;
	bool ShowBuildId;
	bool ExtractPersistenceInformation;
	bool EnableRestTool;
	bool LocalVehicleSimulationEnabled;
	bool AsyncClientBulletEntity;
	bool AutoUnspawnDynamicObjects;
	bool VsyncEnable;
	bool VisualFrameInterpolation;
	bool InvertPadPcRightStick;
	bool Scheme0FlipY;
	bool IsSpectator;
	bool Scheme1FlipY;
	bool QuitGameOnServerDisconnect;
}

enum ClientState {
	ClientState_WaitingForStaticBundleLoad = 0,
	ClientState_LoadProfileOptions = 1,
	ClientState_LostConnection = 2,
	ClientState_Startup = 3,
	ClientState_StartServer = 4,
	ClientState_WaitingForLevel = 5,
	ClientState_StartLoadingLevel = 6,
	ClientState_WaitingForLevelLoaded = 7,
	ClientState_WaitingForLevelLink = 8,
	ClientState_LevelLinked = 9,
	ClientState_WaitingUIIngame = 10,
	ClientState_Ingame = 11,
	ClientState_ConnectToServer = 12,
	ClientState_WaitingUILoading = 13,
	ClientState_WaitingUIUnload = 14,
	ClientState_None = 15
}

class ClimbingStateData : CharacterStateData {
	float LateralInputScale;
	float DownAngleLimit;
	float DropOffAngle;
	float AttractionVelocity;
	float PushAwayVelocity;
	float ClimbHeightOffset;
	float ClimbOffVerticalDistance;
	float ClimbOffVerticalTime;
	float ClimbOffHorizontalDistance;
	float ClimbOffHorizontalTime;
}

struct ClimbLadderBinding {
	AntRef ClimbLadderPhase;
	AntRef ClimbLadderConnectPhase;
	AntRef ClimbLadderTransitionPhase;
	AntRef OnLadder;
	AntRef LadderTopTransition;
	AntRef FallHigh;
}

class ClimbLadderComponentData : ComponentData {
	int32 ClimbPhase;
	int32 ConnectPhase;
	float ConnectJointDisplacement;
	ClimbLadderBinding Binding;
}

class ClosestInstancesScopeStrategyData : SoundScopeStrategyData {
	uint32 Count;
}

class CollisionData : DataContainer {
	ValueAtX[] DamageAtVerticalVelocity;
	ValueAtX[] DamageAtHorizVelocity;
}

enum CollisionMethodEnum {
	CMESimple = 0,
	CMEDetailed = 1
}

class ColorCorrectionComponentData : ComponentData {
	Vec3 Contrast;
	Vec3 Saturation;
	Vec3 Brightness;
	Realm Realm;
	float Hue;
	TextureAsset ColorGradingTexture;
	bool ColorGradingEnable;
	bool Enable;
}

class ColorReference : Asset {
	Vec4 Color;
}

struct ColorTintData {
	Vec3 Contrast;
	Vec3 Brightness;
	Vec3 Saturation;
	float Hue;
}

class ColorTintScopeFilterData : ScopeFilterData {
	ColorTintData ColorTintData;
}

class ColorUnlockPartData : DataContainer {
	ColorReference ColorReference;
}

class CombatActionTriggerEntityData : TriggerEntityData {
	float TimeToTriggerOnNoAction;
}

class CombatAreaTriggerEntityData : GameEntityData {
	float MaxRandomSpawnHeight;
	float SpawnHeight;
	uint32 TimeToReturn;
	BulletEntityData DeserterProjectile;
	TeamId Team;
	float StrikeRadius;
	float InitalSpeed;
	bool IsAiAllowedOutside;
	bool IsTeamSpecific;
}

class CombatConstantData : Asset {
	float PoseTransitionFireDelay;
	float ChangePoseStopDelay;
	float AllowCrouchFiringWaterLevel;
	float PoseChangeLockoutTime;
	float ExplosionInterestRange;
	float ExplosiveObjectSearchRadius;
	float ExplosiveBlastMultiplier;
	float MaxSuppressDistance;
	float MaxSuppressorsRatio;
	float SuppressOffsetXz;
	float SuppressOffsetY;
	float SuppressMinLOFDistance;
	float SuppressMinLOFOffsetDistance;
	float InvestigateCoverSearchWidth;
	float InvestigateAroundTargetRadius;
	float InvestigateFreeLookRadius;
	float InvestigatePauseTimeMin;
	float InvestigatePauseTimeMax;
	float AvoidC4Time;
	float StandStillMinTime;
	float StationaryBailDistance;
	float PrecisionTimeout;
	float CloseRangeAccuracyDistance;
	float FightFromPathRadius;
	float SmokeRadius;
	float SmokeLifeTime;
	float MeleeCooldown;
}

enum CombatPatrolMode {
	CombatPatrolMode_MustStayOnPath = 0,
	CombatPatrolMode_FreeToFight = 1,
	CombatPatrolMode_FreeToFightAtDestination = 2
}

class CombustionEngineConfigData : EngineConfigData {
}

class CompareBoolEntityData : EntityData {
	Realm Realm;
	bool Bool;
	bool TriggerOnPropertyChange;
}

class CompareEntityData : EntityData {
	Realm Realm;
	CompareOp Operator;
	float FloatIn0;
	float FloatIn1;
	int32 IntIn0;
	int32 IntIn1;
}

class CompareFloatEntityData : EntityData {
	Realm Realm;
	float A;
	float B;
	bool TriggerOnPropertyChange;
	bool TriggerOnStart;
}

class CompareIntEntityData : EntityData {
	Realm Realm;
	int32 A;
	int32 B;
	bool TriggerOnPropertyChange;
	bool TriggerOnStart;
}

enum CompareOp {
	CompareOp_Equal = 0,
	CompareOp_NotEqual = 1,
	CompareOp_Greater = 2,
	CompareOp_Less = 3,
	CompareOp_GreaterOrEqual = 4,
	CompareOp_LessOrEqual = 5
}

enum CompareOperation {
	Equal = 0,
	NotEqual = 1,
	LesserEqual = 2,
	GreaterEqual = 3,
	Lesser = 4,
	Greater = 5
}

class ComparisonLogicNode : UINodeData {
	UINodePort In;
	UINodePort[] Outputs;
	UIDataSourceInfo DataSourceInfo;
	bool SkipFractionals;
}

class ComponentData : GameObjectData {
	LinearTransform Transform;
	GameObjectData[] Components;
	bool Excluded;
}

class CompositeMeshAsset : MeshAsset {
}

class CompositeMeshEntityData : SpatialEntityData {
	CompositeMeshAsset Mesh;
}

enum CompressorChannelMode {
	CompressorChannelMode_Independent = 0,
	CompressorChannelMode_Grouped = 1
}

class CompressorNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Threshold;
	AudioGraphNodePort Ratio;
	AudioGraphNodePort AttackTime;
	AudioGraphNodePort ReleaseTime;
	AudioGraphNodePort Out;
	CompressorChannelMode ChannelMode;
	SoundGraphPluginRef Plugin;
}

class CompressorSettings : DataContainer {
	float Ratio;
	float Threshold;
	float Attack;
	float Release;
}

class ConditionGroup : AudioGraphNodePortGroup {
	AudioGraphNodePort X;
	AudioGraphNodePort Y;
	AudioGraphNodePort True;
	ConditionType Condition;
}

class ConditionNodeData : AudioGraphNodeData {
	ConditionGroup[] Conditions;
}

enum ConditionType {
	ConditionType_And = 0,
	ConditionType_Or = 1,
	ConditionType_XOr = 2,
	ConditionType_Equal = 3,
	ConditionType_Less = 4,
	ConditionType_Greater = 5,
	ConditionType_LessOrEqual = 6,
	ConditionType_GreaterOrEqual = 7
}

class ConeOutputNodeData : OutputNodeData {
	Vec3 Direction;
	AudioGraphNodePort PositionY;
	AudioGraphNodePort PositionX;
	AudioGraphNodePort PositionZ;
	AudioGraphNodePort OuterAngle;
	AudioGraphNodePort InnerAngle;
	float OutsideGain;
	float PanSize;
	AudioGraphNodePort CenterLevel;
	AudioGraphNodePort LfeLevel;
	float HFDampingAngle;
	float ReverbGain;
	SoundBusData ReverbSend;
	SoundGraphPluginRef PanPlugin;
	SoundGraphPluginRef ReverbSendPlugin;
}

class ConsoleCommandEntityData : EntityData {
	string[] Commands;
	Realm Realm;
}

class ConsoleCommandTriggerEntityData : EntityData {
	string CommandName;
	Realm Realm;
}

class ConstantEvaluatorData : EvaluatorData {
	float Scale;
}

struct ConstantForceData {
	Vec3 Value;
	ForceCondition Condition;
	ForceType TypeOfForce;
	SpaceType Space;
}

struct Consumable {
	guid Instance;
	ConsumableGroup Group;
}

enum ConsumableGroup {
	ConsumableGroup_0 = 0,
	ConsumableGroup_1 = 1,
	ConsumableGroup_2 = 2,
	ConsumableGroup_3 = 3,
	ConsumableGroup_4 = 4,
	ConsumableGroup_5 = 5,
	ConsumableGroup_6 = 6,
	ConsumableGroup_7 = 7,
	ConsumableGroup_Count = 8
}

class ConsumablesLevelDescriptionComponent : LevelDescriptionComponent {
	Consumable[] Consumables;
}

class ConsumableTriggerEntityData : TriggerEntityData {
	ConsumableGroup ConsumableGroup;
	bool Persistent;
}

struct ContinueWeaponAmmoData {
	int32 MinMags;
	int32 WeaponSlot;
}

class ControllableEntityData : GamePhysicsEntityData {
	float LowHealthThreshold;
	TeamId DefaultTeam;
	MaterialContainerPair MaterialPair;
	bool ResetTeamOnLastPlayerExits;
	bool FakeImmortal;
	bool UsePrediction;
	bool Immortal;
	bool ForceForegroundRendering;
}

class CoopLobbyEntityData : GameEntityData {
	float ClientConnectionTimeout;
	bool IsInGame;
}

enum CoopPlayerEvent {
	CoopPlayerEvent_Connecting = 0,
	CoopPlayerEvent_Connected = 1,
	CoopPlayerEvent_Disconnected = 2,
	CoopPlayerEvent_Stats = 3,
	CoopPlayerEvent_StatsFailed = 4
}

enum CoreLogLevel {
	CllNone = 0,
	CllEventRecord = 1,
	CllCrash = 2,
	CllError = 3,
	CllAssert = 4,
	CllFatalAssert = 5,
	CllValidate = 6,
	CllWarning = 7,
	CllInfo = 8,
	CllOutput = 9,
	CllDebug = 10
}

struct CoreSettings {
	int32 RandomTickSeed;
	string AvailableLanguages;
	int32 RandomSessionId;
	int32 RandomTimeSeed;
	float HardwareGpuBias;
	HardwareProfile HardwareProfile;
	int32 JobProcessorCount;
	int32 MaxJobThreadCount;
	string Host;
	string HostUser;
	string HostUserDomain;
	string InitSeed;
	CoreLogLevel LogLevel;
	float HardwareCpuBias;
	string GameConfigurationName;
	string ProfileDirectoryName;
	bool DisplayAsserts;
	bool LiveEditingEnable;
	bool UseStorageServer;
	bool UseDiskCaching;
	bool CrashOnFatalErrors;
}

class CountDownEntityData : EntityData {
	int32 StartValue;
	Realm Realm;
	bool RunOnce;
}

struct CounterHelper {
	bool dummy;
}

struct CounterStatus {
	float CurrentValue;
	float OriginalValue;
}

class CoverConstantData : Asset {
	float SlotSize;
	float SlotSpacing;
	float SlotEdgeDistance;
	float SlotBlockedEdgeDistance;
	float MinimumOpenCoverWidth;
	float ProneHeight;
	float CrouchHeight;
	float MediumHeight;
	float StandHeight;
	int32 MaxCoversInMemory;
	float SearchRadius;
	float ProneCoverModifier;
	float CrouchCoverModifier;
	float MediumCoverModifier;
	float StandCoverModifier;
	float IntermediateCoverSlotModifier;
	float DistanceEvaluationWeight;
	float EnemiesEvaluationWeight;
	float AttackPositionEvaluationWeight;
	float OptimalWeaponDistanceEvaluationWeight;
	float DislikePreviousCoverWeight;
	float MaxHeightDifference;
	float SwitchCoverUrgencyThreshold;
	float ExtraCoverSize;
	float ReevaluationTime;
	CoverSelectionMethod CoverSelectionMethod;
	float ThreatRadius;
	float InCoverDistance;
	float MinAttackableEnemyDistance;
	float CoverFailIgnoreTime;
	float StartMeleeFromCoverDistance;
	float ContinueMeleeFromCoverDistance;
}

enum CoverEnterStrategy {
	CoverEnterStrategy_EnterNormally = 0,
	CoverEnterStrategy_SkipEnterButAlign = 1,
	CoverEnterStrategy_SkipEnterDontAlign = 2
}

class CoverEntityData : SpatialEntityData {
	float Width;
	CoverType CoverType;
	CoverSlot[] Slots;
	bool RightEdgeBlocked;
	bool TopBlocked;
	bool LeftEdgeBlocked;
}

enum CoverExitStyle {
	CoverExitStyle_ExitCover = 0,
	CoverExitStyle_VaultFromCrouchCover = 1,
	CoverExitStyle_StrafeFire = 2,
	CoverExitStyle_Surprised = 3,
	CoverExitStyle_Sprint = 4
}

enum CoverFireType {
	CoverFireType_Peek = 0,
	CoverFireType_Out = 1,
	CoverFireType_Over = 2,
	CoverFireType_BlindOut = 3,
	CoverFireType_BlindOver = 4,
	CoverFireType_GrenadeOut = 5,
	CoverFireType_GrenadeBlindOver = 6,
	CoverFireType_NoFire = 7,
	CoverFireType_Flanked = 8,
	CoverFireType_OutSlow = 10,
	CoverFireType_OutUrgent = 11,
	CoverFireType_OutStandToCrouch = 12,
	CoverFireType_Lmg = 13,
	CoverFireType_OutFireFromHip = 14,
	CoverFireType_FlankedSurprised = 15
}

enum CoverPeekType {
	CoverPeekType_Out = 0,
	CoverPeekType_Over = 1,
	CoverPeekType_None = 2
}

class CoverPrepareFireEntityData : EntityData {
}

enum CoverSelectionMethod {
	CSMAgainstThreatPosition = 0,
	CSMAgainstHighestThreat = 1,
	CSMAgainstSelectedTarget = 2,
	CSMAgainstAllEnemies = 3,
	CSMAgainstAllEnemiesWithFallback = 4
}

struct CoverSlot {
	Vec3 Position;
}

enum CoverType {
	CoverType_Stand = 0,
	CoverType_Medium = 1,
	CoverType_Crouch = 2,
	CoverType_Prone = 3
}

class CoverWaypointData : AbstractLocoWaypointData {
	AILocoCoverTaskData CoverTask;
}

class CreateDestructionVolumeParams : DataContainer {
	string AssetName;
}

class CreateRawFileParams : DataContainer {
	string AssetName;
	string SourceFile;
	bool CreateResource;
}

struct CriteriaAward {
	AwardData Award;
	uint32 Count;
	string Sid;
}

class CriteriaData : DataContainer {
	float CompletionValue;
	CriteriaGateList GateList;
	StatEvent Measuring;
	StatsCategoryBaseData ParamX;
	StatsCategoryBaseData ParamY;
	StatsCategoryBaseData[] OrParamsX;
	CriteriaType CriteriaType;
	string DescriptionSid;
	float ScaleFactor;
	float Scale;
	bool ShouldSummarize;
	bool ShouldHide;
	bool CountEvents;
}

class CriteriaGateList : Asset {
	float[] CriteriaGates;
}

class CriteriaStarCategoryData : DataContainer {
	CriteriaStarCategoryInstance[] CriteriaInstances;
}

struct CriteriaStarCategoryInstance {
	string Name;
	StatsCategoryBaseData ParamX;
	StatsCategoryBaseData ParamY;
}

class CriteriaStarData : CriteriaData {
	CriteriaStarCategoryData StarTemplate;
}

enum CriteriaType {
	CriteriaType_IAR_InARound = 0,
	CriteriaType_IAR_InARoundResetIfValueNotChanged = 1,
	CriteriaType_IAS_InASpawn = 2,
	CriteriaType_IAS_InASpawnNotResetable = 3,
	CriteriaType_IAS_InASpawnWithoutTakingDamage = 4,
	CriteriaType_GLOBAL_AllTimeTotal = 5,
	CriteriaType_GLOBAL_HighestValue = 6,
	CriteriaType_GLOBAL_HighestValueAlways = 7,
	CriteriaType_GLOBAL_HighestValueInASpawn = 8,
	CriteriaType_GLOBAL_LowestValueAlways = 9,
	CriteriaType_IfNotTrue = 10,
	CriteriaType_IAD_InADeathStreak = 11,
	CriteriaType_GLOBAL_HighestValuePersistent = 12,
	CriteriaType_LAST_ITEM = 13
}

class Crossfader2NodeData : AudioGraphNodeData {
	AudioGraphNodePort Ctrl;
	AudioGraphNodePort CtrlOut1;
	AudioGraphNodePort CtrlOut2;
}

class CrossfaderNodeData : AudioGraphNodeData {
	AudioGraphNodePort In1;
	AudioGraphNodePort In2;
	AudioGraphNodePort Ctrl;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin1;
	SoundGraphPluginRef Plugin2;
}

class CTFScoringHandlerData : ScoringHandlerData {
	int32 MaxTeams;
	float PickUpAssistRadius;
	float CaptureAssistRadius;
	float EnemyThreatRadius;
	float EnemySuppressionTimeout;
}

class Curve2D : DataContainer {
	Vec2[] Curve;
}

enum CurveInfinityType {
	CurveInfinityType_Constant = 0,
	CurveInfinityType_Linear = 1,
	CurveInfinityType_Cycle = 2,
	CurveInfinityType_CycleWithOffset = 3,
	CurveInfinityType_Oscillate = 4
}

enum CurveShaderType {
	CstSine = 0,
	CstSineNormalized = 1,
	CstSawtooth = 2,
	CstTriangle = 3,
	CstSquare = 4
}

enum CustomizationConstants {
	MaxAttachedSockets = 4,
	MaxVisualSockets = 16
}

class CustomizationTable : DataContainer {
	CustomizationUnlockParts[] UnlockParts;
}

class CustomizationUnlockParts : DataContainer {
	string UICategorySid;
	UnlockAssetBase[] SelectableUnlocks;
}

class CustomizeBaseEntityData : EntityData {
	Realm Realm;
}

class CustomizeCharacterData : Asset {
	CustomizeVisual[] VisualGroups;
	float OverrideCriticalHealthThreshold;
	UnlockAssetBase[] Unlocks;
	float OverrideMaxHealth;
	bool ClearVisualState;
	bool RestoreToOriginalVisualState;
}

class CustomizeCharacterEntityData : CustomizeBaseEntityData {
	CustomizeCharacterData CustomizeCharacterData;
}

class CustomizedMaterialData : DataContainer {
	string[] MaterialNames;
	UnlockableColorCollection[] ColorParameters;
	UnlockableTextureCollection[] TextureParameters;
	UnlockableTextureSliceCollection[] TextureSliceParameters;
}

struct CustomizedMeshMaterialsData {
	ObjectBlueprint MeshBlueprint;
	string[] MaterialNames;
}

class CustomizeSoldierData : CustomizeCharacterData {
	UnlockWeaponAndSlot[] Weapons;
	WeaponSlot ActiveSlot;
	PickupEntityAsset DeathPickup;
	bool RemoveAllExistingWeapons;
	bool DisableDeathPickup;
}

class CustomizeSoldierEntityData : CustomizeBaseEntityData {
	CustomizeSoldierData CustomizeSoldierData;
}

struct CustomizeVisual {
	UnlockAsset[] Visual;
}

struct CustomReportValueData {
	string Name;
	CustomReportValueKind Kind;
	PersistentValueDataType DataType;
}

enum CustomReportValueKind {
	CustomReportValueKind_ScoreMultiplier = 0,
	CustomReportValueKind_GunMasterLevel = 1
}

class CustomSequenceTrackData : EntityData {
	string TrackName;
	CustomSequenceTrackLinkMapping[] InputLinkMap;
	CustomSequenceTrackLinkMapping[] OutputLinkMap;
	CustomSequenceTrackEventMapping[] EventMap;
	CustomSequenceTrackPropertyMapping[] SourcePropertyMap;
	CustomSequenceTrackPropertyMapping[] TargetPropertyMap;
	CustomSequenceTrackPropertyMapping[] SourceAndTargetPropertyMap;
}

class CustomSequenceTrackEventMapping : DataContainer {
	int32 TrackEventID;
	int32 SequenceEventID;
}

class CustomSequenceTrackLinkMapping : DataContainer {
	int32 TrackLinkID;
	int32 SequenceLinkID;
}

class CustomSequenceTrackPropertyMapping : DataContainer {
	int32 TrackPropertyID;
	int32 SequencePropertyID;
}

class CustomSplineData : VectorShapeData {
}

class DacNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort SpeakerCount;
	AudioGraphNodePort SampleRate;
	SoundGraphPluginRef VuPlugin;
	SoundGraphPluginRef GainPlugin;
	SoundGraphPluginRef DacPlugin;
}

class DamageAreaTriggerEntityData : TriggerEntityData {
	float DamagePerSecond;
	TeamId TeamOfImmortalCharacters;
	float DamageTime;
	bool DamageVehicles;
	bool DamageBangers;
	bool ExcludeImmortalCharactersInTeam;
	bool DamageCharacters;
	bool ExcludeShieldedSoldiers;
}

class DamageEffectComponentData : ComponentData {
	Vec4 RightDamage;
	Vec4 TopDamage;
	Vec4 LeftDamage;
	Vec4 BottomDamage;
	float OuterFrameOpacity;
	float InnerFrameOpacity;
	float FrameWidth;
	SurfaceShaderBaseAsset Shader;
	float StartCriticalEffectHealthThreshold;
	float EndCriticalEffectHealthThreshold;
	float MinDamagePercentageThreshold;
	float FallofTime;
	float MaxOpacityDamagePercentage;
	Realm Realm;
	bool DebugDamage;
}

enum DamageIndicationType {
	DamageIndicationType_GiverPlayer = 0,
	DamageIndicationType_ExplosionCenter = 1
}

class DamageScoringHandlerData : ScoringHandlerData {
	float RepairVehicleLimit;
	float DamageTeamVehicleLimit;
	float TeamHealingLimit;
	float TeamDamageLimit;
	float KillAssistLimit;
	float KillAssistTimeout;
	float VehicleDestroyAssistLimit;
	float SaviorKillTimeout;
	float SaviorDamageLimit;
	float HotVehicleTimeout;
}

class DamageToVehicleEvent : MetricEvent {
	string VehicleName;
	string WeaponName;
	float DamageAmount;
}

class DataBusData : Asset {
	PropertyConnection[] PropertyConnections;
	LinkConnection[] LinkConnections;
}

class DataContainerAsset : Asset {
	DataContainer Data;
}

struct DataCopSettings {
	DataCopValueSetting[] Values;
}

struct DataCopValueSetting {
	int32 DataKey;
	int32 FrameSpacing;
	int32 Offset;
}

struct DataField {
	string Value;
	DataContainer ValueRef;
	int32 Id;
	FieldAccessType AccessType;
}

class DataGetNode : UINodeData {
	UINodePort In;
	UINodePort Out;
	UIDataSourceInfo DataSource;
}

class DataIncrementNode : UINodeData {
	UINodePort In;
	UINodePort Out;
	float Max;
	float Min;
	float IncrementSize;
	UIDataSourceInfo DataSource;
}

class DataSetNode : UINodeData {
	UINodePort In;
	UINodePort Out;
	string Param;
	UIDataSourceInfo DataSource;
	bool SetToEmptyString;
	bool ForceUpdate;
}

struct DataSource {
	UIComponentData Category;
	int32 Value;
}

class DataStepNode : UINodeData {
	UINodePort In;
	UINodePort Out;
	float[] Steps;
	UIDataSourceInfo CurrentStepDataSource;
	UIDataSourceInfo DataSource;
}

class DataToggleNode : UINodeData {
	UINodePort In;
	UINodePort Out;
	UIDataSourceInfo DataSource;
}

struct DataVisualizerValue {
	string Value;
}

enum DeathAnimationOperation {
	DALessThan = 0,
	DAGreaterThan = 1,
	DAEqualTo = 2
}

class DeathAreaTriggerEntityData : GameEntityData {
	float Damage;
	float TimeToReturn;
}

class DeathEvent : MetricEvent {
	Vec3 Position;
	Vec3 KillerPosition;
	uint64 KillerId;
	float Time;
	string Weapon;
}

class DebrisClusterData : GameEntityData {
	Vec3 PushVelocityMul;
	Vec3 PushVelocityRndMul;
	Vec3 InitRotationRndMul;
	float ClusterLifetime;
	MeshAsset Mesh;
	uint32 CompositePartCount;
	uint32 MaxActivePartsCount;
	DebrisClusterPartInfoData[] PartHierarchy;
	float ActivationPushForceMul;
	float ProjectileForceTransferMul;
	PhysicsEntityData PhysicsData;
	GameEntityData Explosion;
	EffectBlueprint ActivationEffect;
	EffectBlueprint Effect;
	float OnPartCollisionSpeedThreshold;
	bool PartialDestruction;
	bool ClientSideOnly;
	bool OnPartCollisionEnable;
	bool NoCollision;
	bool KillPartsOnCollision;
	bool DeactivatePartsOnSleep;
	bool ActivateOnSpawn;
	bool InEffectWorldOnly;
	bool SpawnExplosionOnFirstImpactOnly;
}

struct DebrisClusterPartInfoData {
	Vec3 AngularVelocity;
	Vec3 LinearVelocity;
	int32 NumberOfChildren;
	int32 PartIndex;
	float SplitSpeedThreshold;
	bool InEffectWorldOnly;
	bool SyncRestPosition;
	bool SyncContinous;
}

struct DebrisHavokInfo {
	HavokAsset HavokAsset;
	int32 ReserveCount;
}

class DebrisSystemAsset : Asset {
	DebrisHavokInfo[] HavokMeshes;
	int32 HavokMeshCount;
}

struct DebrisSystemMetrics {
	int32 HavokParticleCount;
	int32 HavokParticlePartCount;
}

class DebrisSystemSettings : DataContainer {
	uint32 MeshDrawCountLimit;
	float TimeScale;
	float MeshCullingDistance;
	uint32 DrawStats;
	uint32 MeshBatchCountLimit;
	float MeshStreamingPriorityMultiplier;
	bool MeshRenderingEnable;
	bool EnableJobs;
	bool MeshShadowEnable;
	bool MeshViewCullingEnable;
	bool MeshHavokRenderingEnable;
	bool MeshDrawTransforms;
	bool Enable;
	bool MeshDrawBoundingBoxes;
	bool MeshDrawCullStats;
}

class DebugComponentData : ComponentData {
	Realm Realm;
	TextureAsset DebugTexture;
	bool Fullscreen;
	bool Enable;
}

class DebugConstantData : Asset {
	float BotDebugDistance;
	float InViewModeFOV;
	uint32 GraphDataBuffer;
	float MinDecisionTime;
	bool InaccuracyEnabled;
}

class DebugEventInput : AudioGraphNodePortGroup {
	AudioGraphNodePort E;
	string Name;
	bool RequireTriggeredAndSet;
}

class DebugMenuItemEntityData : GameEntityData {
	DebugMenuItemType ItemType;
	string Text;
}

enum DebugMenuItemType {
	DmitItem = 0,
	DmitToggle = 1
}

class DebugMenuSubMenuEntityData : GameEntityData {
	string Text;
}

class DebugRenderSettings : DataContainer {
	float TextQueueTimeVisible;
	uint32 Ps3SpuFrameBufferSize;
	float TextViewDistance;
	uint32 TextQueueMaxLineCount;
	uint32 DxMaxVertexCount;
	int32 ProcessJobCount;
	bool DrawStatsEnable;
	bool Ps3SpuEnable;
	bool Enable;
	bool TextQueueLocationTop;
	bool DxLine2dAntialiasingEnable;
	bool DxLine3dAntialiasingEnable;
}

enum DebugRenderType {
	DebugRenderType_Text = 0,
	DebugRenderType_Plot = 1,
	DebugRenderType_Bar = 2
}

class DebugSurveyEvent : MetricEvent {
	string PlayerName;
	guid SurveyMetricLink;
}

class DebugTestEntityData : GameEntityData {
}

class DebugTextEntityData : SpatialEntityData {
	Vec3 TextColor;
	string DebugText;
	Realm Realm;
	float Scale;
	bool Visible;
	bool Centered;
	bool DepthTest;
	bool ScaleWithDistance;
}

class DebugValueInput : AudioGraphNodePortGroup {
	AudioGraphNodePort V;
	string Name;
	DebugRenderType RenderType;
	float Min;
	float Max;
}

struct DecalAtlasTile {
	float TileIndexX;
	float TileIndexY;
	float TileCountX;
	float TileCountY;
	bool FlipX;
	bool FlipY;
}

class DecalEntityData : GameEntityData {
	SurfaceShaderBaseAsset Shader;
	DecalAtlasTile AtlasTile;
	int8 MaterialIndex;
	int8 SortingPriority;
	bool Projected;
}

class DecalSettings : SystemSettings {
	uint32 StaticBufferMaxVertexCount;
	uint32 RingBufferMaxVertexCount;
	bool DrawEnable;
	bool SystemEnable2;
	bool SystemEnable;
	bool Enable;
	bool DebugMemUsageEnable;
	bool DebugWarningsEnable;
	bool NvidiaStreamOutputWorkaroundEnable;
}

class DecalTemplateData : Asset {
	float Size;
	float RandomSize;
	float Rotation;
	float RandomRotation;
	float ClipAngle;
	float ProximityRadiusFactor;
	float NormalOffset;
	SurfaceShaderBaseAsset Shader;
	int32 MeshUVIndex;
	DecalAtlasTile AtlasTile;
	int8 SortingPriority;
	bool Projected;
	bool ProjectMultiple;
	int8 MaterialIndex;
}

class DecalVolumeEntityData : RenderVolumeEntityData {
}

class DecisionConstantData : Asset {
	float NewEnemyDecideMaxDistance;
	bool AllowEmergencyGoalInterrupt;
	bool AllowUninterruptibleBehaviours;
}

struct DefaultSelectionItem {
	UIDataSourceInfo DefaultSelectionQuery;
	int32 DefaultSelectionIndex;
}

class DefibrillatorWeaponData : WeaponData {
	float ReviveTime;
	float AttackTime;
}

class DelayEntityData : EntityData {
	float Delay;
	Realm Realm;
	bool AutoStart;
	bool RunOnce;
	bool RemoveDuplicateEvents;
}

class DelayNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort DelayTime;
	AudioGraphNodePort Feedback;
	AudioGraphNodePort Out;
	float MaxDelayTime;
	SoundGraphPluginRef Plugin;
}

class DelayTriggerEntityData : TriggerEventEntityData {
	bool AutoTriggerEvent;
}

class DeltaGroup : AudioGraphNodePortGroup {
	AudioGraphNodePort In;
	AudioGraphNodePort Delta;
}

class DeltaNodeData : AudioGraphNodeData {
	DeltaGroup[] Deltas;
}

class DemoSettings : DataContainer {
	string RecordDemoFileName;
	string PlaybackDemoFileName;
	string TimeDemo;
	string LockToPlayerName;
	uint32 ChangePlayerInterval;
	uint32 ForcedDeltaTickCount;
	uint32 StartProfilingOnFrame;
	uint32 StopProfilingOnFrame;
	uint32 TakeScreenshotOnFrame;
	bool AllowOverwrite;
	bool LogPerformance;
	bool SuppressDebugLog;
	bool ShutdownOnDemoComplete;
	bool LoopingDemo;
	bool LockToRandomPlayer;
	bool PauseOnStartup;
}

class DeMuxNodeData : AudioGraphNodeData {
	DeMuxOutput[] Outputs;
	AudioGraphNodePort Trigger;
	AudioGraphNodePort Value;
	bool WrapValue;
}

class DeMuxOutput : AudioGraphNodePortGroup {
	AudioGraphNodePort Trigger;
}

enum DepthStencilCompareFunc {
	DepthStencilCompareFunc_Never = 0,
	DepthStencilCompareFunc_Less = 1,
	DepthStencilCompareFunc_Equal = 2,
	DepthStencilCompareFunc_LessEqual = 3,
	DepthStencilCompareFunc_Greater = 4,
	DepthStencilCompareFunc_NotEqual = 5,
	DepthStencilCompareFunc_GreaterEqual = 6,
	DepthStencilCompareFunc_Always = 7
}

class DestroyAllInSquadScoringHandlerData : ScoringHandlerData {
}

class DestroyLevelCommandEntityData : GameEntityData {
	uint32 InstanceCountDestroyedPerFrame;
	uint32 DestroyDelay;
}

class DestructionCommandEntityData : GameEntityData {
	uint32 InstanceCountDestroyedPerFrame;
	uint32 InstanceCountDestroyedPerType;
}

enum DestructionConnectivityType {
	DestructionConnectivityType_Full = 0,
	DestructionConnectivityType_Partial = 1,
	DestructionConnectivityType_None = 2,
	DestructionConnectivityType_Inherited = 3
}

class DestructionControllerComponentData : ComponentData {
	ObjectBlueprint[] DebrisClusters;
	bool AttachToNearbyObjects;
}

class DestructionDepthRasterData : RasterQuadtreeData {
}

class DestructionDepthTreeAsset : RasterTreeAsset {
}

class DestructionEdgeModelComponentData : ComponentData {
}

class DestructionMaskVolumeEntityData : GameEntityData {
	Vec4 DustAccumulationCurve;
	Vec4 ShaderUserMasks;
	float DustAccumulationLifeTime;
	SurfaceShaderInstanceDataStruct Shader;
	float Radius;
}

class DestructionPartComponentData : ComponentData {
	GameObjectData[] Objects;
	uint32 PartIndex;
	DestructionConnectivityType ConnectivityType;
	bool Fixed;
	bool Fragile;
}

class DestructionVolumeAsset : Asset {
	TextureAsset DiffuseAtlas;
	TextureAsset NormalmapAtlas;
	float AtlasTextureScale;
}

struct DestructionVolumeAtlasTextureData {
	float AtlasAlphaInfluence;
	float MaskEdgeThickness;
}

class DestructionVolumeComponentData : ComponentData {
	DestructionVolumeData DestructionVolumeData;
}

class DestructionVolumeData : DataContainer {
	AxisAlignedBox BoundingBox;
	DestructionVolumeAsset Asset;
	Vec4[] Impacts;
	uint32[] PartToImpactIndices;
}

struct DestructionVolumeProjectionData {
	Vec3 Normal;
	float TangentAngle;
}

class DetonatedWeaponData : WeaponData {
	LockingControllerData LockingController;
	float Range;
}

class DialogNode : StateNode {
	string DialogTitle;
	string DialogText;
	UIPopupButton[] Buttons;
}

class DialogSamplerNodeData : AudioGraphNodeData {
	AudioGraphNodePort Pitch;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Continue;
	AudioGraphNodePort Output;
	AudioGraphNodePort Triggered;
	AudioGraphNodePort Finished;
	SoundGraphPluginRef SndPlayerPlugin;
	SoundGraphPluginRef ResamplePlugin;
	SoundGraphPluginRef PausePlugin;
	SoundGraphPluginRef GainPlugin;
	float TailLength;
}

enum Difficulty {
	Difficulty_Easy = 0,
	Difficulty_Medium = 1,
	Difficulty_Hard = 2,
	Difficulty_Hardcore = 3,
	Difficulty_None = 4
}

class DifficultyData : DataContainer {
	Vec3 StickyBoxModifier;
	Vec3 SnapBoxModifier;
	float HumanHealthModifier;
	PersistenceGameType GameType;
	float FriendsHealthModifier;
	float FriendlyDamageModifier;
	float VehicleDamageModifier;
	float HumanInCriticalHealth;
	float EnemiesHealthModifier;
	float HumanRegenerationRateModifier;
	float HumanInCriticalHealthDamageModifier;
	float InteractiveManDownDamageModifier;
	float InteractiveManDownTimeMultiplier;
	float InteractiveManDownReviveTime;
	int32 AdrenalineKillLimit;
	float CriticalHealthJesusModeTimeModifier;
	Difficulty Difficulty;
	float CriticalFakeImmortalModifier;
	float SuckZoomModifier;
	GameAIDifficultyData AIData;
	float AiBulletDamageHumanCooldown;
	bool UsePitchZoomSnap;
}

class DifficultyDatas : Asset {
	DifficultyData[] Difficulties;
}

class DifficultyIndexEntityData : EntityData {
	Realm Realm;
}

class DirectOutputNodeData : OutputNodeData {
}

struct DirectWeaponSwitchingMapData {
	EntryInputActionEnum Action;
	WeaponSwitchingEnum ToWeapon;
	float PreventMeleeRepeatTime;
	float SwitchBackToPrevMaxTimePressed;
	bool UseQuickSwitch;
	bool FireAndSwitchBackToPrev;
}

class DirtySockPresenceBackendData : PresenceBackendData {
}

enum DisableTeamType {
	DttDisable = 0,
	DttUnspawn = 1
}

class DiscComponentData : UIComponentData {
}

class DistortionClipNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort ClipLevel;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class DivisibleLoopPlayerNodeData : AudioGraphNodeData {
	AudioGraphNodePort Start;
	AudioGraphNodePort Stop;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort FreezeSegment;
	AudioGraphNodePort Output;
	SoundWaveAsset Wave;
	AudioGraphNodePort ExternalWave;
	DivisibleLoopPlayerPlugins[] Plugins;
	float CrossFadeLength;
	bool StartAtRandomPosition;
}

struct DivisibleLoopPlayerPlugins {
	SoundGraphPluginRef SndPlayer;
	SoundGraphPluginRef Pause;
	SoundGraphPluginRef Gain;
	SoundGraphPluginRef GainFader;
}

class DofComponentData : ComponentData {
	Realm Realm;
	float NearDistanceScale;
	float FocusDistance;
	BlurFilter BlurFilter;
	float BlurFilterDeviation;
	float FarDistanceScale;
	float BlurAdd;
	float Scale;
	float DiffusionDofFocalLength;
	float DiffusionDofAperture;
	bool DiffusionDofEnable;
	bool Enable;
}

enum DogTagCategory {
	DTC_Invalid = 0,
	DTC_Ribbons = 1,
	DTC_Medals = 2,
	DTC_Ranks = 3,
	DTC_ServiceStars = 4,
	DTC_Weapons = 5,
	DTC_Misc = 6,
	DTC_Assassin = 7
}

class DogTagData : UnlockAssetBase {
	string NameSID;
	string DescriptionSID;
	string ImageName;
	string SmallImageName;
	DogTagCategory Category;
	bool InvertText;
	bool IsAlwaysAvailable;
	bool ExcludedOnXenon;
	bool ExcludedOnPs3;
	bool ExcludedOnWin32;
}

class DogTagsAsset : Asset {
	StatsCategoryWeaponData MeleeKillWeapon;
	BasicDogTagData[] BasicDogTags;
	AdvancedDogTagData[] AdvancedDogTags;
}

class DriverComponentData : ComponentData {
	float WantedSpeed;
	DriverSettings Settings;
}

class DriverSettings : Asset {
	float MinRadius;
	float RadiusGrowthSpeed;
	float StoppingDeceleration;
	float SteeringSensitivity;
	float MaxBrakeOutput;
	float MaxDec;
	float LookAheadTime;
	float AngleDiffForNoSlowdown;
	float AngleDiffForFullSlowdown;
	float VelocityAtFullSlowdown;
	float VelDiffAtMinAcc;
	float VelDiffAtMaxAcc;
	float MaxYawToApplySprint;
	float MinAcc;
	float MaxAcc;
	float VelDiffAtMinDec;
	float VelDiffAtMaxDec;
	float AccDiffAtMinThrottleVelocityDecelerating;
	float MinDec;
	float MinThrottleVelocityDecelerating;
	float AccDiffAtMinThrottleVelocityAccelerating;
	float AccDiffAtMaxThrottleVelocityAccelerating;
	float MaxThrottleVelocityDecelerating;
	float MinThrottleVelocityAccelerating;
	float MaxThrottleVelocityAccelerating;
	float MaxPTerm;
	float AccDiffAtMaxThrottleVelocityDecelerating;
	float P;
	float I;
	float MaxError;
	float MaxITerm;
	float MaxSumError;
	float D;
	bool UseSquareVelDiffCurveDec;
	bool UseSquareAccDiffCurveDec;
	bool SquareBrakeOutput;
	bool UseSquareVelDiffCurveAcc;
	bool UsePIDRegulator;
	bool UseSquareAccDiffCurveAcc;
}

class DriverStaticObjectComponentData : DriverComponentData {
	float Acceleration;
	float Deceleration;
	float TurningRadius;
	bool TurnWhileStill;
	bool AlignWithGroundNormal;
}

class DropWeaponComponentData : ComponentData {
	PickupEntityAsset DeathPickup;
	EntryInputActionEnum ActionIdentifier;
	float DropWeaponAfterTime;
	PickupEntityAsset Pickup;
	WeaponSlot[] ExcludedWeaponSlots;
	float WeaponDropTime;
	bool ListenToAnimationWeaponDropSignal;
	bool AllowDropWeaponOnAction;
	bool RequireWeaponSlotEmpty;
}

enum DTagUploadPolicy {
	DTUP_FirstTimeSeenAndEndOfRound = 0,
	DTUP_Always = 1
}

class DuplicateSpawnScopeStrategyData : SoundScopeStrategyData {
	float Time;
	float Distance;
	uint32 ClosestCount;
	bool GroupTypes;
}

class DxDisplaySettings : SystemSettings {
	uint32 FullscreenWidth;
	uint32 FullscreenHeight;
	string AmdMinDriverVersion;
	uint32 NvidiaMinDriverVersion;
	float FullscreenRefreshRate;
	float StereoSeparationScale;
	float StereoDepth;
	int32 FullscreenOutputIndex;
	int32[] DebugBreakIgnoredIDs;
	float StereoConvergenceScale;
	float StereoSoldierZoomConvergenceScale;
	int32 ForceRenderAheadLimit;
	int32 PresentInterval;
	bool DebugBreakOnWarningEnable;
	bool DebugInfoEnable;
	bool Fullscreen;
	bool DebugBreakOnErrorEnable;
	bool CreateMinimalWindow;
	bool DriverInternalThreadingEnable;
	bool DebugBreakOnInfoEnable;
	bool FullscreenModeEnable;
	bool VSyncEnable;
	bool TripleBufferingEnable;
	bool Dx10PlusEnable;
	bool NvApiEnable;
	bool NvPerfHudEnable;
	bool StereoEnable;
	bool Dx11Enable;
	bool Dx10Dot0Enable;
	bool RefDriverEnable;
	bool Dx10Dot1Enable;
	bool MinDriverRequired;
	bool WarpDriverEnable;
	bool NullDriverEnable;
	bool MultiGpuValidationEnable;
}

class DynamicAOComponentData : ComponentData {
	Realm Realm;
	float SsaoMaxDistanceOuter;
	float SsaoFade;
	float SsaoRadius;
	float SsaoMaxDistanceInner;
	float HbaoRadius;
	float HbaoAttenuation;
	float HbaoAngleBias;
	float HbaoPowerExponent;
	float HbaoContrast;
	float HbaoMaxFootprintRadius;
	bool Enable;
}

enum DynamicAOMethod {
	DynamicAOMethod_SSAO = 0,
	DynamicAOMethod_HBAO = 1
}

class DynamicAvoidanceEntityData : EntityData {
	DynamicAvoidanceMode RepelOthers;
	DynamicAvoidanceMode ReportPredictedCollision;
	float CollisionRadius;
	Realm Realm;
	AntDynamicAvoidanceBinding AntBinding;
	bool AffectedByRepellingForce;
	bool PredictedByOthers;
}

enum DynamicAvoidanceMode {
	DynamicAvoidanceMode_Never = 0,
	DynamicAvoidanceMode_WhenScripted = 1,
	DynamicAvoidanceMode_WhenNotScripted = 2,
	DynamicAvoidanceMode_Always = 3
}

class DynamicDataContainer : DataContainer {
	DataField[] Fields;
}

class DynamicEnlightenEntityData : EnlightenEntityData {
	EnlightenDataAsset EnlightenData;
}

class DynamicEnvmapComponentData : ComponentData {
	Vec3 KeyColorEnvmap;
	Vec3 GroundColorEnvmap;
	Vec3 SkyColorEnvmap;
	bool Enable;
}

struct DynamicEvent {
	int32 Id;
}

class DynamicGamePhysicsEntityData : GamePhysicsEntityData {
}

struct DynamicLink {
	int32 Id;
}

class DynamicModelEntityData : DynamicGamePhysicsEntityData {
	PartComponentData Part;
	MeshAsset Mesh;
	bool NoCollision;
}

class DynamicWeaponPickupEntityData : PickupEntityData {
	DynamicWeaponPickupSlotData[] WeaponSlots;
	bool KeepAmmoState;
}

struct DynamicWeaponPickupSlotData {
	uint32 WeaponSlot;
	int32 AltWeaponSlot;
	int32 LinkedToWeaponSlot;
}

class EdgeModelComponentData : DestructionEdgeModelComponentData {
	RigidMeshAsset[] RigidMeshes;
	uint32 MaxInstanceCount;
}

struct EdgeModelInstance {
	LinearTransform Transform;
}

class EdgeModelLightMapData : DataContainer {
	Vec4[] LightMapUvs;
}

struct EdgeModelLightMapInstance {
	Vec4 LightMapUv;
	Vec3 Position;
}

struct EdgePointerData {
	float NegativeXLimit;
	float PositiveXLimit;
	float NegativeYLimit;
	float PositiveYLimit;
}

class EditableAction : DataContainer {
	InputConceptIdentifiers Concept;
}

struct EditableActionMap {
	string Id;
	string NameId;
	EntryInputActionMapsData ActionMap;
	EditableActions ConfigurationLayout;
}

struct EditableActions {
	EditableAction[] Actions;
}

class EffectAsset : EffectBlueprint {
}

class EffectBlueprint : ObjectBlueprint {
}

class EffectComponentData : ComponentData {
	EffectBlueprint Effect;
	float EmitterParameter1;
	float EmitterParameter3;
	float EmitterParameter2;
	bool AutoStart;
	bool SnapToWaterSurface;
}

class EffectEntityData : SpatialEntityData {
	GameObjectData[] Components;
	uint32 MaxInstanceCount;
	float CullDistance;
	float StartDelay;
	bool HighEndPc;
	bool MediumPc;
	bool LowEndPc;
	bool ResetInstanceWhenStarted;
}

class EffectManagerSettings : SystemSettings {
	uint32 MaxNewEffectsPerFrameCount;
	uint32 SizeToGrowNewEffectsContainer;
	uint32 EffectQuality;
}

class EffectReferenceObjectData : ReferenceObjectData {
	bool AutoStart;
}

struct EloExpectedFunctionPoint {
	float XValue;
	float YValue;
}

struct EloFunctionPoint {
	float XValue;
	float YValue;
}

struct EloParameters {
	EloFunctionPoint[] KWinner;
	EloFunctionPoint[] KLoser;
	EloFunctionPoint[] KNewbie;
	EloFunctionPoint[] KCompetitor;
	EloExpectedFunctionPoint[] Expected;
}

enum EmittableField {
	EfZero = 0,
	EfOne = 1,
	EfNormTime = 2,
	EfEmitterNormTime = 3,
	EfSpawnAnimationSpeed = 4,
	EfSpawnAnimationFrameIndex = 5,
	EfVelocity = 6,
	EfParameters = 7,
	EfRotation = 8,
	EfSpeed = 9,
	EfUserDefined = 10,
	EfConstantFloat = 11,
	EfConstantVec = 12,
	EfNone = 13
}

enum EmittableType {
	Point = 0,
	Quad = 1,
	ScreenAlignedQuad = 2,
	DirectionAlignedQuad = 3,
	WorldAlignedQuad = 4,
	Trail = 5,
	ParticleMesh = 6,
	EmittableTypeCount = 7
}

class EmitterAsset : Asset {
}

class EmitterComponentData : DataContainer {
}

class EmitterData : ProcessorData {
	EmitterDocument[] EmitterAssets;
}

class EmitterDocument : EmitterAsset {
	ProcessorData RootProcessor;
	EmitterTemplateData TemplateData;
}

class EmitterEntityData : EffectEntityData {
	EmitterAsset Emitter;
	float SpawnProbability;
}

class EmitterExclusionVolumeData : OBBData {
}

enum EmitterParameter {
	EmitterParameterNone = 0,
	EmitterParameter1 = 1,
	EmitterParameter2 = 2,
	EmitterParameter3 = 3,
	EmitterParameter4 = 4,
	EmitterParameterVec = 5,
	EmitterParameterDistance = 6,
	EmitterParameterVecAverage = 7
}

class EmitterSystemAsset : Asset {
	EmitterTextureAtlasInfo[] TextureInfos;
	TextureAsset BaseAtlasTexture;
	TextureAsset NormalAtlasTexture;
}

class EmitterSystemSettings : DataContainer {
	uint32 MeshDrawCountLimit;
	float TimeScale;
	float GlobalResetStartTimeInterval;
	float QuadHalfResSlice2ThresholdLow;
	float QuadHalfResSlice2ThresholdHigh;
	float QuadHalfResSlice1ThresholdLow;
	float QuadHalfResSlice1ThresholdHigh;
	int32 DebugOverdrawCount;
	uint32 DrawStats;
	float MeshStreamingPriorityMultiplier;
	float QuadZOcclusionBias;
	uint32 DrawBoundingBoxes;
	float MinScreenArea;
	float QuadNearFadeDistance;
	int32 QuadTechnique;
	float MeshCullingDistance;
	bool EnableFixedTimeStep;
	bool ZBufferCullEnable;
	bool QuadEnableOverdrawRendering;
	bool QuadColorShaderCostsEnable;
	bool DrawProjectedBoxes;
	bool QuadSimpleRenderingEnable;
	bool EnableJobs;
	bool EnableRendering;
	bool QuadHalfResEnable;
	bool QuadEnableRendering;
	bool EnableFixedDelta;
	bool QuadClipScaleEnable;
	bool QuadNiceRenderingEnable;
	bool QuadGroupsJoinAll;
	bool QuadGroupsJoinNone;
	bool QuadGroupsJoinNiceAndSimple;
	bool QuadEnableOpaque;
	bool QuadVertexShadowsEnable;
	bool QuadPointLightsEnable;
	bool QuadSpotLightsEnable;
	bool QuadEnableSorting;
	bool MeshRenderingEnable;
	bool MeshDrawTransforms;
	bool MeshDrawBoundingBoxes;
	bool MeshShadowEnable;
	bool QuadEnableWireframe;
	bool Enable;
	bool QuadEnableZOcclusion;
	bool MeshDrawCullStats;
}

class EmitterTemplateData : DataContainer {
	Vec4 PointLightIntensity;
	Vec3 PointLightPivot;
	Vec3 PointLightColor;
	uint32 MaxCount;
	string Name;
	float TimeScale;
	uint32 LifetimeFrameCount;
	float Lifetime;
	ProcessorData RootProcessor;
	float VisibleAfterDistance;
	float[] ZOcclusionLookup;
	EmittableType EmittableType;
	MeshAsset Mesh;
	float DistanceScaleNearValue;
	float PointLightRadius;
	float VertexPixelLightingBlendFactor;
	float GlobalLocalNormalBlendFactor;
	float SoftParticlesFadeDistanceMultiplier;
	float LightWrapAroundFactor;
	float LightMultiplier;
	float DistanceScaleFarValue;
	float PointLightRandomIntensityMin;
	float MeshCullingDistance;
	float PointLightRandomIntensityMax;
	float MaxSpawnDistance;
	float MinScreenArea;
	float DistanceScaleLength;
	float PointLightMaxClamp;
	float ParticleCullingFactor;
	float PointLightMinClamp;
	bool FollowSpawnSource;
	bool RepeatParticleSpawning;
	bool Emissive;
	bool ExclusionVolumeCullEnable;
	bool TransparencySunShadowEnable;
	bool ForceFullRes;
	bool LocalSpace;
	bool Opaque;
	bool ActAsPointLight;
	bool KillParticlesWithEmitter;
	bool ForceNiceSorting;
}

struct EmitterTextureAtlasInfo {
	Vec2 MinUv;
	Vec2 MaxUv;
	string TextureName;
}

struct EmitterTextureInfo {
	string TextureName;
	string NormalmapName;
	float AnimationFrameCount;
	float AnimationFrameColumnCount;
	bool EnableAnimation;
}

struct EndPointData {
	float Pos;
	float EndDamping;
	float SpringLength;
	float SpringAcceleration;
	float SpringDamping;
}

class EngineComponentData : ComponentData {
	EngineConfigData Config;
	SoundAsset SoundEffect;
	SoundAsset SurfaceSoundEffect;
	bool UseFirstPersonSounds;
	bool OutputIsEngineInWater;
}

class EngineConfigData : DataContainer {
	Vec3 Position;
	float[] RpmCurvePoints;
	float[] TorqueCurvePoints;
	float RpmMin;
	float RpmMax;
	float RpmCut;
	float EnginePowerMultiplier;
	float InternalAccelerationFactor;
	float InternalDeaccelerationFactor;
	Boost Boost;
}

class EnlightenBuildRadiosityParams : DataContainer {
}

class EnlightenBuildRadiositySceneDesc : DataContainer {
	EnlightenLightProbeSet[] LightProbeSets;
	EnlightenInputInstance[] Instances;
	Vec3[] StaticLightProbes;
	string Terrain;
	uint32 SamplesPerCluster;
	float SystemInfluenceRadius;
	uint32 SystemSize;
	uint32 IrBudget;
	float ClusterSize;
	bool SaveDebugData;
	bool DistributedBuild;
	bool CacheEnable;
}

enum EnlightenColorMode {
	EnlightenColorMode_Multiply = 0,
	EnlightenColorMode_Override = 1
}

class EnlightenComponentData : ComponentData {
	Vec3 SkyBoxSkyColor;
	Vec3 SkyBoxBackLightColor;
	Vec3 SkyBoxGroundColor;
	Vec3 TerrainColor;
	Vec3 SkyBoxSunLightColor;
	float BounceScale;
	float CullDistance;
	float SunScale;
	Realm Realm;
	float SkyBoxBackLightRotationY;
	float SkyBoxSunLightColorSize;
	float SkyBoxBackLightColorSize;
	float SkyBoxBackLightRotationX;
	bool SkyBoxEnable;
	bool Enable;
}

class EnlightenDataAsset : Asset {
	TextureAsset DebugBackFaceTexture;
	int32 MaxResolutionY;
	TextureAsset DebugChartTexture;
	TextureAsset SkyVisibilityTexture;
	float VisibilityThreshold;
	int32 MaxResolutionX;
	bool LoadDebugData;
	bool DynamicEnable;
}

class EnlightenDatabaseAsset : Asset {
	uint32 DataVersion;
	uint32 DebugMeshDataVersion;
	uint32 OutputSizeX;
	uint32 OutputSizeY;
	EnlightenDbSystem[] Systems;
	EnlightenLightProbeSet[] LightProbeSets;
}

class EnlightenDataCreatorParams : DataContainer {
	string AssetName;
}

struct EnlightenDbInstance {
	AxisAlignedBox WorldBoundingbox;
	LinearTransform WorldTransform;
	Vec2 UvTranslation;
	Vec4 UvTransform;
	uint32 GeometryId;
	string ObjectVariation;
	string GuidString;
	uint32 UvSizeX;
	uint32 UvSizeY;
	float PixelSize;
	string EnlightenMeshName;
	string MeshAsset;
	uint64[] InstanceAlbedos;
	guid CacheKey;
}

struct EnlightenDbSystem {
	AxisAlignedBox BoundingBox;
	uint32 AtlasStartX;
	uint32 AtlasStartY;
	uint32 OutputWidth;
	uint32 OutputHeight;
	uint32 PixelCount;
	float PixelSize;
	int32 SystemId;
	EnlightenDbInstance[] Instances;
	int32[] InputSystems;
	PrecomputeCache SystemCache;
	PrecomputeCache ClusteringCache;
	PrecomputeCache PreClusteringCache;
	PrecomputeCache LightTransportCache;
	PrecomputeCache VisibilityCache;
	bool TerrainSystem;
}

class EnlightenEntityData : EntityData {
	int32 Priority;
	Realm Realm;
	bool Enable;
}

struct EnlightenInputInstance {
	LinearTransform Transform;
	string Asset;
	string ObjectVariation;
	int32 SystemId;
}

struct EnlightenLightProbeSet {
	LinearTransform Transform;
	AxisAlignedBox BoundingBox;
	uint32 SizeX;
	uint32 SizeZ;
	uint32 SizeY;
	int32 SystemId;
	float BlendDistance;
	int32 Priority;
	Vec3[] Positions;
	uint32[] ValidIndices;
	int32[] InputSystems;
	PrecomputeCache Cache;
	bool StaticProbeSet;
}

class EnlightenPipelineParams : DataContainer {
	bool DynamicEnable;
}

class EnlightenPipelineTerrain : Asset {
	EnlightenPipelineTerrainMesh[] Meshes;
}

struct EnlightenPipelineTerrainMesh {
	Vec2 UvTranslation;
	AxisAlignedBox BoundingBox;
	Vec4 UvTransform;
	uint32 LightMapResolution;
	string TerrainMeshName;
}

class EnlightenRuntimeConfig : Asset {
	uint32 JobCount;
}

class EnlightenRuntimeSettings : SystemSettings {
	Vec3 AlbedoDefaultColor;
	float LocalLightForceRadius;
	int32 DrawDebugSystemDependenciesEnable;
	float TemporalCoherenceThreshold;
	float SkyBoxScale;
	uint32 MinSystemUpdateCount;
	uint32 JobCount;
	int32 DrawDebugSystemBoundingBoxEnable;
	uint32 LightProbeMaxUpdateSolveCount;
	float DrawDebugLightProbeSize;
	bool CompensateSunShadowHeightScale;
	bool SaveRadiosityTexturesEnable;
	bool ShadowsEnable;
	bool LightMapsEnable;
	bool LocalLightsEnable;
	bool LocalLightCullingEnable;
	bool LocalLightCustumFalloff;
	bool LightProbeForceUpdate;
	bool ForceDynamic;
	bool DrawDebugSystemsEnable;
	bool LightProbeEnable;
	bool LightProbeJobsEnable;
	bool DrawDebugLightProbes;
	bool DrawDebugLightProbeOcclusion;
	bool DrawDebugLightProbeStats;
	bool DrawDebugLightProbeBoundingBoxes;
	bool Enable;
	bool DrawSolveTaskPerformance;
	bool DrawDebugColoringEnable;
	bool DrawDebugTextures;
	bool DrawDebugBackFaces;
	bool DrawDebugTargetMeshes;
	bool DrawWarningsEnable;
	bool AlbedoForceUpdateEnable;
	bool AlbedoForceColorEnable;
	bool DrawDebugEntities;
	bool TerrainMapEnable;
	bool EmissiveEnable;
}

class EnlightenShaderDatabaseAsset : Asset {
}

class EnlightenState : DataContainer {
	Vec3 SkyBoxGroundColor;
	Vec3 SkyBoxSunLightColor;
	Vec3 SkyBoxBackLightColor;
	Vec3 SkyBoxSkyColor;
	float SunScale;
	float OutputScale;
	float BounceScale;
	float SkyBoxSunLightColorSize;
	float SkyBoxBackLightRotationY;
	float SkyBoxBackLightColorSize;
	float SkyBoxBackLightRotationX;
	bool SkyBoxEnable;
}

enum EnlightenType {
	EnlightenType_Dynamic = 0,
	EnlightenType_LightProbe = 1,
	EnlightenType_Static = 2
}

class EnterVehicleSurveyEvent : MetricEvent {
	string VehicleName;
	guid SurveyMetricLink;
}

struct EntitlementData {
	string License;
	string EntitlementTag;
	string GroupName;
	string ProductId;
	string ProjectId;
	EntitlementType UsageType;
	bool VerifyOwnership;
}

class EntitlementQuery : Asset {
	EntitlementData[] EntitlementsData;
	string[] GroupNames;
	GamePlatform Platform;
	string EntitlementTag;
	string ProductId;
	string ProjectId;
}

enum EntitlementType {
	EntitlementType_Ignored = 0,
	EntitlementType_Write = 1,
	EntitlementType_Read = 2
}

class EntityBusData : DataBusData {
	EventConnection[] EventConnections;
	InterfaceDescriptorData Descriptor;
	bool NeedNetworkId;
	bool InterfaceHasConnections;
	bool AlwaysCreateEntityBusClient;
	bool AlwaysCreateEntityBusServer;
}

enum EntityCreatorType {
	EntityCreatorType_Unknown = 0,
	EntityCreatorType_Level = 1,
	EntityCreatorType_Spawner = 2,
	EntityCreatorType_Owner = 3,
	EntityCreatorType_Ghost = 4
}

class EntityData : GameObjectData {
}

enum EntityInitPass {
	EntityInitPass_Early = 0,
	EntityInitPass_Normal = 1,
	EntityInitPass_Count = 2
}

class EntityInteractionComponentData : ComponentData {
	float PickupRadius;
	float MaxAmmoPickupTimer;
	float MaxAmmoCrateTimer;
	InteractionTypesData InteractWithTypes;
	float MaxLookAtAngle;
	float SoldierInteractRadius;
	EntryInputActionEnum SoldierInteractInputAction;
	bool AllowInteractionWithSoldiers;
	bool OnlyAllowInteractionWithManDownSoldiers;
}

class EntityRecordingData : DataContainer {
	guid EntityGuid;
	PropertyRecordingData[] Data;
}

class EntitySettings : SystemSettings {
	uint32 OutOfEntityBusNetworkIdThreshold;
	ExecutionModeType ExecutionMode;
	bool SpawnSubLevelsFromLogic;
	bool EditorGameViewEnable;
}

class EntityTransformData : DataContainer {
	LinearTransform[] EntityTransforms;
}

struct EntityUid {
	uint32 Id;
}

enum EntityUpdateOrder {
	EntityUpdateOrder_Async = 1,
	EntityUpdateOrder_Sync = 2,
	EntityUpdateOrder_Both = 3
}

class EntityVoiceOverInfo : DataContainer {
	VoiceOverObject VoiceOverType;
	VoiceOverLabel[] Labels;
}

enum EntropyCodecType {
	EntropyCodecType_Arithmetic = 0
}

enum EntryClass {
	ecPrimary = 0,
	ecSecondary = 1
}

class EntryComponentData : ComponentData {
	Vec3 SoldierOffset;
	GameAIEntryData AIData;
	EntryClass EntryClass;
	EntryInputActionMapsData InputConceptDefinition;
	InputActionMappingsData InputMapping;
	InputCurveData[] InputCurves;
	EntryComponentHudData HudData;
	int32 EntryOrderNumber;
	float EnterImpulse;
	float EntryRadius;
	EntryInputActionEnum TriggerEventOnKey;
	EntrySpottingSettings EntrySpottingSettings;
	PoseConstraintsData PoseConstraints;
	float SoldierTransitionInvisbleTime;
	int32 NumberOfStances;
	EntryComponentSoundData EntryComponentSound;
	bool LockSoldierAimingToEntry;
	bool IsAllowedToExitInAir;
	bool Show1pSoldierInEntry;
	bool StancesEnabled;
	bool Show1pSoldierInEntryForPlayerOnly;
	bool HideSoldierForPassengers;
	bool Show3pSoldierWeaponInEntry;
	bool ShowSoldierGearInEntry;
	bool IsShielded;
	bool ForbiddenForHuman;
	bool ShowSoldierWeaponInEntry;
	bool ShowSoldierInEntry;
}

struct EntryComponentHudData {
	int32 Index;
	EntrySeatType SeatType;
	bool Frustum;
	bool Visible;
	bool MaximizeMiniMapOnEntry;
}

class EntryComponentSoundData : DataContainer {
	StanceSwitchSoundData[] StanceSounds;
	SoundAsset StanceSwitchSound;
}

enum EntryEnterRestriction {
	EntryEnterRestriction_NoRestriction = 0,
	EntryEnterRestriction_OnlyPrimaryEntry = 1
}

enum EntryInputActionEnum {
	EIAThrottle = 0,
	EIAStrafe = 1,
	EIABrake = 2,
	EIASwitchPrimaryInventory = 3,
	EIAYaw = 4,
	EIAPitch = 5,
	EIARoll = 6,
	EIAFire = 7,
	EIACameraPitch = 8,
	EIACameraYaw = 9,
	EIAFireCountermeasure = 10,
	EIAZoom = 11,
	EIAJump = 12,
	EIAChangePose = 13,
	EIAProne = 14,
	EIAReload = 15,
	EIASelectWeapon1 = 16,
	EIASelectWeapon2 = 17,
	EIASelectWeapon3 = 18,
	EIASelectWeapon4 = 19,
	EIASelectWeapon5 = 20,
	EIASelectWeapon6 = 21,
	EIASelectWeapon7 = 22,
	EIASelectWeapon8 = 23,
	EIASelectWeapon9 = 24,
	EIASwitchPrimaryWeapon = 25,
	EIAGrenadeLauncher = 26,
	EIAStaticGadget = 27,
	EIADynamicGadget1 = 28,
	EIADynamicGadget2 = 29,
	EIAMeleeAttack = 30,
	EIAThrowGrenade = 31,
	EIASprint = 32,
	EIACrawlSpeed = 33,
	EIACycleFireMode = 34,
	EIAInteract = 35,
	EIAToggleParachute = 36,
	EIACycleRadioChannel = 37,
	EIAToggleCamera = 38,
	EIAScoreboardMenu = 39,
	EIAGearUp = 40,
	EIAGearUpOrToggleWeaponLight = 40,
	EIAGearDown = 41,
	EIAGearDownOrExitSupportedShooting = 41,
	EIAClutch = 42,
	EIAHandBrake = 43,
	EIAGiveOrder = 44,
	EIABreathControl = 45,
	EIAMapZoom = 46,
	EIAChangeVehicle = 47,
	EIAChangeEntry = 48,
	EIAChangeEntry1 = 49,
	EIAChangeEntry2 = 50,
	EIAChangeEntry3 = 51,
	EIAChangeEntry4 = 52,
	EIAChangeEntry5 = 53,
	EIAChangeEntry6 = 54,
	EIAChangeEntry7 = 55,
	EIAChangeEntry8 = 56,
	EIAThreeDimensionalMap = 57,
	EIAShowCommoRose = 58,
	EIAShowLeaderCommoRose = 59,
	EIAQuicktimeInteractDrag = 60,
	EIAQuicktimeFire = 61,
	EIAQuicktimeBlock = 62,
	EIAQuicktimeFastMelee = 63,
	EIAQuicktimeJumpClimb = 64,
	EIAQuicktimeCrouchDuck = 65,
	EIAUndefined = 128,
	EIANoInput = 128
}

class EntryInputActionMapData : InputActionMapData {
}

class EntryInputActionMappingData : InputActionMappingData {
	EntryInputActionEnum ActionIdentifier;
	InputConceptIdentifiers ConceptIdentifier;
}

class EntryInputActionMapsData : Asset {
	int32 ActionMapSettingsScheme;
	InputActionMapSlot DefaultInputActionMap;
	EntryInputActionMapData[] InputActionMaps;
}

enum EntrySeatType {
	EST_Driver = 0,
	EST_Gunner = 1,
	EST_Passenger = 2
}

enum EntrySpottingSettings {
	ESSDefault = 0,
	ESSSendAndReceive = 1,
	ESSReceive = 2,
	ESSCount = 3
}

class EnvmapEntityData : EntityData {
}

class EqualizerSettings : DataContainer {
	float LowShelfFrequency;
	float LowShelfGain;
	float HighShelfFrequency;
	float HighShelfGain;
	float HpCutoffFrequency;
}

class EulerTransformEntityData : EntityData {
	Vec3 In1;
	Realm Realm;
	float In;
	ModifierEuler Euler;
}

class EulerTransformSplitterEntityData : EntityData {
	LinearTransform Transform;
	Realm Realm;
}

class EvaluatorData : EmitterComponentData {
	EmitterParameter EmitterParameter;
}

enum EvaluatorType {
	EtDefault = 0,
	EtBox = 1,
	EtPolynomial = 2,
	EtPolynomialOperator = 3,
	EtRandom = 4,
	EtRandomXYZ = 5,
	EtRotateVector = 6,
	EtSampleTexture = 7,
	EtSphere = 8,
	EtConstant = 9,
	EtPolynomialColorInterp = 10,
	EtCamProx = 11,
	EvaluatorTypeCount = 12
}

class EventAndGateEntityData : EntityData {
	Realm Realm;
	uint32 EventCount;
}

class EventCompareGateEntityData : EntityData {
	int32 Value;
	EventCompareGateType CompareType;
	Realm Realm;
}

enum EventCompareGateType {
	EventCompareGate_Equals = 0,
	EventCompareGate_NotEquals = 1,
	EventCompareGate_Less = 2,
	EventCompareGate_LessEquals = 3,
	EventCompareGate_Greater = 4,
	EventCompareGate_GreaterEquals = 5
}

struct EventConnection {
	DataContainer Source;
	DataContainer Target;
	EventSpec SourceEvent;
	EventSpec TargetEvent;
	EventConnectionTargetType TargetType;
}

enum EventConnectionTargetType {
	EventConnectionTargetType_Invalid = 0,
	EventConnectionTargetType_ClientAndServer = 1,
	EventConnectionTargetType_Client = 2,
	EventConnectionTargetType_Server = 3,
	EventConnectionTargetType_NetworkedClient = 4,
	EventConnectionTargetType_NetworkedClientAndServer = 5
}

class EventDebugNodeData : AudioGraphNodeData {
	DebugEventInput[] Events;
}

class EventGateEntityData : EntityData {
	Realm Realm;
	bool Default;
}

class EventGateNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Out;
	AudioGraphNodePort CoolDownTime;
	AudioGraphNodePort Enable;
}

enum EventGateState {
	EGSInvalid = 0,
	EGSUpright = 1,
	EGSCrouched = 2,
	EGSProne = 3,
	EGSZoomed = 4,
	EGSCount = 5
}

class EventIfSwitchEntityData : GameEntityData {
	bool RunOnce;
	bool StartState;
}

class EventMemoryEntityData : GameEntityData {
	Realm Realm;
}

class EventQueueEntityData : EntityData {
	Realm Realm;
}

struct EventScaleData {
	StatEvent Event;
	float Scale;
}

struct EventSpec {
	int32 Id;
}

class EventSplitterEntityData : EntityData {
	Realm Realm;
	bool RunOnce;
}

class EventSwitchEntityData : EntityData {
	Realm Realm;
	uint32 OutEvents;
	bool AutoIncrement;
}

class EventSwitcherEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort CaseTrigger;
	float Value;
}

class EventSwitcherNodeData : AudioGraphNodeData {
	EventSwitcherEntry[] Inputs;
	AudioGraphNodePort Value;
}

class EventSyncEntityData : EntityData {
}

class ExampleVehicleBlueprintBundleMetadata : BlueprintBundleMetadata {
	ExampleVehicleType ExampleVehicleType;
}

enum ExampleVehicleType {
	ExampleVehicleType_Small = 0,
	ExampleVehicleType_Medium = 1,
	ExampleVehicleType_Large = 2
}

enum ExecutionModeType {
	ExecutionMode_Play = 0,
	ExecutionMode_GameView = 1,
	ExecutionMode_PlayFromHere = 2
}

enum ExitToMenuReason {
	ExitToMenuReason_None = 0,
	ExitToMenuReason_UserDisconnected = 1,
	ExitToMenuReason_DisconnectedFromServer = 2,
	ExitToMenuReason_UnableToConnectToServer = 3,
	ExitToMenuReason_ClientDisconnected = 4,
	ExitToMenuReason_FirstPartyConnectionFailed = 5,
	ExitToMenuReason_MissingContent = 6,
	ExitToMenuReason_TeamKills = 7,
	ExitToMenuReason_KickedByAdmin = 8,
	ExitToMenuReason_Banned = 9,
	ExitToMenuReason_InteractivityTimeout = 10,
	ExitToMenuReason_KickedOutServerFull = 11,
	ExitToMenuReason_ESportsMatchStarting = 12,
	ExitToMenuReason_NotInESportsRosters = 13,
	ExitToMenuReason_ESportsMatchEnding = 14,
	ExitToMenuReason_VirtualServerExpired = 15,
	ExitToMenuReason_VirtualServerRecreate = 16,
	ExitToMenuReason_ESportsTeamFull = 17,
	ExitToMenuReason_ESportsMatchAborted = 18,
	ExitToMenuReason_ESportsMatchWalkover = 19,
	ExitToMenuReason_ESportsMatchWarmupTimedOut = 20,
	ExitToMenuReason_PremiumStatusMismatch = 21
}

enum ExpanderChannelMode {
	ExpanderChannelMode_Independent = 0,
	ExpanderChannelMode_Grouped = 1
}

class ExpanderNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Threshold;
	AudioGraphNodePort Ratio;
	AudioGraphNodePort AttackTime;
	AudioGraphNodePort ReleaseTime;
	AudioGraphNodePort Out;
	ExpanderChannelMode ChannelMode;
	SoundGraphPluginRef Plugin;
}

class ExplosionEntityData : GameEntityData {
	EffectBlueprint DetonationEffect;
	float BlastImpulse;
	MaskVolumeEntityData MaskVolume;
	DestructionMaskVolumeEntityData DestructionMaskVolume;
	MaterialContainerPair MaterialPair;
	DamageIndicationType DamageIndicationType;
	float EmpTime;
	float MaxOcclusionRaycastRadius;
	float InnerBlastRadius;
	float BlastDamage;
	float BlastRadius;
	float ShockwaveImpulse;
	float SpawnDelay;
	float ShockwaveDamage;
	float ShockwaveRadius;
	float CameraShockwaveRadius;
	float ShockwaveTime;
	bool DisableOcclusion;
	bool DisableStaticEntityOcclusion;
	bool UseEntityTransformForDetonationEffect;
	bool HasStunEffect;
	bool TriggerImpairedHearing;
	bool DetonateOnce;
	bool ShowOnMinimap;
}

class ExplosionPackEntityData : MeshProjectileEntityData {
	float TimeToLiveOnPlayerDeath;
	SoldierDetonationData SoldierDetonationData;
	float VehicleDetonationActivationDelay;
	float VehicleDetonationRadius;
	UIHudIcon Icon;
	float SpottedTime;
	float DefuseRadius;
	float Health;
	bool HasRemoteDetonator;
	bool IsDestructible;
	bool HasVehicleDetonation;
	bool ReceivesExplosionDamage;
}

class ExtendedConstraintsData : DataContainer {
	float Heading;
	float Width;
	float Falloff;
	float AngularConstraintMin;
	float AngularConstraintMax;
}

enum EyeVectorSpace {
	EyeVectorSpace_World = 0,
	EyeVectorSpace_Object = 1,
	EyeVectorSpace_Tangent = 2
}

struct FaceAnimationWaveMapping {
	int32 WaveNameHash;
	int32 AntEnumValue;
}

class FaceAnimationWaveMappings : DataContainer {
	AntRef AntAsset;
	AntRef OnStartedTalking;
	FaceAnimationWaveMapping[] Mappings;
}

class FaceposerComponentData : ComponentData {
	AntRef FacePoserEnabled;
	float LodDistance;
	AntRef FacePoseLibraryReference;
	AntRef[] FacePoseLibrary;
	string FacePoserDofSetName;
	string[] ShaderExposedValues;
	int32 FacePoseLibraryIndex;
}

enum FactionId {
	FactionNeutral = 0,
	FactionUS = 1,
	FactionRUS = 2,
	FactionMEC = 3,
	FactionIdCount = 4,
	FactionInvalid = 5
}

enum FadeCurveType {
	FadeCurveType_LinearAmplitude = 0,
	FadeCurveType_SineAmplitude = 1,
	FadeCurveType_LinearDecibel = 2
}

class FadeEntityData : EntityData {
	float FadeTime;
	float MaxWaitFadedWhileStreamingTime;
	bool FadeScreen;
	bool FadeUI;
	bool FadeRumble;
	bool FadeAudio;
	bool FadeMovie;
	bool StartFaded;
}

enum FaderType {
	FaderType_Linear = 0,
	FaderType_Cosine = 1
}

class FakeHingeData : FakePhysicsData {
	Vec3 Pivot;
	Vec3 RotationAxis;
	Vec3 ExtensionAxis;
	float MinAngle;
	float MaxAngle;
	float AngularDampening;
	float PullbackAcceleration;
	float ProgressiveExponent;
	float InertiaModifier;
}

class FakePhysicsData : DataContainer {
	FakePhysicsData ChildFakePhysics;
	float StartSpeed;
	float GravityModifier;
	float StartDampening;
	float EndDampening;
	float MinSpeed;
	float MaxSpeed;
	float Mass;
}

class FakeSpringData : FakePhysicsData {
	Vec3 Direction;
	float Length;
	float Acceleration;
	float ProgressiveExponent;
	float Damping;
}

class FallingStateData : CharacterStateData {
}

class FenceModelEntityData : StaticModelEntityData {
	float Width;
	float Angle;
}

enum FieldAccessType {
	FieldAccessType_Source = 0,
	FieldAccessType_Target = 1,
	FieldAccessType_SourceAndTarget = 2
}

class FilmGrainComponentData : ComponentData {
	Vec3 ColorScale;
	Vec2 TextureScale;
	Realm Realm;
	TextureAsset Texture;
	bool LinearFilteringEnable;
	bool RandomEnable;
	bool Enable;
}

struct FireEffectData {
	Vec3 Rotation;
	Vec3 Offset;
	Vec3 ZoomRotation;
	Vec3 ZoomOffset;
	EffectBlueprint Effect;
	bool UseZoomOffset;
	bool UseZoomRotation;
	bool DisableDuringZoom;
	bool UpdateTransform;
	bool StopLoopingEffects;
}

struct FireLogicData {
	HoldAndReleaseData HoldAndRelease;
	BoltActionData BoltAction;
	RecoilData Recoil;
	EntryInputActionEnum FireInputAction;
	EntryInputActionEnum ReloadInputAction;
	EntryInputActionEnum CycleFireModeInputAction;
	float TriggerPullWeight;
	float RateOfFire;
	float RateOfFireForBurst;
	float ClientFireRateMultiplier;
	float ReloadDelay;
	FireLogicType[] FireLogicTypeArray;
	float ReloadThreshold;
	float PreFireDelay;
	float ReloadTime;
	float ReloadTimeBulletsLeft;
	FireLogicType FireLogicType;
	ReloadLogic ReloadLogic;
	float AutomaticDelay;
	ReloadType ReloadType;
	bool HoldOffReloadUntilZoomRelease;
	bool ForceReloadActionOnFireTrigger;
	bool HoldOffReloadUntilFireRelease;
	bool AlwaysAutoReload;
}

enum FireLogicType {
	fltSingleFire = 0,
	fltSingleFireWithBoltAction = 1,
	fltAutomaticFire = 2,
	fltBurstFire = 3,
	fltHoldAndRelease = 4,
	fltDetonatedFiring = 5,
	fltCount = 6
}

struct FiringDispersionData {
	float MinAngle;
	float MaxAngle;
	float IncreasePerShot;
	float DecreasePerSecond;
}

class FiringFunctionData : GameDataContainer {
	FiringDispersionData[] Dispersion;
	SoldierWeaponDispersion WeaponDispersion;
	FireEffectData[] FireEffects1p;
	FireEffectData[] FireEffects3p;
	SoundAsset Sound;
	ShotConfigData Shot;
	FireLogicData FireLogic;
	AmmoConfigData Ammo;
	OverHeatData OverHeat;
	float SelfHealTimeWhenDeployed;
	float AmmoCrateReloadDelay;
	bool UnlimitedAmmoForAI;
	bool UsePrimaryAmmo;
}

class FirstPersonCameraData : DataContainer {
	Vec3 Offset;
	Vec3 WeaponBaseOffset;
	Vec3 WeaponLagRotationOffset;
	Vec3 Rotation;
	WeaponLagSpringEffectData WeaponSpringEffect;
	WeaponLagSpringEffectData CameraSpringEffect;
	float MoveStrafeModifier;
	float MoveForwardModifier;
	float RotateYawModifier;
	float RotatePitchModifier;
	float RotateRollModifier;
	float ZoomMoveStrafeModifier;
	float ZoomMoveForwardModifier;
	float ZoomRotateYawModifier;
	float ZoomRotatePitchModifier;
	float ZoomRotateRollModifier;
	float ReleaseModifier;
	float ReleaseModifierPitch;
	float ReleaseModifierYaw;
	float ReleaseModifierRoll;
	float OffsetReleaseModifier;
	float ZoomReleaseModifierPitch;
	float ZoomReleaseModifierYaw;
	float ZoomReleaseModifierRoll;
	float ZoomOffsetReleaseModifier;
	float RotationAdditionToOffset;
}

class FlagComponentData : ComponentData {
	Realm Realm;
	ObjectBlueprint Flag_Team1;
	ObjectBlueprint Flag_Team2;
}

class FlagCounterEntityData : GameEntityData {
	TeamId TeamId;
	float EnemyFlagProgress;
	float RoundTime;
	int32 ObjectiveFlagCount;
	bool VisibleInMinimap;
}

class FlapComponentData : PartComponentData {
	RotationAxisEnum RotationAxis;
	float RotationScale;
}

class FlareEntityData : GrenadeEntityData {
	float FlareRange;
}

class FlashlightWeaponData : WeaponData {
	float UpdateFrequency;
	float Range;
	float Angle;
}

class FlatOutputNodeData : OutputNodeData {
	float Angle;
	float ReverbGain;
	SoundBusData ReverbSend;
	AudioGraphNodePort CenterLevel;
	AudioGraphNodePort LfeLevel;
	SoundGraphPluginRef PanPlugin;
	SoundGraphPluginRef ReverbSendPlugin;
}

class FloatEntityData : EntityData {
	Realm Realm;
	float DefaultValue;
	float IncDecValue;
}

class FloatHubEntityData : EntityData {
	Realm Realm;
	int32 InputCount;
	int32 InputSelect;
}

struct FloatOption {
	string Name;
	float Value;
	float Min;
	float Max;
	float Step;
}

class FloatPhysicsData : DataContainer {
	float Density;
	float FilledDensity;
}

class FloatPropertyTrackData : SimplePropertyTrackData {
	float[] Values;
}

struct FloatRange {
	float Min;
	float Max;
}

struct FloatRangeDefaultZero {
	float Min;
	float Max;
}

class FloatRecordingData : PropertyRecordingData {
	float[] Values;
}

class FloatUnlockValuePair : UnlockValuePair {
	float DefaultValue;
	float UnlockedValue;
}

class FogComponentData : ComponentData {
	Vec4 Curve;
	Vec4 FogColorCurve;
	Vec3 FogColor;
	float FogColorStart;
	float FogDistanceMultiplier;
	Realm Realm;
	float End;
	float TransparencyFadeStart;
	float Start;
	float TransparencyFadeEnd;
	float FogColorEnd;
	float TransparencyFadeClamp;
	float HeightFogVisibilityRange;
	float HeightFogAltitude;
	float HeightFogDepth;
	float HeightFogFollowCamera;
	bool FogGradientEnable;
	bool Enable;
	bool HeightFogEnable;
	bool FogColorEnable;
}

class FogEffectState : DataContainer {
	Vec4 FogColorCurve;
	Vec4 Curve;
	Vec3 FogColor;
	float Start;
	float End;
	float FogColorStart;
	float FogColorEnd;
	float HeightFogVisibilityRange;
	float TransparencyFadeStart;
	float TransparencyFadeEnd;
	float TransparencyFadeClamp;
	float HeightFogDepth;
	float HeightFogFollowCamera;
	float HeightFogAltitude;
	bool HeightFogEnable;
	bool Enable;
}

class FollowAISoldierOrderEntityData : FollowPlayerOrderEntityData {
}

class FollowClosestHumanOrderEntityData : FollowPlayerOrderEntityData {
}

class FollowConstantData : Asset {
	float DistanceFromPlayerBeforeTeleport;
	float FollowHumanMaxDistance;
	float FollowHumanInCombatMaxDistance;
	float FollowAiMaxDistance;
	float FollowAiInCombatMaxDistance;
	float FollowMimicPoseDistance;
	float FollowInertia;
	float LookAwayAngle;
}

class FollowEnvelopeNodeData : AudioGraphNodeData {
	AudioGraphNodePort X;
	AudioGraphNodePort Y;
	float Base;
	float Scale;
	float Pivot;
}

class FollowPlayerOrderEntityData : BFOrderEntityData {
	FormationData Formation;
	bool CombatForbidden;
}

class FollowWaypointsEntityData : EntityData {
	RouteType TypeOfRoute;
	bool UsePathFinding;
	bool StartAtGeometricallyClosestWaypoint;
}

struct FootStepTrigger {
	float Time;
}

enum ForceCondition {
	FCNever = 0,
	FCNotCriticalDamaged = 1,
	FCCriticalDamaged = 2,
	FCNotOccupied = 3,
	FCOccupied = 4,
	FCAlways = 5
}

enum ForceMagnitudeInputType {
	FMITYaw = 0,
	FMITPitch = 1,
	FMITRoll = 2,
	FMITThrottle = 3
}

enum ForceType {
	FTForce = 0,
	FTTorque = 1
}

class FormationData : GameDataContainer {
	Vec3[] Positions;
	string Name;
}

class FormationHolder : Asset {
	FormationData[] Formations;
}

class FPSCameraData : TargetCameraData {
	TurnEffectData TurnEffectSettings;
	BlurEffectData BlurEffectSettings;
	float FOV;
}

class FramerateHistogramPerformanceEvent : MetricEvent {
	float SpikeAverage;
	float Below5;
	float Below10;
	float Below15;
	float Below20;
	float Below25;
	float Below30;
	float Below60;
	float Above60;
	guid PerformanceLink;
}

enum FrequencyShiftSsbFilter {
	FrequencyShiftSsbFilter_None = 0,
	FrequencyShiftSsbFilter_Fir64 = 1
}

class FrequencyShiftSsbNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Out;
	FrequencyShiftSsbFilter Filter;
	SoundGraphPluginRef Plugin;
}

struct FrictionScaleAtVelocity {
	float FrictionScale;
	float Velocity;
}

class FriendlyFireEntityData : EntityData {
	TeamId[] Teams;
	float EnemyCommitmentAllocation;
	float FriendlyCommitmentAllocation;
	float MaxCommitment;
	float FailureThreshold;
	float DecayRate;
}

class FriendZoneDebugRenderEntityData : EntityData {
	Realm Realm;
}

class FriendZoneEntityData : EntityData {
	int32 EnemyWeight;
	int32 FriendlyWeight;
	int32 CorpsTimeout;
	int32 CorpsWeight;
	bool CountCorpsesForAllTeams;
	bool InitialZoneRandomized;
}

class FrontEndComponentData : UIComponentData {
}

enum GainFaderFadeType {
	GainFaderFadeType_LinearAmplitude = 0,
	GainFaderFadeType_LinearPower = 1,
	GainFaderFadeType_SineAmplitude = 2
}

class GainFaderNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Start;
	AudioGraphNodePort StartTime;
	AudioGraphNodePort FadeTime;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Out;
	GainFaderFadeType FadeType;
	SoundGraphPluginRef Plugin;
}

class GainNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class GameAIDifficultyData : DataContainer {
}

class GameAIEntryData : Asset {
}

class GameAISystem : Asset {
}

class GameAIWeaponData : Asset {
}

class GameAnimationConfig : Asset {
	bool ServerEnable;
	bool ClientEnable;
	bool UseRawGamepadInput;
}

class GameAnimationSettings : SystemSettings {
	float TemporalLoddingFourthDeltaTime;
	string[] AntOnClientOnlyGamemodes;
	float TemporalLoddingFarDistance;
	float TemporalLoddingSixthDeltaTime;
	float TemporalLoddingFifthDeltaTime;
	float TemporalLoddingFirstDeltaTime;
	float TemporalLoddingSecondDeltaTime;
	float TemporalLoddingThirdDeltaTime;
	float TemporalLoddingSixthDistance;
	float TemporalLoddingSecondDistance;
	float TemporalLoddingFifthDistance;
	float TemporalLoddingFirstDistance;
	float TemporalLoddingThirdDistance;
	float TemporalLoddingFourthDistance;
	bool ServerEnable;
	bool UseRawGamepadInput;
	bool ClientEnable;
	bool UseAnimationDrivenCharacter;
}

class GameBehaviourTemplateData : Asset {
}

class GameDataContainer : DataContainer {
}

class GameDataContainerAsset : Asset {
	GameDataContainer Data;
}

class GameEntityData : SpatialEntityData {
	GameObjectData[] Components;
	bool Enabled;
	int8 RuntimeComponentCount;
}

class GameInteractionEntityData : InteractionEntityData {
	BlinkType Blink;
	float CapturepointVerticalOffset;
	float DelayBetweenUses;
	TeamId TeamId;
	EntryInputActionEnum InputAction;
	float HoldToInteractTime;
	InteractionEntityType InteractionEntityType;
	string InteractionSid;
	string InteractingSid;
	string FriendlyTextSid;
	string NameSid;
	float InteractionVerticalOffset;
	string EnemyTextSid;
	bool ShrinkSnap;
	bool ShowAsCapturePoint;
}

class GameModeConfiguration : Asset {
	GameModeInformation[] Information;
}

struct GameModeInformation {
	GamePlatform Platform;
	GameModeSize[] Sizes;
	GameModeSize DefaultSize;
	bool AllowFallbackToDefault;
}

class GameModeSettings : SystemSettings {
	GameModeInformation[] Information;
}

struct GameModeSize {
	string Name;
	string ShortName;
	string MetaIdentifier;
	uint32 PlayerCount;
	GameModeTeamSize[] Teams;
	uint32 RoundsPerMap;
	bool ForceSquad;
}

struct GameModeTeamSize {
	uint32 PlayerCount;
	uint32 SquadSize;
}

struct GameModeVariation {
	string Identifier;
	string Name;
}

class GameObjectData : GameDataContainer {
	uint16 IndexInBlueprint;
	int8 IsEventConnectionTarget;
	int8 IsPropertyConnectionTarget;
}

enum GameOverResult {
	GameOver_MajorDefeat = 1,
	GameOver_Defeat = 2,
	GameOver_MinorDefeat = 3,
	GameOver_MajorVictory = 4,
	GameOver_Victory = 5,
	GameOver_MinorVictory = 6,
	GameOver_Draw = 7
}

class GamePhysicsEntityData : GameEntityData {
	PhysicsEntityData PhysicsData;
}

enum GamePlatform {
	GamePlatform_Ps3 = 0,
	GamePlatform_Win32 = 1,
	GamePlatform_Xenon = 2,
	GamePlatform_Any = 3,
	GamePlatform_Invalid = 4,
	GamePlatform_Count = 5
}

struct GameplayBone {
	string Name;
	GameplayBones Bone;
}

enum GameplayBones {
	GameplayBones_UndefinedBone = 0,
	GameplayBones_HeadBone = 1,
	GameplayBones_AimBone = 2,
	GameplayBones_RootBone = 3,
	GameplayBones_WeaponBone = 4,
	GameplayBones_ConnectBone = 5,
	GameplayBones_RootMeshBone = 6,
	GameplayBones_MagazineBone = 7,
	GameplayBones_Count = 8
}

class GameRenderSettings : DataContainer {
	float StereoCrosshairDampingFactor;
	uint32 InactiveSkipFrameCount;
	float ForceOrthoViewSize;
	float StereoCrosshairRadius;
	float StereoCrosshairMaxHitDepth;
	float ForceBlurAmount;
	uint32 DrawFpsMethod;
	float ForceFov;
	float FovMultiplier;
	float StaticModelPartOcclusionMaxScreenArea;
	uint32 StaticModelCullJobCount;
	float EdgeModelLodScale;
	float EdgeModelScreenAreaScale;
	uint32 XenonRingBufferSize;
	uint32 SplitScreenTestViewCount;
	uint32 XenonPresentImmediateThreshold;
	uint32 XenonGammaRampType;
	uint32 Ps3VSyncMethod;
	float Ps3VideoGamma;
	uint32 Ps3FrameMainBufferSize;
	uint32 Ps3FrameLocalBufferSize;
	float ViewDistance;
	float CameraCutMaxFrameTranslation;
	float NearPlane;
	float ForceWorldFadeAmount;
	uint32 EdgeModelMaxVisibleInstanceCount;
	int32 EdgeModelForceLod;
	float EdgeModelViewDistance;
	bool Ps3LinearFrameCmdBufEnable;
	bool XenonRes1280x704Enable;
	bool PerfOverlayEnable;
	bool GcmHudEnable;
	bool MovieVSyncEnable;
	bool Ps3Res1280x704Enable;
	bool InitialClearEnable;
	bool GpuProfilerEnable;
	bool Ps3CellMemoryTexturesEnable;
	bool XenonBufferTwoFramesEnable;
	bool DrawFpsHistogram;
	bool Fullscreen;
	bool PerfOverlayLatestFrameTimeEnable;
	bool JobEnable;
	bool PerfOverlayVisible;
	bool EmittersEnable;
	bool EdgeModelsEnable;
	bool EdgeModelCastShadowsEnable;
	bool EdgeModelDepthBiasEnable;
	bool EdgeModelShadowDepthBiasEnable;
	bool VSyncFlashTestEnable;
	bool EntityRenderEnable;
	bool EdgeModelSpuInstancingEnable;
	bool EdgeModelUseMainLodEnable;
	bool DebugRenderServiceEnable;
	bool EdgeModelUseLodBox;
	bool DebugRendererEnable;
	bool ForceVSyncEnable;
	bool EdgeModelCullEnable;
	bool EdgeModelFrustumCullEnable;
	bool EdgeModelOcclusionCullEnable;
	bool EdgeModelAdditionalCullEnable;
	bool EdgeModelDrawBoxes;
	bool EdgeModelDrawStats;
	bool StaticModelEnable;
	bool StaticModelMeshesEnable;
	bool StaticModelZPassEnable;
	bool StaticModelPartCullEnable;
	bool StaticModelPartFrustumCullEnable;
	bool StaticModelPartOcclusionCullEnable;
	bool StaticModelPartShadowCullEnable;
	bool StaticModelDrawBoxes;
	bool StaticModelDrawStats;
	bool DrawScreenInfo;
	bool ForceOrthoViewEnable;
	bool StaticModelCullSpuJobEnable;
	bool LockView;
	bool ResetLockedView;
	bool DrawInfo;
	bool FadeEnable;
	bool FadeWaitingEnable;
	bool DrawFps;
	bool DestructionVolumeDrawEnable;
	bool BlurEnable;
	bool BuildJobSyncEnable;
	bool ForceSquareOrthoView;
	bool Enable;
}

class GameSensingTemplateData : Asset {
}

class GameSettings : SystemSettings {
	uint32 MaxPlayerCount;
	uint32 MaxSpectatorCount;
	SubWorldInclusion LayerInclusionTable;
	LogFileCollisionMode LogFileCollisionMode;
	uint32 LogFileRotationHistoryLength;
	string Level;
	string DefaultLayerInclusion;
	InputConfigurationAsset[] InputConfiguration;
	TeamId DefaultTeamId;
	float LevelWarmUpTime;
	float TimeToWaitForQuitTaskCompletion;
	GamePlatform Platform;
	VersionData Version;
	uint32 PS3ContentRatingAge;
	int32 DifficultyIndex;
	float TimeBeforeSpawnIsAllowed;
	SoldierWeaponSwitchingData SoldierWeaponSwitching;
	uint32 LogHistory;
	DifficultyDatas DifficultySettings;
	BlueprintBundleMetadataContainer[] MetadataContainers;
	SKU CurrentSKU;
	PlayerData Player;
	bool LogFileEnable;
	bool RotateLogs;
	bool EnableLoadingProfile;
	bool AdjustVehicleCenterOfMass;
	bool AutoAimEnabled;
	bool HasUnlimitedAmmo;
	bool HasUnlimitedMags;
	bool ResourceRefreshAlwaysAllowed;
	bool UseSpeedBasedDetailedCollision;
	bool AimAssistEnabled;
	bool AimAssistUsePolynomials;
	bool ForceFreeStreaming;
	bool ForceDisableFreeStreaming;
	bool IsGodMode;
	bool IsJesusMode;
	bool IsJesusModeAi;
	bool UseSingleWeaponSelector;
	bool GameAdministrationEnabled;
	bool AllowDestructionOutsideCombatArea;
}

class GameSoundEntityData : GameEntityData {
	SoundAsset Sound;
	bool PlayOnCreation;
}

class GameSplineData : CustomSplineData {
	GameSplineType SplineType;
}

class GameSplineEntityData : GameEntityData {
	GameSplineType SplineType;
	Vec3[] LocalPoints;
	Vec3[] Normals;
}

enum GameSplineType {
	GameSplineType_Generic = 0,
	GameSplineType_Pipe = 1,
	GameSplineType_Zipline = 2,
	GameSplineType_Swing = 3
}

class GameTimeSettings : SystemSettings {
	float VSyncSubtractTime;
	float JoinJobsTimeLimit;
	float YieldTimeLimit;
	int32 YieldTime;
	float MaxInactiveVariableFps;
	float MaxSimFps;
	float MaxVariableFps;
	int32 ClampTicks;
	float ForceDeltaTime;
	int32 ForceDeltaTickCount;
	float TimeScale;
	bool UseWaitableTimers;
	bool ForceUseSleepTimer;
	bool ForceSinglePlayerFixedTick;
	bool ForceMultiplayerOneTickMin;
	bool VariableSimTickTimeEnable;
}

class GameTipAsset : Asset {
	GameTipData[] Tips;
}

struct GameTipData {
	string Text;
}

class GearBagSpec : Asset {
	uint32 MaxPrimaryWeapons;
	uint32 MaxSecondaryWeapons;
	uint32 MaxSidearms;
	uint32 MaxGadgetsPerSlot;
	uint32 GadgetSlots;
	GearBagSpec[] ChildSpecs;
}

class GearboxConfigData : DataContainer {
	float[] ForwardGearRatios;
	float[] ForwardGearSpeeds;
	float[] ReverseGearRatios;
	float[] ReverseGearSpeeds;
	int32 GearboxType;
	int32 GearboxMode;
	float GearChangeTime;
	float GearDownSpeedFactor;
	float OppositeDirGearChangeMaxSpeed;
	float OppositeDirGearChangeTime;
	float ClutchSpeedFactor;
	float TransmissionEfficiency;
	float BackwardThrottleLimit;
	bool UseClassicGearBoxAutoClutch;
	bool UseNeutralGear;
	bool LimitBackwardThrottle;
	bool UseAutoClutch;
}

enum GearSlot {
	GearSlot_Melee = 0,
	GearSlot_Sidearm = 1,
	GearSlot_Primary = 2,
	GearSlot_Auxiliary = 3,
	GearSlot_Secondary = 4,
	GearSlot_Gadget1 = 5,
	GearSlot_Gadget2 = 6,
	GearSlot_Gadget3 = 7,
	GearSlot_Gadget4 = 8,
	GearSlot_Gadget5 = 9,
	GearSlot_Gadget6 = 10,
	GearSlot_Gadget7 = 11,
	GearSlot_GearSlotCount = 12,
	GearSlot_NotEquipped = 13
}

class GeographicalData : DataContainer {
	UIGeoLatitude Latitude;
	UIGeoLongitude Longitude;
	float SeaLevelOffset;
}

class GeographicalLevelDescriptionComponent : LevelDescriptionComponent {
	GeographicalData GeographicalData;
}

class GeometryTriggerEntityData : AreaTriggerEntityData {
}

class GlobalNode : UINodeData {
	UINodePort[] Outputs;
}

class GlobalPostProcessSettings : DataContainer {
	Vec3 Brightness;
	Vec3 ForceBloomScale;
	Vec4 ForceVignetteColor;
	Vec3 Contrast;
	Vec3 Saturation;
	Vec2 FilmGrainTextureScale;
	Vec2 ForceVignetteScale;
	Vec3 FilmGrainColorScale;
	uint32 Ps3EdgeMlaaJobPriority;
	uint32 BloomBlurIterationCount;
	uint32 DebugModeStep;
	BlurFilter BloomBlurFilter;
	float LdrBloomRange;
	PostProcessDebugMode DebugMode;
	float UserBrightnessMin;
	float UIBrightnessNorm;
	uint32 Ps3EdgeMlaaJobCount;
	uint32 Ps3EdgeMlaaAbsoluteThreshold;
	uint32 BloomPyramidLevelCount;
	uint32 BloomPyramidFinalLevel;
	float UserBrightnessMax;
	float UserBrightnessMulScale;
	float UserBrightnessAddScale;
	uint32 DownsampleAverageStartMipmap;
	uint32 Ps3EdgeMlaaThresholdFactor;
	uint32 Ps3EdgeMlaaThresholdBase;
	uint32 Ps3TiledLdrMipmapCount;
	uint32 Ps3TiledFloatMipmapCount;
	uint32 Ps3TiledBloomMipmapCount;
	BlurFilter HbaoGaussianBlurSize;
	float ForceExposure;
	float ForceBlurAdd;
	int32 ForceDofEnable;
	float ForceDofFocusDistance;
	float ForceDofNearDistanceScale;
	float ForceDofFarDistanceScale;
	float ForceDofScale;
	float ForceDofBlurFilterDeviation;
	uint32 HbaoTemporalFilterMaxNumFrames;
	int32 HbaoForceVendor;
	float ForceVignetteExponent;
	float HbaoTemporalFilterThreshold;
	int32 ForceTonemapMethod;
	float LUTGammaR;
	float LUTGammaG;
	float HbaoTemporalFilterThreshold2;
	int32 ForceChromostereopsisEnable;
	int32 ForceChromostereopsisOffset;
	float ForceChromostereopsisScale;
	uint32 HbaoBilateralBlurRadius;
	float ForceMiddleGray;
	float LUTGammaB;
	float LUTGammaCurbOffset;
	float HbaoBilateralBlurSharpness;
	uint32 HbaoRandomTextureWidth;
	float LensScopeFilterColorScale;
	float HbaoStepCount;
	float HbaoMaxFootprintRadius;
	float HbaoDirCount;
	float Hue;
	uint32 HbaoQuality;
	uint32 HbaoRandomDirVariationCount;
	float ForceDiffusionDofPlaneInFocus;
	float DiffusionDofLuminance;
	uint32 HbaoTemporalFilterDebugMode;
	float ForceDiffusionDofAperture;
	float ForceDiffusionDofFocalLength;
	DynamicAOMethod DynamicAOMethod;
	bool DrawDebugInfo;
	bool ColorGradingForceUpdateAlways;
	bool BloomBlurEnable;
	bool HdrBlurEnable;
	bool BlurBlendEnable;
	bool DownsampleAverageFromBloomEnable;
	bool FilmGrainEnable;
	bool Ldr16BitBloomEnable;
	bool DynamicAOEnable;
	bool DiffusionDofEnable;
	bool HbaoHalfResEnable;
	bool HbaoHalfResDepthEnable;
	bool HbaoVectorizedEnable;
	bool Ps3CompressedRenderTargetsEnable;
	bool HdrBloomEnable;
	bool FilmGrainRandomEnable;
	bool DirectExposureEnable;
	bool ExposureClampEnable;
	bool FilmGrainLinearFilteringEnable;
	bool HbaoBilateralBlurEnable;
	bool ColorGradingEnable;
	bool ColorTransformEnable;
	bool HbaoBilateralBlurCsEnable;
	bool HbaoTemporalFilterEnable;
	bool QuarterDownsamplingEnable;
	bool DrawDebugUserBrightnessLUT;
	bool BloomPyramidAttenuateEnable;
	bool DownsampleBeforeBlurEnable;
	bool HbaoGaussianBlurEnable;
	bool HbaoGaussianBlurHalfResEnable;
	bool BloomPyramidEnable;
	bool UserBrightnessLUTEnable;
	bool Ps3EdgeMlaaEnable;
	bool Ps3EdgeMlaaCopyOnly;
	bool Ps3EdgeMlaaShowEdges;
	bool Ps3EdgeMlaaRelativeEdgeDetection;
	bool Ps3EdgeMlaaGpuBlockEnable;
	bool Ps3BackBufferAsLdrTargetEnable;
	bool DownsampleLogAverageEnable;
	bool BloomQuarterResEnable;
	bool BloomEnable;
	bool LensScopeFilterEnable;
}

class GravityData : ProcessorData {
	float Gravity;
}

class GrenadeEntityData : MeshProjectileEntityData {
	float CollisionSpeedMultiplier;
	float Gravity;
	GrenadeType GrenadeType;
	float MinBounceSpeed;
}

enum GrenadeType {
	GrenadeType_NotSet = 0,
	GrenadeType_Frag = 1,
	GrenadeType_Smoke = 2,
	GrenadeType_Flash = 3
}

struct GroundHeightData {
	Vec2 HeightSpan;
	float WorldSize;
	uint16[] Data;
}

class GroundHeightEntityData : SpatialEntityData {
	GroundHeightData Data;
}

class GroupHavokAsset : HavokAsset {
	AssetAabbs[] Aabb;
	uint16[] ExternalAssetScaleIndex;
}

class GunMasterKillCounterEntityData : EntityData {
	GunMasterWeaponsPreset[] WeaponsPreset;
}

struct GunMasterLevelInfo {
	CustomizeSoldierData CustomizeData;
	int32 KillsNeeded;
}

enum GunMasterNotificationType {
	GunMasterNotificationType_LevelUp = 0,
	GunMasterNotificationType_Demoted = 1,
	GunMasterNotificationType_ReachedLevel = 2,
	GunMasterNotificationType_TookLead = 3,
	GunMasterNotificationType_LostLead = 4
}

struct GunMasterWeaponsPreset {
	GunMasterLevelInfo[] GunMasterLevelInfos;
	CustomizeSoldierData[] LevelOverrides;
}

class GunnerSpottingTrackerData : HudTrackerData {
	UIHudIcon SpottedInfantryIcon;
	UIHudIcon SpottedVehicleIcon;
}

struct GunSwayBaseData {
	GunSwayDispersionData BaseValue;
	GunSwayRecoilData Recoil;
	GunSwayLagData GunSwayLag;
}

struct GunSwayBaseMoveData {
	GunSwayDispersionData BaseValue;
	GunSwayDispersionData Moving;
	GunSwayRecoilData Recoil;
	GunSwayLagData GunSwayLag;
}

struct GunSwayBaseMoveJumpData {
	GunSwayDispersionData BaseValue;
	GunSwayDispersionData Moving;
	GunSwayDispersionData Jumping;
	GunSwayDispersionData Sprinting;
	GunSwayDispersionData VaultingSmallObject;
	GunSwayDispersionData VaultingMediumObject;
	GunSwayRecoilData Recoil;
	GunSwayLagData GunSwayLag;
}

struct GunSwayCrouchProneData {
	GunSwayBaseMoveData NoZoom;
	GunSwayBaseMoveData Zoom;
}

class GunSwayData : WeaponSwayData {
	GunSwayStandData Stand;
	GunSwayCrouchProneData Crouch;
	GunSwayCrouchProneData Prone;
	GunSwayStanceTransition ProneToCrouch;
	GunSwayStanceTransition ProneToStand;
	GunSwayStanceTransition CrouchToProne;
	GunSwayStanceTransition CrouchToStand;
	GunSwayStanceTransition StandToProne;
	GunSwayStanceTransition StandToCrouch;
	GunSwayStanceZoomModifierData SuppressionModifierUnzoomed;
	GunSwayStanceZoomModifierData SuppressionModifierZoomed;
	GunSwayModifierData[] Modifiers;
	float DeviationScaleFactorZoom;
	float GameplayDeviationScaleFactorZoom;
	float DeviationScaleFactorNoZoom;
	float GameplayDeviationScaleFactorNoZoom;
	float ShootingRecoilDecreaseScale;
	float FirstShotRecoilMultiplier;
	CameraRecoilData CameraRecoil;
}

struct GunSwayDispersionData {
	float MinAngle;
	float MaxAngle;
	float IncreasePerShot;
	float DecreasePerSecond;
}

struct GunSwayDispersionModData {
	float MinAngleModifier;
	float MaxAngleModifier;
	float IncreasePerShotModifier;
	float DecreasePerSecondModifier;
}

struct GunSwayLagData {
	float MoveStrafeModifier;
	float MoveForwardModifier;
	float RotateYawModifier;
	float RotatePitchModifier;
	float ReleaseModifier;
}

class GunSwayModifierData : Asset {
	UnlockAssetBase UnlockAsset;
	GunSwayStanceZoomModifierData StandZoomModifier;
	GunSwayStanceZoomModifierData StandNoZoomModifier;
	GunSwayStanceZoomModifierData CrouchZoomModifier;
	GunSwayStanceZoomModifierData CrouchNoZoomModifier;
	GunSwayStanceZoomModifierData ProneZoomModifier;
	GunSwayStanceZoomModifierData ProneNoZoomModifier;
	bool OnlyInSupportedShooting;
	bool OnlyOnWeaponLightEnabled;
}

struct GunSwayRecoilData {
	float RecoilAmplitudeMax;
	float RecoilAmplitudeIncPerShot;
	float HorizontalRecoilAmplitudeIncPerShotMin;
	float HorizontalRecoilAmplitudeIncPerShotMax;
	float HorizontalRecoilAmplitudeMax;
	float RecoilAmplitudeDecreaseFactor;
}

struct GunSwayStanceTransition {
	GunSwayDispersionData MaxPenaltyValue;
	float CoolDown;
}

struct GunSwayStanceZoomModifierData {
	GunSwayDispersionModData DispersionMod;
	float RecoilMagnitudeMod;
	float RecoilAngleMod;
	float LagYawMod;
	float LagPitchMod;
}

struct GunSwayStandData {
	GunSwayBaseMoveJumpData NoZoom;
	GunSwayBaseMoveJumpData Zoom;
}

enum HardwareProfile {
	Hardware_Autodetect = 0,
	Hardware_LowEnd = 1,
	Hardware_Medium = 2,
	Hardware_HighEnd = 3,
	Hardware_Maximum = 4
}

class HavokAsset : Asset {
	float Scale;
	DataContainer[] ExternalAssets;
}

class HdrSetting : DataContainer {
	float WindowMinTop;
	float WindowMinBottom;
	float WindowTopMinReleaseTime;
	float WindowTopMaxReleaseTime;
	float WindowTopAttackTime;
	float WindowBottomReleaseTime;
	AudioCurve WindowTopReleaseTimeCurve;
	float DischargeFactor;
	float MaxAllowedEnergy;
	float WindowBottomAttackTime;
	float WindowSize;
	float CompressFactor;
	float Headroom;
	float AllowedOvershoot;
}

struct HealerData {
	float Radius;
	float Health;
	float HealingTime;
	float PickUpDelay;
}

struct HealingSphereData {
	float Radius;
	float HealthIncSpeed;
}

class HealthComponentData : ComponentData {
	float Health;
	MaterialContainerPair MaterialPair;
}

class HealthStateData : DataContainer {
	GameObjectData[] Objects;
	NetworkableLoosePartPhysicsData[] LoosePartPhysics;
	ObjectBlueprint SpawnedBangerBlueprint;
	BangerSpawnImpulseParams SpawnedBangerImpulseParams;
	float Health;
	uint32 PartIndex;
	bool PhysicsEnabled;
	bool CopyDamageToBanger;
	bool CanSupportOtherParts;
}

class HeightfieldRasterData : RasterQuadtreeData {
}

class HeightfieldTreeAsset : RasterTreeAsset {
	float MinHeightWidth;
	int32 MinHeightSamplesPerSide;
}

struct HidableSoldierMeshWeaponPart {
	SkinnedMeshAsset WeaponMesh;
	ObjectBlueprint WeaponMeshBlueprint;
	string BoneName;
	bool HideAlways;
	bool HideInVehicleEntries;
}

class HighPassButterworthNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Order;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class HighPassFir64NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class HighPassIir2NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class HighShelfIir2NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

struct HIKData {
	float ReachT;
	float ReachR;
	float Pull;
	float Resist;
}

struct HitReactionComponentBinding {
	AntRef Hit;
	AntRef AllowKillFromAnimation;
	AntRef Direction;
	AntRef FiringDistance;
	AntRef BoneType;
	AntRef ImpactType;
	AntRef Immortal;
	AntRef RandomAnimationIndex;
}

class HitReactionComponentData : ComponentData {
	HitReactionComponentBinding HitReactionBinding;
	bool Enabled;
}

enum HitReactionType {
	HRT_Body = 0,
	HRT_Head = 1,
	HRT_RightArm = 2,
	HRT_LeftArm = 3,
	HRT_RightLeg = 4,
	HRT_LeftLeg = 5,
	HRT_Count = 6
}

struct HoldAndReleaseData {
	float MaxHoldTime;
	float MinPowerModifier;
	float MaxPowerModifier;
	float PowerIncreasePerSecond;
	float Delay;
	float KilledHoldingPowerModifier;
	bool ForceFireWhenKilledHolding;
}

class HoldGroundOrderEntityData : BFOrderEntityData {
}

class HovercraftFloatPhysicsData : HullFloatPhysicsData {
	Vec3 LandResistanceAxisMod;
	Vec3 LandFrictionAxisMod;
	float FrontLength;
	float SideLength;
}

class HudCameraShakeData : UIComponentData {
	float WeaponDispersionMin;
	float WeaponDispersionMax;
	float WeaponDispersionOffsetScale;
	float JumpEffectDurationMin;
	float JumpEffectDurationMax;
	float JumpEffectMin;
	float JumpEffectMax;
	float LandEffectDurationMin;
	float LandEffectDurationMax;
	float LandEffectMin;
	float LandEffectMax;
	float CameraShakeMinAngle;
	float CameraShakeMaxAngle;
	float CameraShakeScale;
	float WeaponLagXScale;
	float WeaponLagYScale;
	uint32 FilterSize;
	float MaxDisplacement;
}

class HudCapturePointTrackerData : HudTrackerData {
}

class HudConfigAsset : Asset {
}

struct HudData {
	float CrosshairScaleMin;
	float CrosshairScaleMax;
	float CrosshairOpacityMin;
	float CrosshairOpacityMax;
	float CrosshairOpacityModifier;
	string CrosshairTypeId;
	string WeaponClass;
	float CameraShakeModifier;
	float SeaLevelAltFreq;
	float LowAmmoWarning;
	float ReloadPrompt;
	int32 RenderTargetIndex;
	UIPartPropertyList HudPropertyList;
	bool ShowMinimap;
	bool InfiniteAmmo;
	bool HideCrosshairWhenAimOnFriend;
	bool HideAmmo;
	bool UseRangeMeter;
	bool UsePredictedSight;
	bool UseWeaponOrientations;
	bool UseVelocityVectorMarker;
	bool UseLockingController;
	bool UseThrust;
	bool UseGForce;
	bool UseSkidSlip;
	bool UseClimbRate;
	bool UseAimWarning;
	bool UseRenderTarget;
}

class HudEntityData : GameEntityData {
}

struct HudImpactData {
	float MaxHealth;
	float MinHealth;
	float MaxTimeVisible;
	float MinTimeVisible;
	bool Enable;
}

class HudProgressbarData : UIPartData {
	ProgressType ProgressType;
}

enum HudTextReceiver {
	HudTextReceiver_Team = 0,
	HudTextReceiver_Squad = 1,
	HudTextReceiver_All = 2,
	HudTextReceiver_Count = 3
}

class HudTrackerData : UIPartData {
	float MaxDistance;
	float StartFadeDistance;
	float SecondFadeDistance;
	float FadeMinAlpha;
	float IconSize;
	float TrackerHudRadiusX;
	float TrackerHudRadiusY;
	float DistanceTextOffsetY;
	bool ShowDistance;
	bool DisplayExtraInfo;
}

class HudVehicleTrackerData : UIPartData {
	EdgePointerData EdgePointer;
	UIHudIcon EnemyTrackerIcon;
	UIHudIcon OutsideScreenTrackerIcon;
	VehicleTrackerRenderTargetData RenderTargetData;
	UIHudIcon MissileTrackerIcon;
	float IconSize;
	float RadarSensitivity;
	float HeatSensitivity;
	UIHudIcon FriendlyTrackerIcon;
	UIHudIcon LaserPaintedVehicleTrackerIcon;
	float MaxDistance;
	float DistanceIconShrinkFactor;
	UIHudIcon MissileLockTrackerIcon;
	bool TrackOnlyUsedVehicles;
	bool UseTrackerSignatures;
	bool EnableEdgePointers;
	bool TrackLaserPaintedObjects;
	bool UseCameraComponentTransform;
	bool ShowTracker;
}

class HullFloatPhysicsData : FloatPhysicsData {
	Vec3 WaterResistanceAxisMod;
	Vec3 WaterFrictionAxisMod;
	Vec3 Offset;
	int32 SubSurfaceSplits;
	float Depth;
	float Width;
	float Length;
	float FrontCurveDegree;
	float SideCurveDegree;
	float NonEngineSteer;
	float NonEngineSteerMinSpeed;
	float NonEngineSteerMaxSpeed;
	float WaterDampeningMod;
	float LiftModifier;
	float SupportSizeMod;
	float AngularDampening;
	float FrictionThrottleModifier;
}

class HumanPlayerEntityData : GameEntityData {
	float PlayerKilledDelay;
	string LastManStandingSid;
	float DisplayTime;
}

class IKComponentData : ComponentData {
	IKEffectorEnum IKEffector;
	HIKData IKData;
}

enum IKEffectorEnum {
	IKLeftHand = 0,
	IKRightHand = 1
}

class ImpulseResponseAsset : SoundDataAsset {
}

class InAirStateData : CharacterStateData {
	float FreeFallVelocity;
}

enum IndexBufferFormat {
	IndexBufferFormat_16Bit = 0,
	IndexBufferFormat_32Bit = 1
}

enum IndexInBlueprint {
	IndexInBlueprint_HighestIndex = 65534,
	IndexInBlueprint_Unknown = 65535
}

struct IndexRange {
	uint32 First;
	uint32 Last;
}

class InputActionData : DataContainer {
	bool IsAnalog;
	bool NegateValue;
}

class InputActionMapData : DataContainer {
	InputActionsData[] Actions;
	InputActionMapPlatform PlatformSpecific;
	InputActionMapSlot Slot;
	string CopyKeyBindingsFrom;
}

class InputActionMappingData : DataContainer {
}

class InputActionMappingsData : DataContainer {
	InputActionMappingData[] Mappings;
}

enum InputActionMapPlatform {
	IAMPWin32 = 0,
	IAMPXenon = 1,
	IAMPPs3 = 2,
	IAMPAllPlatforms = 3
}

enum InputActionMapSlot {
	InputActionMapSlot_Undefined = 0,
	InputActionMapSlot_Root1 = 1,
	InputActionMapSlot_Root2 = 2,
	InputActionMapSlot_Root3 = 3,
	InputActionMapSlot_Root4 = 4,
	InputActionMapSlot_Root5 = 5,
	InputActionMapSlot_Root6 = 6,
	InputActionMapSlot_Root7 = 7,
	InputActionMapSlot_Root8 = 8,
	InputActionMapSlot_Root9 = 9,
	InputActionMapSlot_Root10 = 10,
	InputActionMapSlot_Root11 = 11,
	InputActionMapSlot_Root12 = 12,
	InputActionMapSlot_Root13 = 13,
	InputActionMapSlot_Root14 = 14,
	InputActionMapSlot_Root15 = 15,
	InputActionMapSlot_Root16 = 16,
	InputActionMapSlot_Sticks1 = 17,
	InputActionMapSlot_Sticks2 = 18,
	InputActionMapSlot_Sticks3 = 19,
	InputActionMapSlot_Sticks4 = 20,
	InputActionMapSlot_Buttons1 = 21,
	InputActionMapSlot_Buttons2 = 22,
	InputActionMapSlot_Buttons3 = 23,
	InputActionMapSlot_Buttons4 = 24,
	InputActionMapSlot_Sticks1Buttons1 = 25,
	InputActionMapSlot_Sticks1Buttons2 = 26,
	InputActionMapSlot_Sticks1Buttons3 = 27,
	InputActionMapSlot_Sticks1Buttons4 = 28,
	InputActionMapSlot_Sticks2Buttons1 = 29,
	InputActionMapSlot_Sticks2Buttons2 = 30,
	InputActionMapSlot_Sticks2Buttons3 = 31,
	InputActionMapSlot_Sticks2Buttons4 = 32,
	InputActionMapSlot_Sticks3Buttons1 = 33,
	InputActionMapSlot_Sticks3Buttons2 = 34,
	InputActionMapSlot_Sticks3Buttons3 = 35,
	InputActionMapSlot_Sticks3Buttons4 = 36,
	InputActionMapSlot_Sticks4Buttons1 = 37,
	InputActionMapSlot_Sticks4Buttons2 = 38,
	InputActionMapSlot_Sticks4Buttons3 = 39,
	InputActionMapSlot_Sticks4Buttons4 = 40,
	InputActionMapSlot_Count = 41
}

class InputActionsData : DataContainer {
	string NameSid;
	InputConceptIdentifiers ConceptIdentifier;
	InputConceptIdentifiers CopyKeyBindingFrom;
	InputActionData[] InputActions;
	bool HideInKeyBindings;
}

enum InputConceptIdentifiers {
	ConceptMoveFB = 0,
	ConceptMoveLR = 1,
	ConceptMoveForward = 2,
	ConceptMoveBackward = 3,
	ConceptMoveLeft = 4,
	ConceptMoveRight = 5,
	ConceptYaw = 6,
	ConceptPitch = 7,
	ConceptRoll = 8,
	ConceptRecenterCamera = 9,
	ConceptFire = 10,
	ConceptAltFire = 11,
	ConceptFireCountermeasure = 12,
	ConceptReload = 13,
	ConceptZoom = 14,
	ConceptToggleCamera = 15,
	ConceptSprint = 16,
	ConceptCrawl = 17,
	ConceptToggleWeaponLight = 18,
	ConceptJump = 19,
	ConceptCrouch = 20,
	ConceptCrouchOnHold = 21,
	ConceptProne = 22,
	ConceptInteract = 23,
	ConceptPickUp = 24,
	ConceptDrop = 25,
	ConceptBreathControl = 26,
	ConceptParachute = 27,
	ConceptSwitchInventoryItem = 28,
	ConceptSelectInventoryItem1 = 29,
	ConceptSelectInventoryItem2 = 30,
	ConceptSelectInventoryItem3 = 31,
	ConceptSelectInventoryItem4 = 32,
	ConceptSelectInventoryItem5 = 33,
	ConceptSelectInventoryItem6 = 34,
	ConceptSelectInventoryItem7 = 35,
	ConceptSelectInventoryItem8 = 36,
	ConceptSelectInventoryItem9 = 37,
	ConceptSwitchToPrimaryWeapon = 38,
	ConceptSwitchToGrenadeLauncher = 39,
	ConceptSwitchToStaticGadget = 40,
	ConceptSwitchToDynamicGadget1 = 41,
	ConceptSwitchToDynamicGadget2 = 42,
	ConceptMeleeAttack = 43,
	ConceptThrowGrenade = 44,
	ConceptCycleFireMode = 45,
	ConceptChangeVehicle = 46,
	ConceptBrake = 47,
	ConceptHandBrake = 48,
	ConceptClutch = 49,
	ConceptGearUp = 50,
	ConceptGearDown = 51,
	ConceptGearSwitch = 52,
	ConceptNextPosition = 53,
	ConceptSelectPosition1 = 54,
	ConceptSelectPosition2 = 55,
	ConceptSelectPosition3 = 56,
	ConceptSelectPosition4 = 57,
	ConceptSelectPosition5 = 58,
	ConceptSelectPosition6 = 59,
	ConceptSelectPosition7 = 60,
	ConceptSelectPosition8 = 61,
	ConceptCameraPitch = 62,
	ConceptCameraYaw = 63,
	ConceptMapZoom = 64,
	ConceptMapInnerZoom = 65,
	ConceptMapSize = 66,
	ConceptMapThreeDimensional = 67,
	ConceptScoreboard = 68,
	ConceptMenu = 69,
	ConceptSpawnMenu = 70,
	ConceptCancel = 71,
	ConceptCommMenu1 = 72,
	ConceptCommMenu2 = 73,
	ConceptCommMenu3 = 74,
	ConceptAccept = 75,
	ConceptDecline = 76,
	ConceptSelect = 77,
	ConceptBack = 78,
	ConceptActivate = 79,
	ConceptDeactivate = 80,
	ConceptEdit = 81,
	ConceptView = 82,
	ConceptParentNavigateLeft = 83,
	ConceptParentNavigateRight = 84,
	ConceptMenuZoomIn = 85,
	ConceptMenuZoomOut = 86,
	ConceptPanX = 87,
	ConceptPanY = 88,
	ConceptVoiceFunction1 = 89,
	ConceptSayAllChat = 90,
	ConceptTeamChat = 91,
	ConceptSquadChat = 92,
	ConceptSquadLeaderChat = 93,
	ConceptToggleChat = 94,
	ConceptQuicktimeInteractDrag = 95,
	ConceptQuicktimeFire = 96,
	ConceptQuicktimeBlock = 97,
	ConceptQuicktimeFastMelee = 98,
	ConceptQuicktimeJumpClimb = 99,
	ConceptQuicktimeCrouchDuck = 100,
	ConceptFreeCameraMoveUp = 101,
	ConceptFreeCameraMoveDown = 102,
	ConceptFreeCameraMoveLR = 103,
	ConceptFreeCameraMoveFB = 104,
	ConceptFreeCameraRotateX = 105,
	ConceptFreeCameraRotateY = 106,
	ConceptFreeCameraIncreaseSpeed = 107,
	ConceptFreeCameraDecreaseSpeed = 108,
	ConceptFreeCameraFOVModifier = 109,
	ConceptFreeCameraChangeFOV = 110,
	ConceptFreeCameraSwitchSpeed = 111,
	ConceptFreeCameraTurboSpeed = 112,
	ConceptFreeCameraActivator1 = 113,
	ConceptFreeCameraActivator2 = 114,
	ConceptFreeCameraActivator3 = 115,
	ConceptFreeCameraMayaInputActivator = 116,
	ConceptTargetedCameraDistance = 117,
	ConceptTargetedCameraRotateX = 118,
	ConceptTargetedCameraRotateY = 119,
	ConceptTargetedCameraChangeSpeed = 120,
	ConceptLThumb = 121,
	ConceptRThumb = 122,
	ConceptToggleMinimapType = 123,
	ConceptUndefined = 124,
	ConceptSize = 125
}

class InputConfigurationAsset : Asset {
	EntryInputActionMapsData DefaultInputConceptDefinition;
	InputConceptIdentifiers[] DefaultExclusiveInputConcepts;
	EditableActionMap[] UserConfigurableActionMaps;
	EntryInputActionEnum TogglePoseAction;
	EntryInputActionEnum CrouchAction;
	EntryInputActionEnum CrouchAndHoldAction;
	EntryInputActionEnum PickupInteractionAction;
	PoseTransition[] FiringDisablingTransitions;
	float SprintReleaseTime;
	float ThrottleInputRequiredForSprint;
	bool StandAutomaticallyIfSprinting;
	bool ProneToStandOnJump;
	bool DisableCrawlingWhileReloading;
	bool DisableFiringWhileDeployingBipod;
	bool DisableFiringWhileJumping;
	bool DisableSprintingWhileReloading;
	bool EnableSprintToCrouchTransition;
	bool StopSprintingWhenReleasingThrottle;
	bool StopSprintingWhenReleasingSprint;
	bool WaitForSprintReleaseBeforeSprintAgain;
	bool VehicleBoostIsToggle;
	bool InputCurvesEnabled;
	bool DisableCrawlingWhileFiring;
}

class InputCurveData : DataContainer {
	EntryInputActionEnum[] AffectedInputs;
	Vec2[] InputModifierCurve;
	bool HandleMultipleInputsAsSquare;
}

enum InputDeviceAxes {
	IDA_Axis0X = 0,
	IDA_Axis0Y = 1,
	IDA_Axis0XPos = 2,
	IDA_Axis0YPos = 3,
	IDA_Axis0XNeg = 4,
	IDA_Axis0YNeg = 5,
	IDA_Axis1X = 6,
	IDA_Axis1Y = 7,
	IDA_Axis1XPos = 8,
	IDA_Axis1YPos = 9,
	IDA_Axis1XNeg = 10,
	IDA_Axis1YNeg = 11,
	IDA_Axis2X = 12,
	IDA_Axis2Y = 13,
	IDA_Axis3X = 14,
	IDA_Axis3Y = 15,
	IDA_Axis4X = 16,
	IDA_Axis4Y = 17,
	IDA_Axis5X = 18,
	IDA_Axis5Y = 19,
	IDA_Axis6X = 20,
	IDA_Axis6Y = 21,
	IDA_Axis7X = 22,
	IDA_Axis7Y = 23,
	IDA_Undefined = 24
}

enum InputDeviceKeys {
	IDK_None = 0,
	IDK_Escape = 1,
	IDK_1 = 2,
	IDK_2 = 3,
	IDK_3 = 4,
	IDK_4 = 5,
	IDK_5 = 6,
	IDK_6 = 7,
	IDK_7 = 8,
	IDK_8 = 9,
	IDK_9 = 10,
	IDK_0 = 11,
	IDK_Minus = 12,
	IDK_Equals = 13,
	IDK_Backspace = 14,
	IDK_Tab = 15,
	IDK_Q = 16,
	IDK_W = 17,
	IDK_E = 18,
	IDK_R = 19,
	IDK_T = 20,
	IDK_Y = 21,
	IDK_U = 22,
	IDK_I = 23,
	IDK_O = 24,
	IDK_P = 25,
	IDK_LeftBracket = 26,
	IDK_RightBracket = 27,
	IDK_Enter = 28,
	IDK_LeftCtrl = 29,
	IDK_A = 30,
	IDK_S = 31,
	IDK_D = 32,
	IDK_F = 33,
	IDK_G = 34,
	IDK_H = 35,
	IDK_J = 36,
	IDK_K = 37,
	IDK_L = 38,
	IDK_Semicolon = 39,
	IDK_Apostrophe = 40,
	IDK_Grave = 41,
	IDK_LeftShift = 42,
	IDK_Backslash = 43,
	IDK_Z = 44,
	IDK_X = 45,
	IDK_C = 46,
	IDK_V = 47,
	IDK_B = 48,
	IDK_N = 49,
	IDK_M = 50,
	IDK_Comma = 51,
	IDK_Period = 52,
	IDK_Slash = 53,
	IDK_RightShift = 54,
	IDK_Multiply = 55,
	IDK_LeftAlt = 56,
	IDK_Space = 57,
	IDK_Capital = 58,
	IDK_F1 = 59,
	IDK_F2 = 60,
	IDK_F3 = 61,
	IDK_F4 = 62,
	IDK_F5 = 63,
	IDK_F6 = 64,
	IDK_F7 = 65,
	IDK_F8 = 66,
	IDK_F9 = 67,
	IDK_F10 = 68,
	IDK_Numlock = 69,
	IDK_ScrollLock = 70,
	IDK_Numpad7 = 71,
	IDK_Numpad8 = 72,
	IDK_Numpad9 = 73,
	IDK_Subtract = 74,
	IDK_Numpad4 = 75,
	IDK_Numpad5 = 76,
	IDK_Numpad6 = 77,
	IDK_Add = 78,
	IDK_Numpad1 = 79,
	IDK_Numpad2 = 80,
	IDK_Numpad3 = 81,
	IDK_Numpad0 = 82,
	IDK_Decimal = 83,
	IDK_OEM_102 = 86,
	IDK_F11 = 87,
	IDK_F12 = 88,
	IDK_F13 = 100,
	IDK_F14 = 101,
	IDK_F15 = 102,
	IDK_Kana = 112,
	IDK_Convert = 121,
	IDK_NoConvert = 123,
	IDK_Yen = 125,
	IDK_NumpadEquals = 141,
	IDK_PrevTrack = 144,
	IDK_At = 145,
	IDK_Colon = 146,
	IDK_Underline = 147,
	IDK_Kanji = 148,
	IDK_Stop = 149,
	IDK_Ax = 150,
	IDK_Unlabeled = 151,
	IDK_NextTrack = 153,
	IDK_NumpadEnter = 156,
	IDK_RightCtrl = 157,
	IDK_Mute = 160,
	IDK_Calculator = 161,
	IDK_PlayPause = 162,
	IDK_MediaStop = 164,
	IDK_VolumeDown = 174,
	IDK_VolumeUp = 176,
	IDK_WebHome = 178,
	IDK_NumpadComma = 179,
	IDK_Divide = 181,
	IDK_PrintScreen = 183,
	IDK_RightAlt = 184,
	IDK_Pause = 197,
	IDK_Home = 199,
	IDK_ArrowUp = 200,
	IDK_PageUp = 201,
	IDK_ArrowLeft = 203,
	IDK_ArrowRight = 205,
	IDK_End = 207,
	IDK_ArrowDown = 208,
	IDK_PageDown = 209,
	IDK_Insert = 210,
	IDK_Delete = 211,
	IDK_LeftWin = 219,
	IDK_RightWin = 220,
	IDK_AppMenu = 221,
	IDK_Power = 222,
	IDK_Sleep = 223,
	IDK_Wake = 227,
	IDK_WebSearch = 229,
	IDK_WebFavorites = 230,
	IDK_WebRefresh = 231,
	IDK_WebStop = 232,
	IDK_WebForward = 233,
	IDK_WebBack = 234,
	IDK_MyComputer = 235,
	IDK_Mail = 236,
	IDK_MediaSelect = 237,
	IDK_Undefined = 255
}

enum InputDeviceMotionControllerButtons {
	IDMCB_Rup = 0,
	IDMCB_Rdown = 1,
	IDMCB_Rleft = 2,
	IDMCB_Rright = 3,
	IDMCB_start = 4,
	IDMCB_alt = 5,
	IDMCB_center = 6,
	IDMCB_trigger = 7,
	IDMCB_reload = 8,
	IDMCB_pumpaction = 9,
	IDMCB_Gstab = 10,
	IDMCB_Grotleft = 11,
	IDMCB_Grotright = 12,
	IDMCB_Undefined = 13
}

enum InputDeviceMouseButtons {
	IDB_Button_0 = 0,
	IDB_Button_1 = 1,
	IDB_Button_2 = 2,
	IDB_Button_3 = 3,
	IDB_Button_4 = 4,
	IDB_Button_5 = 5,
	IDB_Button_6 = 6,
	IDB_Button_7 = 7,
	IDB_Button_Undefined = 8
}

enum InputDevicePadButtons {
	IDB_Lup = 0,
	IDB_Ldown = 1,
	IDB_Lleft = 2,
	IDB_Lright = 3,
	IDB_Rup = 4,
	IDB_Rdown = 5,
	IDB_Rleft = 6,
	IDB_Rright = 7,
	IDB_Rtopleft = 8,
	IDB_Rtopright = 9,
	IDB_Lthumb = 10,
	IDB_Rthumb = 11,
	IDB_start = 12,
	IDB_alt = 13,
	IDB_Ltrigger = 14,
	IDB_Rtrigger = 15,
	IDB_Ltrigger2 = 16,
	IDB_Rtrigger2 = 17,
	IDB_XButton1 = 18,
	IDB_XButton2 = 19,
	IDB_XButton3 = 20,
	IDB_XButton4 = 21,
	IDB_XButton5 = 22,
	IDB_XButton6 = 23,
	IDB_XButton7 = 24,
	IDB_XButton8 = 25,
	IDB_XButton9 = 26,
	IDB_XButton10 = 27,
	IDB_XButton11 = 28,
	IDB_XButton12 = 29,
	IDB_XButton13 = 30,
	IDB_XButton14 = 31,
	IDB_XButton15 = 32,
	IDB_XButton16 = 33,
	IDB_XButton17 = 34,
	IDB_XButton18 = 35,
	IDB_PosZAxis = 36,
	IDB_NegZAxis = 37,
	IDB_XRotationPos = 38,
	IDB_XRotationNeg = 39,
	IDB_YRotationPos = 40,
	IDB_YRotationNeg = 41,
	IDB_ZRotationPos = 42,
	IDB_ZRotationNeg = 43,
	IDB_Pov1North = 44,
	IDB_Pov1South = 45,
	IDB_Pov1West = 46,
	IDB_Pov1East = 47,
	IDB_Pov2North = 48,
	IDB_Pov2South = 49,
	IDB_Pov2West = 50,
	IDB_Pov2East = 51,
	IDB_Pov3North = 52,
	IDB_Pov3South = 53,
	IDB_Pov3West = 54,
	IDB_Pov3East = 55,
	IDB_Pov4North = 56,
	IDB_Pov4South = 57,
	IDB_Pov4West = 58,
	IDB_Pov4East = 59,
	IDB_Undefined = 60,
	IDB_NumPadButtons = 60
}

enum InputDevicePOVs {
	IDP_POV_0 = 0,
	IDP_POV_1 = 1,
	IDP_POV_2 = 2,
	IDP_POV_Undefined = 3
}

enum InputIds {
	NoInputId = 0,
	SpectatorInputId = 1,
	FreeCameraInputId = 2,
	EntryInputId = 3
}

class InputModifierEntityData : EntityData {
	EntryInputActionEnum Action;
	float Scale;
	float Offset;
	bool Enabled;
}

class InputRecorderData : DataContainer {
	string FileNamePrefix;
	string FileName;
	EntryInputActionEnum ToggleRecordAction;
	bool AutoIncrementFileName;
}

struct InputRecorderTrackData {
	string Name;
	FloatPropertyTrackData PropertyTrack;
}

class InputRestrictionEntityData : GameEntityData {
	bool ApplyRestrictionsToSpecificPlayer;
	bool Throttle;
	bool Strafe;
	bool Brake;
	bool HandBrake;
	bool Clutch;
	bool Yaw;
	bool Pitch;
	bool Roll;
	bool Fire;
	bool FireCountermeasure;
	bool AltFire;
	bool CycleRadioChannel;
	bool SelectMeleeWeapon;
	bool Zoom;
	bool Jump;
	bool ChangeVehicle;
	bool ChangeEntry;
	bool ChangePose;
	bool ToggleParachute;
	bool ChangeWeapon;
	bool Reload;
	bool ToggleCamera;
	bool Sprint;
	bool ScoreboardMenu;
	bool MapZoom;
	bool GearUp;
	bool GearDown;
	bool ThreeDimensionalMap;
	bool GiveOrder;
	bool Prone;
	bool SwitchPrimaryInventory;
	bool SwitchPrimaryWeapon;
	bool GrenadeLauncher;
	bool StaticGadget;
	bool DynamicGadget1;
	bool DynamicGadget2;
	bool MeleeAttack;
	bool ThrowGrenade;
	bool SelectWeapon1;
	bool SelectWeapon2;
	bool SelectWeapon3;
	bool SelectWeapon4;
	bool SelectWeapon5;
	bool SelectWeapon6;
	bool SelectWeapon7;
	bool SelectWeapon8;
	bool SelectWeapon9;
	bool OverridePreviousInputRestriction;
}

struct InputSuppressionData {
	ActionSuppressor[] SuppressVehicleInput;
}

struct InspectAnimationTriggerData {
	AntRef Animation;
	float Probability;
}

class InspectEntityData : GameEntityData {
	Vec3 CenterOffset;
	string UIName;
	float MaxLookAtHeight;
	InspectViewPointData[] ViewPoints;
	TargetCameraData[] Cameras;
	float MinLookAtHeight;
	float MinDistance;
	float ZoomScrollSpeed;
	float MaxDistance;
	AntRef AnimationSignal;
	float ZoomScrollAcceleration;
}

struct InspectViewPointData {
	string ViewPointID;
	InspectAnimationTriggerData[] AnimationTriggers;
	AntRef[] ContinuousAnimationSignal;
	float LookAtHeight;
	float Yaw;
	float Pitch;
	float Distance;
	float FovOffset;
	float AdjustmentYaw;
	bool Fixed;
}

class InstanceInputNode : UINodeData {
	UINodePort Out;
}

class InstanceNode : UINodeData {
	UIGraphAsset UIGraph;
	UINodePort[] Inputs;
	UINodePort[] Outputs;
}

class InstanceOutputNode : UINodeData {
	UINodePort In;
	int32 Id;
	bool DestroyGraph;
}

class IntegratorOrDifferentiatorEntityData : EntityData {
	Realm Realm;
	EntityUpdateOrder UpdatePass;
	float StartValue;
	float Input;
	float MaxValue;
	float MinValue;
	bool Bounded;
}

struct IntentData {
	string Name;
	float DefaultModifier;
}

class IntEntityData : EntityData {
	Realm Realm;
	int32 DefaultValue;
	int32 IncDecValue;
}

class InteractableStaticModelEntityData : StaticModelEntityData {
}

class InteractionEntityData : GameEntityData {
	float UseWithinRadius;
	float UseWithinAngle;
	SoundAsset PreInteractionSoundEffect;
	uint32 MaxUses;
	bool AllowInteractionViaRemoteEntry;
	bool TestIfOccluded;
}

enum InteractionEntityType {
	IET_None = 0,
	IET_RushCrateArm = 1,
	IET_RushCrateDisarm = 2,
	IET_CTFFlag = 3
}

struct InteractionTypesData {
	bool InteractionEntity;
	bool PickupEntity;
	bool AmmoCrateEntity;
	bool VehicleEntity;
	bool ExplosionPackEntity;
	bool SoldierEntity;
}

class InterfaceDescriptorData : DynamicDataContainer {
	DynamicEvent[] InputEvents;
	DynamicEvent[] OutputEvents;
	DynamicLink[] InputLinks;
	DynamicLink[] OutputLinks;
}

class InterludeOrderEntityData : BFOrderEntityData {
	bool IsCutscene;
	bool Crouch;
}

enum InterpolationType {
	InterpolationType_None = 0,
	InterpolationType_Linear = 1,
	InterpolationType_CatmullRom = 2,
	InterpolationType_Curves = 3
}

struct InterruptFlow {
	UIInterruptID interruptEnum;
	UIGraphAsset interruptFlow;
}

class IntHubEntityData : EntityData {
	Realm Realm;
	int32 InputCount;
	int32 InputSelect;
}

struct IntOption {
	string Name;
	int32 Value;
}

class IntPropertyTrackData : SimplePropertyTrackData {
	int32[] Values;
}

class IntRecordingData : PropertyRecordingData {
	int32[] Values;
}

class IntUnlockValuePair : UnlockValuePair {
	int32 DefaultValue;
	int32 UnlockedValue;
}

enum InvitePlatform {
	InvitePlatform_Invalid = 0,
	InvitePlatform_X360 = 1,
	InvitePlatform_PS3 = 2,
	InvitePlatform_PC = 3,
	InvitePlatform_Count = 4
}

enum InviteType {
	InviteType_Invalid = 0,
	InviteType_Invite = 1,
	InviteType_JoinSession = 2,
	InviteType_JoinFriendSession = 3,
	InviteType_Count = 4
}

class IrReverbControllerNodeData : AudioGraphNodeData {
	AudioGraphNodePort Reverb0;
	AudioGraphNodePort Amplitude0;
	AudioGraphNodePort Reverb1;
	AudioGraphNodePort Amplitude1;
}

class IrReverbEntityData : EntityData {
	ImpulseResponseAsset ImpulseResponse;
	float Gain;
	float Volume;
	FadeCurveType FadeCurve;
}

class IrReverbNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Out;
	AudioGraphNodePort Reverb0;
	AudioGraphNodePort Amplitude0;
	AudioGraphNodePort Reverb1;
	AudioGraphNodePort Amplitude1;
	float MaxReverbLength;
	SoundGraphPluginRef ReverbPlugin;
}

class JammingComponentData : ComponentData {
	SmokeJammingData SmokeJamming;
	AirMissileJammingData AirMissileJamming;
}

class JetEngineConfigData : EngineConfigData {
	Vec2 PowerFadeOutRange;
	float ForceMagnitudeMultiplier;
	float AngleInputYMultiplier;
	float AngleInputPitchMultiplier;
	float MaxVelocity;
	uint32 DirectionVectorIndex;
	bool IsWaterJetEngine;
	bool IsTurnable;
}

class JoypadNodeData : AudioGraphNodeData {
	AudioGraphNodePort LeftAnalogX;
	AudioGraphNodePort LeftAnalogY;
	AudioGraphNodePort RightAnalogX;
	AudioGraphNodePort RightAnalogY;
	AudioGraphNodePort AButton;
	AudioGraphNodePort BButton;
}

class JumpNode : UINodeData {
	UINodePort In;
	UINodeData TargetNode;
	UINodePort TargetPort;
}

class JumpStateData : CharacterStateData {
	float JumpHeight;
	float JumpEffectSize;
}

class KeyboardInputActionData : InputActionData {
	InputDeviceKeys Key;
}

class KillAllEntityData : GameEntityData {
	bool KillAllHumanSoldiers;
}

class KillCounterEntityData : GameEntityData {
	KillWeight TeamKillWeight;
	TeamId TeamId;
	KillWeight NeutralTeamWeight;
	float EnemyWeight;
	uint32 MaxKillCount;
	bool IgnoreAI;
}

class KillEvent : MetricEvent {
	Vec3 Position;
	Vec3 VictimPosition;
	uint64 VictimId;
	float Time;
	string Weapon;
}

class KillFromVehicleScoringHandlerData : ScoringHandlerData {
}

struct KillWeight {
	float LowIntenseWeight;
	float HighIntenseWeight;
	float CoolDownTime;
}

class KitPickupEntityData : PickupEntityData {
	bool KeepAdditionalWeapons;
	bool KeepAmmoState;
}

class KitState : MetricState {
	string Kit;
}

class KitStateEvent : MetricEvent {
	string Kit;
	float SecondsAsKit;
}

class KyotoPlayerAliveFilterEntityData : EntityData {
}

class LadderComponentData : ComponentData {
}

class LadderEntityData : StaticModelEntityData {
}

class LakeData : VisualVectorShapeData {
}

class LandingFlapData : DataContainer {
	float ActivationHeight;
	float HeightTolerance;
	float ActivationVelocity;
	float VelocityTolerance;
}

struct LandingGearConditionData {
	float Height;
	float Velocity;
	float Angle;
}

class LandingGearLogicData : DataContainer {
	LandingGearConditionData RetractCondition;
	LandingGearConditionData DeployCondition;
}

enum LanguageFormat {
	LanguageFormat_English = 0,
	LanguageFormat_French = 1,
	LanguageFormat_German = 2,
	LanguageFormat_Spanish = 3,
	LanguageFormat_Italian = 4,
	LanguageFormat_Japanese = 5,
	LanguageFormat_Russian = 6,
	LanguageFormat_Polish = 7,
	LanguageFormat_Dutch = 8,
	LanguageFormat_Portuguese = 9,
	LanguageFormat_TraditionalChinese = 10,
	LanguageFormat_Korean = 11,
	LanguageFormat_Czech = 12,
	LanguageFormat_Count = 13,
	LanguageFormat_Undefined = 14
}

class LanPresenceBackendData : PresenceBackendData {
}

class LanServerBackendData : ServerBackendData {
}

class LaserDesignatorData : LockingWeaponData {
	float PostLockTime;
	float BomberTime;
	float BombWarnTime;
	SoundAsset BomberSound;
}

class LaserPainterData : LockingWeaponData {
	float TimeObjectIsPainted;
}

class LensFlareComponentData : ComponentData {
	LensFlareEntityData LensFlare;
}

struct LensFlareElement {
	Vec4 SizeCamDistCurve;
	Vec4 SizeAngleCurve;
	Vec2 Size;
	Vec4 SizeOccluderCurve;
	Vec4 SizeScreenPosCurve;
	Vec4 AlphaCamDistCurve;
	Vec4 AlphaOccluderCurve;
	Vec4 AlphaAngleCurve;
	Vec4 AlphaScreenPosCurve;
	float SizeCamDistMax;
	float RayDistance;
	SurfaceShaderBaseAsset Shader;
	float AlphaCamDistMax;
}

class LensFlareEntityData : SpatialEntityData {
	LensFlareElement[] Elements;
	float OccluderSize;
	bool Visible;
	bool HalfRes;
	bool DebugDrawOccluder;
}

class LensScopeComponentData : ComponentData {
	Vec3 ChromaticAberrationColor1;
	Vec2 RadialBlendDistanceCoefficients;
	Vec3 ChromaticAberrationColor2;
	Vec2 BlurCenter;
	Vec2 ChromaticAberrationDisplacement2;
	Vec2 ChromaticAberrationDisplacement1;
	Vec2 ChromaticAberrationStrengths;
	float BlurScale;
	Realm Realm;
	bool Enable;
}

class LevelAudioObstructionAsset : Asset {
	AudioObstructionMaterialInfo[] MaterialMap;
	float FrequencySlewRate;
	float GainSlewRate;
	float MaxRaycastDistanceSquared;
}

class LevelControlEntityData : GameEntityData {
	string LevelToLoad;
	bool RollCredits;
}

class LevelData : WorldData {
	ReferenceObjectData LevelReference;
	PathfindingBlob PathfindingBlobInfo;
	GameAISystem AISystem;
	float WorldSizeXZ;
	LevelDescription LevelDescription;
	string GameConfigurationName;
	EmitterSystemAsset EmitterSystemAsset;
	EmitterExclusionVolumeData[] EmitterExclusionVolumes;
	float DefaultFOV;
	float InfantryFOVMultiplier;
	uint32 MaxEntityBusNetworkCount;
	SoundStateSettingsAsset SoundStates;
	VoiceOverSystemAsset VoiceOverSystem;
	VoiceOverLogicAsset[] VoiceOverLogic;
	float MaxVehicleHeight;
	AnimatedSkeletonDatabase AnimatedSkeletonDatabase;
	EnlightenShaderDatabaseAsset EnlightenShaderDatabase;
	AntProjectAsset[] AntProjectAssets;
	string AerialHeightmapData;
	LevelAudioObstructionAsset AudioObstructionInfo;
	CameraTransition[] CameraTransitions;
	CameraModeAsset[] CameraModes;
	FaceAnimationWaveMappings FaceAnimationsWaveMappings;
	Asset HackForceBuild;
	bool HugeBroadPhase;
	bool FreeStreamingEnable;
}

struct LevelDescription {
	string Name;
	string Description;
	LevelDescriptionComponent[] Components;
	bool IsCoop;
	bool IsMenu;
	bool IsMultiplayer;
}

class LevelDescriptionAsset : Asset {
	string LevelName;
	LevelDescriptionInclusionCategory[] Categories;
	LevelDescription Description;
	string[] StartPoints;
}

class LevelDescriptionComponent : DataContainer {
}

struct LevelDescriptionInclusionCategory {
	string Category;
	string[] Mode;
}

class LevelReportingAsset : Asset {
	LevelDescriptionAsset[] BuiltLevels;
}

class LevelSaveData : DataContainer {
	uint32 SaveSize;
	string[] SaveNames;
}

struct LevelSetup {
	string Name;
	LevelSetupOption[] InclusionOptions;
	uint32 DifficultyIndex;
	string[] SubLevelNames;
	int32[] SubLevelStates;
	bool IsSaveGame;
	bool ForceReloadResources;
}

struct LevelSetupOption {
	string Criterion;
	string Value;
}

class LfoNodeData : AudioGraphNodeData {
	AudioGraphNodePort Hz;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Out;
	float Min;
	float Max;
	bool StartAtRandomValue;
}

class LicenseConfiguration : Asset {
	LicenseInfo[] Licenses;
}

struct LicenseInfo {
	string Name;
	GamePlatform StagingPlatform;
	bool AllowStaging;
	bool ClientOnly;
}

class LifeCounterEntityData : GameEntityData {
	int32 StartingLifeCount;
	float DisplayTime;
	TeamId TeamId;
	int32[] LifeTresholdValues;
	int32 UiShowCountLowerThreshold;
	int32 UiShowCountUpperThreshold;
	int32 BaseCount;
	float[] ReinforceTable;
	int32 ReinforceThreshold;
	string ReinforceMessageSid;
	float FightHarderTreshold;
	float DefensiveKillRadius;
	float FallbackTime;
	string FightHarderMessageSid;
	bool Attacker;
	bool SetBestSquadSpawner;
	bool SimpleReinforce;
}

class LightComponentData : ComponentData {
	LocalLightEntityData Light;
}

class LightProbeVolumeData : SpatialEntityData {
	uint32 Xres;
	uint32 Yres;
	uint32 Zres;
	float BlendDistance;
	int32 Priority;
}

enum LimiterChannelMode {
	LimiterChannelMode_Independent = 0,
	LimiterChannelMode_Grouped = 1
}

class LimiterNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Threshold;
	AudioGraphNodePort ReleaseTime;
	AudioGraphNodePort Out;
	LimiterChannelMode ChannelMode;
	SoundGraphPluginRef Plugin;
}

class LinearMovingBodyData : MovingBodyData {
	Vec3 Axis;
	EndPointData Start;
	EndPointData End;
}

class LinearTransformNodeData : AudioGraphNodeData {
	AudioGraphNodePort X;
	AudioGraphNodePort K;
	AudioGraphNodePort M;
	AudioGraphNodePort Y;
}

class LinearTransformRecordingData : PropertyRecordingData {
	LinearTransform[] Values;
}

struct LinkConnection {
	DataContainer Source;
	DataContainer Target;
	int32 SourceFieldId;
	int32 TargetFieldId;
}

class LocalForceData : ProcessorData {
	Vec3 LocalForce;
}

class LocalizationAsset : Asset {
	UITextDatabase[] LocalizedTexts;
}

class LocalLightEntityData : SpatialEntityData {
	Vec3 Color;
	Vec3 ParticleColorScale;
	Vec3 EnlightenColorScale;
	float Radius;
	float Intensity;
	float AttenuationOffset;
	EnlightenColorMode EnlightenColorMode;
	bool EnlightenEnable;
	bool Visible;
	bool SpecularEnable;
}

class LocalServerBackendData : ServerBackendData {
}

class LocatorComponentData : ComponentData {
	Realm Realm;
}

class LocatorEntityData : SpatialEntityData {
	Realm Realm;
}

struct LockedSettingConfig {
	string Key;
	uint32 Value;
}

class LockingControllerData : DataContainer {
	ZoomLevelLockData[] ZoomLevelLock;
	float LockTime;
	float ReleaseTime;
	float ReleaseOnNewTargetTime;
	float SampleRate;
	float HoldStillThreshold;
	float RayLength;
	float AcceptanceAngle;
	float MinimumLockTime;
	float Sensitivity;
	float AngleConstant;
	float DistanceConstant;
	bool LockOnWorldSpacePos;
	bool LockOnVisibleTargetsOnly;
	bool PositionOnly;
	bool LockOnEmptyVehicles;
	bool IgnoreHeigthLockDistance;
}

class LockingScoringHandlerData : ScoringHandlerData {
	float HotVehicleTimeout;
}

class LockingWeaponData : WeaponData {
	LockingControllerData LockingController;
	LockingControllerData SecondaryLockingController;
	WarnTarget WarnLock;
	bool IsHoming;
	bool IsGuidedWhenZoomed;
	bool FireOnlyWhenLockedOn;
	bool IsGuided;
}

enum LockType {
	LockAlways = 0,
	LockOnRadar = 1,
	LockOnHeat = 2,
	LockOnLaserPainted = 3,
	LockNever = 4,
	LockTypeCount = 5
}

struct LodBinding {
	AntRef DisableControllerUpdate;
	AntRef DisablePoseUpdate;
	AntRef DistanceFromCamera;
}

enum LogFileCollisionMode {
	LFCM_Overwrite = 0,
	LFCM_Rotate = 1,
	LFCM_TimeStamp = 2
}

class LoggingEntityData : EntityData {
	Vec2 Vec2Value;
	Vec3 Vec3Value;
	LinearTransform TransformValue;
	Realm Realm;
	float FloatValue;
	string[] Strings;
	int32 IntValue;
	bool BoolValue;
}

class LogicalExpressionEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Trigger;
}

class LogicalExpressionNodeData : AudioGraphNodeData {
	LogicalExpressionEntry[] Inputs;
	AudioGraphNodePort Trigger;
	LogicalExpressionOperator Operator;
}

enum LogicalExpressionOperator {
	LogicalExpressionOperator_And = 0,
	LogicalExpressionOperator_Or = 1,
	LogicalExpressionOperator_Nand = 2,
	LogicalExpressionOperator_Nor = 3
}

class LogicPrefabBlueprint : PrefabBlueprint {
}

class LogicReferenceObjectData : ReferenceObjectData {
	SubRealm SubRealm;
}

class LogicVisualEnvironmentEntityData : EntityData {
	VisualEnvironmentBlueprint VisualEnvironment;
	float Visibility;
}

class LookAtCameraEntityData : CameraEntityData {
}

class LookAtEntityData : SpatialEntityData {
	bool RunOnce;
	bool UseStaticDirection;
	bool Enabled;
}

class LookAtTriggerEntityData : TriggerEventEntityData {
	float FOV;
	SoldierWeaponBlueprint Weapon;
	uint32 ZoomLevel;
	float MinDistanceToObject;
	float MaxDistanceToObject;
	bool StartTriggerLookingAt;
	bool CheckOcclusion;
}

struct LookConstraintsData {
	float MinLookYaw;
	float MaxLookYaw;
	float MinLookPitch;
	float MaxLookPitch;
}

enum LoopType {
	LtNone = 0,
	LtForward = 1,
	LtRelease = 2,
	LtInstantRelease = 3
}

class LoosePartPhysicsData : DataContainer {
	FakePhysicsData FakePhysics;
}

class LowPassButterworthNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Order;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class LowPassFir64NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class LowPassIir2NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class LowShelfIir2NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class ManualDataAsset : Asset {
	ManualDataEntry[] Entries;
}

struct ManualDataEntry {
	GamePlatform Platform;
	LanguageFormat Language;
	TextureAsset[] Textures;
}

enum MapMarkerColorType {
	MMCTRed = 0,
	MMCTBlue = 1,
	MMCTGreen = 2
}

class MapMarkerEntityData : GameEntityData {
	Vec3 BaseTransform;
	float ProgressMinTime;
	string Sid;
	int32 NrOfPassengers;
	int32 NrOfEntries;
	float ProgressTime1Player;
	float ShowRadius;
	float HideRadius;
	float BlinkTime;
	MapMarkerType MarkerType;
	TeamId VisibleForTeam;
	TeamId OwnerTeam;
	UIHudIcon HudIcon;
	float VerticalOffset;
	float FocusPointRadius;
	float InstantFlagReturnRadius;
	float Progress;
	float ProgressPlayerSpeedUpPercentage;
	uint32 TrackedPlayersInRange;
	float TrackingPlayerRange;
	float ProgressTime;
	bool OnlyShowSnapped;
	bool FlagControlMarker;
	bool ShowProgress;
	bool UseMarkerTransform;
	bool IsVisible;
	bool Snap;
	bool ShowAirTargetBox;
	bool IsFocusPoint;
}

enum MapMarkerType {
	MMTMissionObjective = 0,
	MMTSecondaryMissionObjective = 1,
	MMTSoldier = 2,
	MMTVehicle = 3,
	MMTAmmoCrate = 4,
	MMTGeneric = 5,
	MMTFlag = 6
}

struct MapRotataionLookup {
	string GameMode;
}

struct MapRotationConfig {
	int32 MapRotationId;
	string NameSid;
	string DescSid;
	string Mod;
	string GameMode;
	bool RandomizeStartingMap;
}

class MaskVolumeEntityData : RenderVolumeEntityData {
}

class MasterSkeletonAsset : Asset {
	SkeletonAsset MasterSkeleton;
	SubSkeleton[] SubSkeletons;
}

class MasterUnitNodeData : AudioGraphNodeData {
	AudioGraphNodePort SettingsIndex;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort MasterGain;
	AudioGraphNodePort MasterLfeGain;
	AudioGraphNodePort MasterDialogGain;
	AudioGraphNodePort MainMixGain;
	AudioGraphNodePort PostEffectsGain;
	AudioGraphNodePort ReverbGain;
	AudioGraphNodePort FadeTime;
	AudioGraphNodePort HighPassFreq;
	AudioGraphNodePort LowShelfFreq;
	AudioGraphNodePort LowShelfGain;
	AudioGraphNodePort HighShelfFreq;
	AudioGraphNodePort HighShelfGain;
	AudioGraphNodePort CompThreshold;
	AudioGraphNodePort CompRatio;
	AudioGraphNodePort CompAttack;
	AudioGraphNodePort CompRelease;
	AudioGraphNodePort DistClipLevel;
	AudioGraphNodePort ParallelDistortionGain;
	MasterUnitSettings[] Settings;
}

class MasterUnitSettings : DataContainer {
	string Name;
	EqualizerSettings Equalizer;
	CompressorSettings Compressor;
	float MasterVolume;
	float MasterLfeGain;
	float MasterDialogGain;
	float ReverbVolume;
	float MainMixVolume;
	float DistortionClipLevel;
	float ParallelDistortionGain;
	float PostEffectsGain;
	float FadeTime;
}

struct MatchmakingCreateGameParameters {
	MatchmakingNetworkTopology GameTopology;
	MatchmakingPeer2PeerMode PeerMode;
	MatchmakingNetworkTopology VoipTopology;
	MatchmakingGameSettings Settings;
	MatchmakingGameAttribute[] Attributes;
	uint32 QueueCapacity;
}

struct MatchmakingCriteria {
	MatchmakingSizeRule SizeRule;
	MatchmakingPingSiteRule PingSiteRule;
	MatchmakingRankedRule RankedRule;
	MatchmakingGenericRule[] GenericRules;
	MatchmakingVirtualizedRule VirtualizedRule;
	MatchmakingUserExtendedDataRule[] UEDRules;
}

struct MatchmakingGameAttribute {
	string Attribute;
	string Value;
	bool Override;
}

struct MatchmakingGameSettings {
	bool OpenToBrowsing;
	bool OpenToInvites;
	bool OpenToMatchmaking;
	bool OpenToJoinByPlayer;
	bool HostMigratable;
	bool Ranked;
	bool AdminOnlyInvites;
	bool EnforceSingleGroupJoin;
	bool JoinInProgressSupported;
	bool AdminInvitesOnlyIgnoreEntryChecks;
	bool EnablePersistedGameId;
	bool AllowSameTeamId;
}

struct MatchmakingGenericRule {
	string Rule;
	string MinFitThresHold;
	string Setting;
	MatchmakingRuleString[] DesiredValues;
	bool IgnoreIfDefault;
	bool MergeValues;
	bool SortValues;
}

class MatchmakingModifier : DataContainer {
}

enum MatchmakingNetworkTopology {
	MatchmakingNetworkTopology_Disabled = 0,
	MatchmakingNetworkTopology_Peer2Peer = 1,
	MatchmakingNetworkTopology_PeerHosted = 2,
	MatchmakingNetworkTopology_DedicatedServer = 3
}

enum MatchmakingPeer2PeerMode {
	MatchmakingPeer2PeerMode_FullMesh = 0,
	MatchmakingPeer2PeerMode_PartialMesh = 1,
	MatchmakingPeer2PeerMode_DirtyCastFailover = 2
}

struct MatchmakingPingSiteRule {
	string MinFitThreshold;
}

enum MatchmakingPlatform {
	MatchmakingPlatform_PC = 0,
	MatchmakingPlatform_Console = 1,
	MatchmakingPlatform_360 = 2,
	MatchmakingPlatform_PS3 = 3,
	MatchmakingPlatform_Any = 4
}

class MatchmakingPlayerCapacityModifier : MatchmakingModifier {
	string Attribute;
}

enum MatchmakingRankedMode {
	MatchmakingRankedMode_Ranked = 0,
	MatchmakingRankedMode_Unranked = 1,
	MatchmakingRankedMode_Any = 2
}

struct MatchmakingRankedRule {
	string MinFitThreshold;
}

struct MatchmakingRuleString {
	string Value;
	MatchmakingPlatform Platform;
	string[] Licenses;
	bool UseOnlyIfEmpty;
}

class MatchmakingSession : DataContainer {
	MatchmakingSessionMode Mode;
	uint32 DurationMs;
	MatchmakingCriteria Criteria;
	MatchmakingCreateGameParameters CreateGameParams;
	MatchmakingSession OnNotFound;
	MatchmakingModifier[] Modifiers;
}

enum MatchmakingSessionMode {
	MatchmakingSessionMode_FindDedicatedServer = 0,
	MatchmakingSessionMode_ResetDedicatedServer = 1,
	MatchmakingSessionMode_FindPeerGame = 2,
	MatchmakingSessionMode_CreatePeerGame = 3,
	MatchmakingSessionMode_Invalid = 4
}

struct MatchmakingSizeConfiguration {
	MatchmakingPlatform Platform;
	string[] Settings;
	uint32 DesiredPlayerCount;
	uint32 MinPlayerCount;
	uint32 MaxPlayerCapacity;
	string MinFitThreshold;
}

struct MatchmakingSizeRule {
	string Setting;
	MatchmakingSizeConfiguration[] Configurations;
}

struct MatchmakingUserExtendedDataRule {
	string Rule;
	string MinFitThresHold;
}

enum MatchmakingVirtualizationMode {
	MatchmakingVirtualizationMode_Virtualized = 0,
	MatchmakingVirtualizationMode_Standard = 1,
	MatchmakingVirtualizationMode_Any = 2
}

struct MatchmakingVirtualizedRule {
	string MinFitThreshold;
	MatchmakingVirtualizationMode VirtualizationMode;
}

class MaterialContainerAsset : Asset {
	MaterialContainerPair[] MaterialPairs;
	string[] MaterialNames;
}

class MaterialContainerPair : DataContainer {
	uint32 FlagsAndIndex;
	int8 PhysicsPropertyIndex;
	int8 PhysicsMaterialIndex;
}

class MaterialGridData : Asset {
	MaterialContainerPair DefaultMaterial;
	MaterialContainerPair[] MaterialPairs;
	uint32[] MaterialIndexMap;
	uint32 DefaultMaterialIndex;
	MaterialRelationPropertyPair[] MaterialProperties;
	MaterialInteractionGridRow[] InteractionGrid;
}

struct MaterialInteractionGridRow {
	MaterialRelationPropertyPair[] Items;
}

class MaterialPropertyEffectData : PhysicsMaterialRelationPropertyData {
	EffectBlueprint[] ImpactEffects;
}

class MaterialPropertyHealthData : PhysicsPropertyRelationPropertyData {
	float Health;
}

class MaterialPropertyImpulseData : PhysicsPropertyRelationPropertyData {
	float ImpulseAbsorptionMultiplier;
}

class MaterialPropertyPhysicsData : PhysicsMaterialRelationPropertyData {
	float DynamicFrictionModifier;
	float StaticFrictionModifier;
	float RestitutionModifier;
	float Resistance;
}

class MaterialPropertySoundData : PhysicsMaterialRelationPropertyData {
	SoundAsset ImpactSound;
	SoundAsset ScrapeSound;
	float ScrapeLength;
	MaterialSoldierSoundSettings SoldierSettings;
	float Softness;
	float MaterialSoundId;
}

class MaterialPropertyTerrainData : PhysicsMaterialRelationPropertyData {
	Vec3 DirtTriggerColor;
	EffectBlueprint DestructionEffect;
	float DirtTriggerFactor;
}

class MaterialRelationDamageData : PhysicsPropertyRelationPropertyData {
	float CollisionDamageMultiplier;
	float CollisionDamageThreshold;
	float DamageProtectionMultiplier;
	float DamagePenetrationMultiplier;
	float DamageProtectionThreshold;
	float ExplosionCoverDamageModifier;
	bool InflictsDemolitionDamage;
}

class MaterialRelationDecalData : PhysicsMaterialRelationPropertyData {
	DecalTemplateData Decal;
}

class MaterialRelationEffectData : PhysicsMaterialRelationPropertyData {
	EffectBlueprint[] ImpactEffects;
	ObjectBlueprint[] ImpactDebris;
	float ImpactEffectMaxSpreadAngle;
	bool MirrorImpactDirection;
}

class MaterialRelationPenetrationData : PhysicsPropertyRelationPropertyData {
	bool NeverPenetrate;
}

class MaterialRelationPropertyData : DataContainer {
}

struct MaterialRelationPropertyPair {
	PhysicsMaterialRelationPropertyData[] PhysicsMaterialProperties;
	PhysicsPropertyRelationPropertyData[] PhysicsPropertyProperties;
}

class MaterialRelationSoundData : PhysicsMaterialRelationPropertyData {
	SoundAsset ImpactSound;
	SoundAsset ScrapeSound;
	float ScrapeLength;
}

class MaterialRelationTerrainDestructionData : PhysicsPropertyRelationPropertyData {
	float Width;
	float Depth;
}

class MaterialRelationVehicleData : PhysicsMaterialRelationPropertyData {
	EffectBlueprint ChassiEffect;
	EffectBlueprint TrackEffect;
	EffectBlueprint WheelEffect;
	EffectBlueprint GroundEffect;
}

class MaterialSoldierSoundSettings : DataContainer {
	SoundAsset FootStepSound;
	SoundAsset ProneSound;
	SoundAsset LandSound;
}

enum MathOp {
	MathOp_Add = 0,
	MathOp_Subtract = 1,
	MathOp_Multiply = 2,
	MathOp_Divide = 3,
	MathOp_Min = 4,
	MathOp_Max = 5
}

class MathOpEntityData : EntityData {
	Realm Realm;
	MathOp[] Operators;
}

class MatrixPannerNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort FrontLeft;
	AudioGraphNodePort Center;
	AudioGraphNodePort FrontRight;
	AudioGraphNodePort RearLeft;
	AudioGraphNodePort Lfe;
	AudioGraphNodePort RearRight;
	AudioGraphNodePort FarRearLeft;
	AudioGraphNodePort FarRearRight;
	AudioGraphNodePort Out;
}

class MaxInstancesScopeStrategyData : SoundScopeStrategyData {
	uint32 Count;
	bool KeepOldest;
}

class MedicBagEntityData : ExplosionPackEntityData {
	HealerData Healer;
}

class MedicBagHealingSphereEntityData : ExplosionPackEntityData {
	HealingSphereData Healer;
}

class MedicBagHealingSphereWeaponData : WeaponData {
	HealingSphereData Healer;
	float HealthPointsRefillSpeed;
	float HealthPointsPerBag;
}

class MedicBagWeaponData : WeaponData {
	HealerData Healer;
	float HealthPointsRefillSpeed;
	float HealthPointsPerBag;
}

class MedkitWeaponData : WeaponData {
}

class MeleeEntityCommonData : Asset {
	CharacterMeleeBinding MeleeBinding;
	CharacterMeleeCommonBinding MeleeCommonBinding;
	float TriggerDelay;
	float DefendWindow;
	float KillDelay;
	float MeleeEndDelay;
	float InvalidMeleeAttackZone;
	float MeleeAttackDistance;
	float MaxAttackHeightDifference;
	float KillDamage;
	AntEnumeration ProneAttackType;
	AntEnumeration CrouchAttackType;
	bool EnableAbortPossibility;
}

class MeleeEntityData : EntityData {
	MeleeEntityCommonData CommonData;
}

class MeleeTriggerEntityData : EntityData {
	LinearTransform ConnectTransform;
	AntEnumeration MeleeType;
	bool MeleeEnabled;
}

class MeleeWeaponData : WeaponData {
	bool UseCannedAnimation;
	bool UseSphereDamage;
}

class MemoryLevelDescriptionComponent : LevelDescriptionComponent {
	int32 TexturePoolSize;
	int32 TexturePoolSizeXenon;
	int32 TexturePoolSizePs3;
	int32 MeshPoolSizePs3;
	int32 MeshPoolSizePs3Cell;
	int32 MeshPoolSizeXenon;
}

class MenuConfigAsset : Asset {
}

class MenuIdAsset : Asset {
	string ShortName;
}

enum MenuResponse {
	ResponseOk = 0,
	ResponseCancel = 1,
	ResponseSquare = 2,
	ResponseCount = 3
}

class MeshAsset : Asset {
	MeshLodGroup LodGroup;
	float LodScale;
	float CullScale;
	uint32 NameHash;
	EnlightenType EnlightenType;
	MeshMaterial[] Materials;
	bool OccluderHighPriority;
	bool StreamingEnable;
	bool DestructionMaterialEnable;
	bool OccluderMeshEnable;
}

class MeshComponentData : ComponentData {
	BoneFakePhysicsData[] BoneFakePhysics;
	MeshAsset Mesh;
	SkeletonAsset Skeleton;
}

enum MeshHandleFlags {
	InvalidMeshHandle = 0
}

enum MeshLimits {
	MaxMeshLodCount = 5
}

class MeshLodGroup : Asset {
	float Lod1Distance;
	float Lod2Distance;
	float Lod3Distance;
	float Lod4Distance;
	float Lod5Distance;
	float ShadowDistance;
	float CullScreenArea;
}

class MeshMaterial : DataContainer {
	SurfaceShaderInstanceData ShaderInstance;
	SurfaceShaderInstanceDataStruct Shader;
}

class MeshMaterialVariation : DataContainer {
	SurfaceShaderInstanceDataStruct Shader;
}

class MeshMergingSettings : DataContainer {
	int32 StatsSeedIndex;
	int32 StatsLodIndex;
	uint32 TextureAtlasWidth;
	bool DrawStatsEnable;
	bool DrawDebugTexturesEnable;
	bool VirtualTextureArrayStreamingEnable;
	bool Enable;
	bool TextureAtlasMergeEnable;
	bool ClearMergeReport;
}

class MeshProjectileEntityData : ProjectileEntityData {
	Vec3 InitialAngularVelocity;
	EffectBlueprint TrailEffect;
	MeshAsset Mesh;
	float MaxAttachableInclination;
	bool ExtraDamping;
	bool IsAttachable;
}

class MeshProxyEntityData : SpatialEntityData {
	MeshAsset Mesh;
	LinearTransform[] BasePoseTransforms;
}

enum MeshScatteringElevationMode {
	MeshScatteringElevationMode_SnapBoundingBox = 0,
	MeshScatteringElevationMode_SnapPivotPoint = 1
}

enum MeshScatteringInstanceDataMode {
	MeshScatteringInstanceDataMode_None = 0,
	MeshScatteringInstanceDataMode_Normal = 1,
	MeshScatteringInstanceDataMode_NormalAndColor = 2
}

struct MeshScatteringMaskScaleDrawMethodData {
}

enum MeshScatteringOrientationMode {
	MeshScatteringOrientationMode_Horizontal = 0,
	MeshScatteringOrientationMode_LeanToTerrain = 1,
	MeshScatteringOrientationMode_SkewToTerrain = 2
}

enum MeshScatteringRotationMode {
	MeshScatteringRotationMode_Random = 0,
	MeshScatteringRotationMode_TowardsSlope = 1,
	MeshScatteringRotationMode_Fixed = 2
}

class MeshSettings : DataContainer {
	string OverrideShadersShaderName;
	string OverrideShadersMeshName;
	int32 ForceLod;
	float GlobalLodScale;
	float ShadowDistanceScale;
	bool LoadingEnabled;
}

class MeshStreamingSettings : DataContainer {
	uint32 DefragTransferLimit;
	uint32 ListViewPageIndex;
	uint32 PoolSize;
	int32 ForceLod;
	uint32 PoolHeadroomSize;
	uint32 ListViewSortOrder;
	uint32 Ps3CellDefragTransferLimit;
	uint32 XenonFinalPoolSizeAdjustment;
	uint32 MaxUnloadCountPerFrame;
	uint32 XenonRetailPoolSizeAdjustment;
	uint32 MaxPendingLoadCount;
	uint32 Ps3CellPoolSize;
	uint32 Ps3CellPoolHeadroomSize;
	bool InstantUnloadingEnable;
	bool AsyncCreatesEnable;
	bool DxImmutableUsageEnable;
	bool OverridePoolSizes;
	bool UseSlowTexturePrio;
	bool UpdateEnable;
	bool DynamicLoadingEnable;
	bool PriorityJobEnable;
	bool PrioritySpuJobEnable;
	bool UpdateJobEnable;
	bool DefragTransfersEnable;
	bool PrioritizeVisibleMeshesFirstEnable;
	bool PrioritizeVisibleLodsFirstEnable;
	bool PrioritizeVisibleLoadsEnable;
	bool PrioritizeTexturesEnable;
	bool HighestPriorityEnable;
	bool PrioritizeNearestPointEnable;
	bool DrawInstanceBoxesEnable;
	bool DrawStatsEnable;
	bool DrawMissingListEnable;
	bool DrawPriorityListEnable;
	bool DrawLoadingListEnable;
	bool DrawMeshListEnable;
	bool DrawNonStreamedListEnable;
	bool DefragEnable;
	bool Enable;
	bool DumpLoadedList;
	bool UseConditionalStreaming;
}

enum MeshSubsetCategory {
	MeshSubsetCategory_Opaque = 0,
	MeshSubsetCategory_Transparent = 1,
	MeshSubsetCategory_TransparentDecal = 2,
	MeshSubsetCategory_ZOnly = 3,
	MeshSubsetCategoryCount = 4
}

enum MeshSubsetCategoryFlags {
	MeshSubsetCategoryFlags_Opaque = 1,
	MeshSubsetCategoryFlags_Transparent = 2,
	MeshSubsetCategoryFlags_TransparentDecal = 4,
	MeshSubsetCategoryFlags_Normal = 7,
	MeshSubsetCategoryFlags_ZOnly = 8,
	MeshSubsetCategoryFlags_DynamicEnvmap = 16,
	MeshSubsetCategoryFlags_PlanarReflection = 32,
	MeshSubsetCategoryFlags_All = 63
}

enum MeshType {
	MeshType_Rigid = 0,
	MeshType_Skinned = 1,
	MeshType_Composite = 2
}

class MeshVariationDatabase : Asset {
	MeshVariationDatabaseEntry[] Entries;
	MeshVariationDatabaseEntry[] RedirectEntries;
}

class MeshVariationDatabaseEntry : DataContainer {
	MeshAsset Mesh;
	uint32 VariationAssetNameHash;
	MeshVariationDatabaseMaterial[] Materials;
}

struct MeshVariationDatabaseMaterial {
	MeshMaterial Material;
	MeshMaterialVariation MaterialVariation;
	TextureShaderParameter[] TextureParameters;
}

struct MeshVariationInfo {
	MeshAsset MeshAsset;
	MeshAsset OrigMeshAsset;
	ObjectVariation VariationAsset;
}

class MessageEntityData : EntityData {
	string MessageSid;
	MessageLineData[] AdditionalMessages;
	UIMessageEntityType MessageType;
	float DisplayTime;
	EntryInputActionEnum EntryInputAction;
	bool Enabled;
}

struct MessageInfo {
	string RowTypeName;
	uint32 MessageQueueSize;
	float NormalMessageTime;
	float ShortMessageTime;
}

struct MessageLineData {
	string MessageSid;
	EntryInputActionEnum EntryInputAction;
}

enum MessageReciever {
	MrAll = 0,
	MrTeam = 1,
	MrTeamAndSquad = 2,
	MrPlayer = 3
}

class MetricAggregate : MetricEvent {
}

class MetricEvent : DataContainer {
	uint64 Owner;
}

class MetricReport : DataContainer {
	MetricEvent[] Events;
}

class MetricState : MetricEvent {
	bool IsSet;
}

class Minimap2DEntityData : GameEntityData {
	Vec3 CameraTransform;
	uint32 ImageHeight;
	uint32 ImageWidth;
	uint32 AntialiasMultiplier;
	uint32 TerrainHeight;
	uint32 Fov;
}

struct MinimapCameraOffsetData {
	Vec2 Position;
	float CameraFov;
}

struct MinimapData {
	Vec2 Position;
	Vec3 CameraPosition;
	Vec2 Size;
	Vec3 OverlayColor;
	float AnchorPosVertical;
	float AnchorPosHorizontal;
	float CameraLookDistance;
	float CameraDistance;
	float CameraFov;
	float OverlayAlpha;
	float CameraRotation;
	int32 StartZoomLevel;
	int32 InnerZoomFactor;
	int32 MaxZoomLevels;
	bool CenterOnCombatArea;
	bool RotationFromPlayer;
	bool PositionFromPlayer;
}

enum MinimapIconInteractionConcept {
	MinimapIconInteractionConcept_None = 0,
	MinimapIconInteractionConcept_SelectSpawnPoint = 1,
	MinimapIconInteractionConcept_RemoveOrder = 2,
	MinimapIconInteractionConcept_AttackDefendCapturePoint = 3
}

class MinMaxNodeData : AudioGraphNodeData {
	AudioGraphNodePort X;
	AudioGraphNodePort Y;
	AudioGraphNodePort Max;
	AudioGraphNodePort Min;
}

class MinMaxValueSelectorEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Input;
}

class MinMaxValueSelectorNodeData : AudioGraphNodeData {
	MinMaxValueSelectorEntry[] Inputs;
	AudioGraphNodePort MaxValue;
	AudioGraphNodePort MaxIndex;
	AudioGraphNodePort MinValue;
	AudioGraphNodePort MinIndex;
}

enum MipmapFilterMode {
	MipmapFilterMode_Box = 0,
	MipmapFilterMode_Renormalize = 1,
	MipmapFilterMode_Poisson13 = 2,
	MipmapFilterMode_Poisson13Clamped = 3
}

class MissileEntityData : MeshProjectileEntityData {
	float Gravity;
	EffectBlueprint EngineEffect;
	ExplosionEntityData DudExplosion;
	SoundAsset FlyBySound;
	float EngineStrength;
	float MaxSpeed;
	float EngineTimeToIgnition;
	float EngineTimeToLive;
	float TimeToActivateGuidingSystem;
	float TimeToArm;
	float MaxTurnAngle;
	float Drag;
	NearTargetDetonationData NearTargetDetonation;
	TeamId DefaultTeam;
	float FlyBySoundRadius;
	float FlyBySoundSpeed;
	float ImpactImpulse;
	float Damage;
	MissileUnguidedData UnguidedData;
	WarnTarget WarnTarget;
	MissileLockableInfoData LockableInfo;
	LockingControllerData LockingController;
	bool WarnOnPointingMissile;
	bool ApplyGravityWhenGuided;
}

struct MissileLockableInfoData {
	float HeatSignature;
	float RadarSignature;
}

struct MissileUnguidedData {
	Vec2 StaticPosition;
	Vec2 TargetPositionOffset;
	bool UseTargetPosition;
	bool UseStaticPosition;
}

class MissionObjectiveHudData : DataContainer {
	Vec3 CameraPosition;
	Vec2 HorizontalBoundaries;
	Vec2 VerticalBoundaries;
	float CameraRotation;
	float CameraFov;
	float CameraLookDistance;
	float CameraDistance;
}

class MixerAsset : Asset {
	MixerGraphData Graph;
	MixerPreset[] Presets;
	MixerPreset DefaultPreset;
}

class MixerEntityData : EntityData {
	MixerAsset Mixer;
	bool ActivateOnCreation;
}

class MixerEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort In;
	AudioGraphNodePort Amplitude;
	SoundGraphPluginRef Plugin;
}

class MixerGraphData : AudioGraphData {
	AudioGraphParameter[] Inputs;
	MixerValueAccumulateMode[] AccumulateModes;
	AudioGraphParameter[] Outputs;
}

class MixerInputEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Out;
	AudioGraphParameter Source;
	MixerValueAccumulateMode AccumulateMode;
}

class MixerInputNodeData : AudioGraphNodeData {
	MixerInputEntry[] Entries;
}

class MixerNodeData : AudioGraphNodeData {
	MixerEntry[] Entries;
	AudioGraphNodePort Out;
}

class MixerOutputEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort In;
	AudioGraphParameter Target;
}

class MixerOutputNodeData : AudioGraphNodeData {
	MixerOutputEntry[] Entries;
}

class MixerPreset : DataContainer {
	uint32 NameHash;
	MixerPresetGroupData[] Groups;
	MixerPresetNodeData[] Nodes;
}

struct MixerPresetGroupData {
	MixGroup Group;
	MixGroupState State;
	float AttackTime;
	float ReleaseTime;
	MixGroupPropertyValue[] Properties;
	bool IsDominant;
}

struct MixerPresetNodeData {
	AudioGraphNodeData Node;
	float Value;
}

class MixerReceiveEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Out;
	AudioGraphParameter Source;
	MixerAsset Mixer;
}

class MixerReceiveNodeData : AudioGraphNodeData {
	MixerReceiveEntry[] Entries;
}

class MixerSendEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort In;
	AudioGraphParameter Target;
	MixerAsset Mixer;
}

class MixerSendNodeData : AudioGraphNodeData {
	MixerSendEntry[] Entries;
}

class MixerSetPropertyEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort In;
	uint32 Target;
	MixGroup Group;
	float AttackTime;
	float ReleaseTime;
}

class MixerSetPropertyNodeData : AudioGraphNodeData {
	MixerSetPropertyEntry[] Entries;
}

class MixerSimplePresetNodeData : AudioGraphNodeData {
	AudioGraphNodePort Index;
	MixerPreset[] Presets;
}

class MixerSystemAsset : Asset {
	MixGroup[] Groups;
}

enum MixerValueAccumulateMode {
	MixerValueAccumulateMode_None = 0,
	MixerValueAccumulateMode_Min = 1,
	MixerValueAccumulateMode_Max = 2
}

class MixerValueNodeData : AudioGraphNodeData {
	AudioGraphNodePort Out;
	float DefaultValue;
}

enum MixerValueUI {
	MixerValueUI_None = 0,
	MixerValueUI_Fader = 1,
	MixerValueUI_Knob = 2,
	MixerValueUI_EditBox = 3
}

enum MixerValueUIOrientation {
	MixerValueUIOrientation_Horizontal = 0,
	MixerValueUIOrientation_Vertical = 1
}

enum MixerValueUIScale {
	MixerValueUIScale_Linear = 0,
	MixerValueUIScale_Logarithmic = 1
}

class MixGroup : DataContainer {
	string Name;
	uint16 GroupIndex;
	uint16 ParentGroupIndex;
}

enum MixGroupPropertyType {
	MixGroupPropertyType_Gain = 0,
	MixGroupPropertyType_Pitch = 1,
	MixGroupPropertyTypeCount = 2
}

struct MixGroupPropertyValue {
	uint32 Property;
	float Value;
}

enum MixGroupState {
	MixGroupState_Normal = 0,
	MixGroupState_Mute = 1,
	MixGroupState_Solo = 2
}

class MobileSpawnComponentData : ComponentData {
	float ParachuteSpawnRadiusMin;
	float ParachuteSpawnDistance;
	string NameSid;
	float ParachuteSpawnRadiusMax;
	bool EnterMobileSpawnPoint;
}

class MobilityData : DataContainer {
	float MaxSpeed;
	bool Use3DWaypoints;
}

class ModelAnimationEntityData : EntityData {
	LinearTransform AnimationEntitySpace;
	GameplayBones BoneToPlace;
	Realm Realm;
	ModelAnimationTransformType ModelAnimationTransformType;
	int32 InstanceSeed;
	string DefaultAnimation;
	int32 AnimationIndex;
	AntAnimationSetAsset AnimationSet;
	float ExternalTime;
	string RootMeshBoneName;
	ModelAnimationUpdateOrder JointWorldTransformUpdateOrder;
	string ConnectBoneName;
	int32[] JointOutputPropertyIds;
	string TrajectoryBoneName;
	bool AnimationEntitySpaceActive;
	bool PlayFirstFrame;
	bool Looping;
	bool EnableJointWorldTransformOutput;
	bool ResetAfterStop;
	bool AutoStart;
	bool ShowDebugTransforms;
	bool ApplyRotationCompensation;
	bool ApplyPreTransformation;
	bool DisableCulling;
}

enum ModelAnimationTransformType {
	ModelAnimationTransformType_World = 0,
	ModelAnimationTransformType_Model = 1,
	ModelAnimationTransformType_Local = 2
}

enum ModelAnimationUpdateOrder {
	ModelAnimationUpdateOrder_PostAnimation = 0,
	ModelAnimationUpdateOrder_PreInput = 1,
	ModelAnimationUpdateOrder_PreFrame = 1
}

enum ModifierAxis {
	maLeft = 0,
	maUp = 1,
	maForward = 2
}

enum ModifierEuler {
	Roll = 0,
	Pitch = 1,
	Yaw = 2,
	Trans = 3
}

class MortarStrikeWeaponData : WeaponData {
	float HoldingTolerance;
	float MaxStrikeDistance;
	float StrikeRadius;
	float MaxRandomSpawnHeight;
}

class MotionBlurComponentData : ComponentData {
	Realm Realm;
	float CutoffGradientScale;
	float MotionBlurCutoffRadius;
	bool MotionBlurEnable;
}

class MotionControllerInputActionData : AxesInputActionData {
	InputDeviceMotionControllerButtons Button;
}

class MotionDampingData : DataContainer {
	Vec3 LinearModifier;
	float Pitch;
	float Yaw;
	float Roll;
	float Linear;
}

class MotorbikeData : DataContainer {
	Vec3 WheelieForceBodyOffset;
	Vec3 WheelieForce;
	Vec3 DampBigJumpImpactCounterForce;
	Vec3 ProximityExtScale;
	float JumpForwardLeanMinAngle;
	float JumpForwardLeanMomentum;
	float KickstandRoll;
	float KickstandLinearDamping;
	float LeanForceMaxVel;
	float CounterLeanForce;
	float StandStillRoll;
	float DampBigJumpImpactVelocity;
	float YawBrakeDampingLerpStartScale;
	float YawBrakeDampingLerpEndScale;
	float StoppieActivationVelocity;
	float StoppieStartVelocity;
	float LeanForce;
	float StoppieMomentum;
	float ShortOffgroundGravityMultiplier;
	float MaxLeaningRoll;
	float StoppieStopVelocity;
	float ProximityHeightTranslation;
	float WheelieMaxNoDownForceContactTime;
	float WheelieMaxNoContactTime;
	float WheelieSteeringFactor;
	float WheelieInertia;
	float WheelieStartVelocity;
	float WheelieMaxVelocityUndamped;
	float WheelieMaxVelocityDampRange;
	float WheelieOutAngularMomentum;
	float WheelieSpringDamping;
	float WheelieAngularDamping;
	float WheelieAngularDampingSpeed;
	float ShortOffgroundPeriod;
	float WheelieMaxAngle;
	float WheelieAngularStartMomentum;
	float WheelieMaxVelocity;
	float WheelieVelocityForceScale;
	bool DampBigJumpImpact;
}

class MouseInputActionData : AxesInputActionData {
	InputDeviceMouseButtons Button;
	bool SimulateJoystickAxis;
	bool RememberExcessInput;
	bool ScaleScrollWheelAxisInput;
}

class MovementActionData : DataContainer {
}

class MovementActionGroupData : MovementActionData {
	MovementActionData[] Actions;
	bool RunSimultaneously;
	bool RestartChildren;
}

class MovementActionRandomizerData : MovementActionData {
	MovementActionData[] Actions;
	bool ReinsertIntoRandomizedListAfterUse;
}

class MovementActionRoot : Asset {
	MovementActionData StartSequence;
}

struct MovementComponentBinding {
	AntRef AnimationControlled;
}

class MovementComponentData : ComponentData {
	MovementComponentBinding MovementBinding;
}

class MovementConstantData : Asset {
	float MaxCrouchWalkDistance;
}

class MovieComponentData : ComponentData {
	MovieTextureAsset Movie;
	float ExternalTime;
	bool IsNormalMap;
}

class MovieEntityData : GameEntityData {
	MovieTextureAsset Movie;
	float ExternalTime;
	bool IsNormalMap;
}

class MovieTextureAsset : Asset {
	guid ChunkGuid;
	uint32 ChunkSize;
	guid SubtitleChunkGuid;
	uint32 SubtitleChunkSize;
	bool HasLocalizedAudioTracks;
	bool OverrideBackgroundMusic;
}

class MovieTextureSettings : DataContainer {
	bool Enable;
}

class MovingBodyData : DataContainer {
	float Mass;
	float Inertia;
}

struct MPModeData {
	int32 VehiclePoints;
}

class MultiCrossfaderGroup : AudioGraphNodePortGroup {
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Start;
	AudioGraphNodePort Stop;
	float FadeAmplitude;
	float FadeBegin;
	float FadeEnd;
	FaderType FadeType;
}

class MultiCrossfaderNodeData : AudioGraphNodeData {
	MultiCrossfaderGroup[] CrossfaderGroups;
	AudioGraphNodePort Start;
	AudioGraphNodePort Stop;
	AudioGraphNodePort Control;
	bool LockControlValue;
}

class MultipleActorScenarioEntityData : SpatialEntityData {
	LinearTransform WorldSpaceConnectTransform;
	int32 Actor5Part;
	AntRef ScenarioAntRef;
	int32 LevelChoice;
	int32 ScenarioChoice;
	Realm Realm;
	int32 Actor6Part;
	int32 Actor1;
	int32 Actor1Part;
	int32 Actor1SecondPart;
	int32 Actor2;
	int32 Actor2Part;
	int32 Actor2SecondPart;
	int32 Actor3;
	int32 Actor3Part;
	int32 Actor3SecondPart;
	int32 Actor4;
	int32 Actor4Part;
	int32 Actor4SecondPart;
	int32 Actor5;
	int32 Actor5SecondPart;
	int32 Actor6SecondPart;
	int32 Actor6;
	float ExternalTime;
	bool AligningEnabled;
	bool ScenarioActive;
	bool Actor1Prepared;
	bool Actor2Prepared;
	bool Actor3Prepared;
	bool Actor4Prepared;
	bool Actor5Prepared;
	bool Actor6Prepared;
	bool CheckActor1Finished;
	bool CheckActor2Finished;
	bool CheckActor3Finished;
	bool CheckActor4Finished;
	bool CheckActor5Finished;
	bool CheckActor6Finished;
	bool UseInputEventPlayerAsPlayer1;
	bool UseExternalTime;
	bool WorldSpace;
}

class MultipleTargetPainterWeaponData : WeaponData {
	SpottingType SpottingBehavior;
	float TimeObjectIsPainted;
	float Angle;
	float TimeObjectIsSpotted;
	float Range;
	bool UseSpotting;
	bool UseLaserPainting;
}

class MultipleTriggerEntityData : TriggerEventEntityData {
	int32 TriggerAmount;
}

struct NearTargetDetonationData {
	float DetonationRadius;
	float MinDetonationDelay;
	float MaxDetonationDelay;
	bool DetonateNearTarget;
}

struct NestedList {
	string Label;
	string Index;
	UIDataSourceInfo ListDataSource;
	UIDataSourceInfo DynamicShowList;
	string[] StaticItems;
	DefaultSelectionItem DefaultHighlighted;
	UIListRowType RowType;
	bool UseAsNormalListRows;
	bool HiddenOnPC;
	bool HiddenOnXenon;
	bool HighLightOnUpdate;
}

class NetworkableLoosePartPhysicsData : LoosePartPhysicsData {
	bool Networked;
}

struct NetworkDataId {
	uint32 Value;
}

class NetworkPerformanceEvent : MetricEvent {
	uint32 Received;
	uint32 Sent;
	float ReceivedAverage;
	float SentAverage;
	guid PerformanceLink;
}

class NetworkSettings : DataContainer {
	uint32 ProtocolVersion;
	string TitleId;
	uint32 ClientPort;
	uint32 ServerPort;
	uint32 MaxGhostCount;
	uint32 MaxClientCount;
	uint32 MaxClientFrameSize;
	uint32 MaxServerFrameSize;
	string XlspAddress;
	string ServerAddress;
	string ClientConnectionDebugFilePrefix;
	string ServerConnectionDebugFilePrefix;
	float TimeNudgeGhostFrequencyFactor;
	float TimeNudgeBias;
	float ConnectTimeout;
	bool UseFrameManager;
	bool TimeSyncEnabled;
	bool IncrementServerPortOnFail;
}

struct NetworkVoteDetails {
	uint32 Issuer;
	bool Personal;
	int8 VoteId;
}

class NFSUIListDataBinding : UIDataBinding {
	UIDataSourceInfo Refresh;
	UIListItem[] Items;
}

class NoiseTextureAsset : TextureBaseAsset {
}

struct NormalizeSettings {
	float Maximum;
	float Minimum;
	float Velocity;
	float Lower;
	float Upper;
	bool Normalize;
}

class NotEntityData : EntityData {
	Realm Realm;
	bool In;
}

enum NotifyType {
	NotifyPersonal = 0,
	NotifyGeneral = 1,
	NotifyConsole = 2,
	NotityTooltip = 3,
	NotifyCount = 4
}

enum NumberGeneratorMode {
	NumberGeneratorMode_RandomUniform = 0
}

class NumberGeneratorNodeData : AudioGraphNodeData {
	AudioGraphNodePort Trigger;
	float Min;
	float Max;
	NumberGeneratorMode Mode;
	AudioGraphNodePort Y;
}

class OBBData : BaseShapeData {
	LinearTransform Transform;
	Vec3 HalfExtents;
}

class ObjectBlueprint : Blueprint {
	GameObjectData Object;
}

class ObjectEnterAreaTriggerEntityData : EntityData {
	Realm Realm;
	UpdatePass UpdatePass;
	bool AutoStart;
}

class ObjectiveEntityData : GameEntityData {
	string ObjectiveBriefSid;
	string ObjectiveSid;
	MissionObjectiveHudData HudData;
	ObjectiveType ObjectiveType;
	float DisplayTime;
	float DelayTime;
	SquadId SquadId;
	TeamId TeamId;
	string SuccessSid;
	MessageReciever Reciever;
	bool RetriggerSuccessOnShowObjective;
	bool Tutorial;
	bool DisplaySuccess;
}

enum ObjectiveType {
	OTPrimary = 0,
	OTTactical = 1,
	OTChildMisson = 2
}

class ObjectVariation : Asset {
	uint32 NameHash;
}

class ObjectVariationSwitchEntityData : EntityData {
	ObjectVariation Variation1;
	ObjectVariation Variation2;
}

class OccluderMeshEntityData : SpatialEntityData {
	RigidMeshAsset Mesh;
}

class OccluderVolumeEntityData : SpatialEntityData {
	bool OccluderHighPriority;
}

class OcclusionSettings : DataContainer {
	bool Enable;
	bool DrawZbuffer;
	bool DrawBinaryBuffer;
}

class OneOptionAxisEditableAction : EditableAction {
	string Header;
	bool Invert;
}

class OneOptionButtonEditableAction : EditableAction {
	string Header;
}

class OnGroundStateData : CharacterStateData {
	float JumpDelay;
	float JumpStaminaPenalty;
	float AllowedDistanceFromGround;
	bool GroundHugging;
	bool LimitDownwardVelocity;
}

class OnlineConfiguration : Asset {
	BackendType Backend;
	OnlineProviderAsset Provider;
	RichPresenceData RichPresence;
	ChatSettings Chat;
}

enum OnlineEnvironment {
	OnlineEnvironment_Development = 0,
	OnlineEnvironment_Test = 1,
	OnlineEnvironment_Certification = 2,
	OnlineEnvironment_Production = 3,
	OnlineEnvironment_Count = 4
}

struct OnlineEnvironmentConsoleUrl {
	OnlineEnvironmentConsoleUrlData[] Urls;
}

struct OnlineEnvironmentConsoleUrlData {
	GamePlatform Platform;
	OnlineEnvironmentUrl Url;
}

struct OnlineEnvironmentUrl {
	OnlineEnvironmentUrlData[] Urls;
}

struct OnlineEnvironmentUrlData {
	string Url;
	OnlineEnvironment Environment;
}

struct OnlinePlatformConfiguration {
	GamePlatform Platform;
	OnlineServicesAsset Services;
	PresenceBackendData[] ClientBackends;
	ServerBackendData[] ServerBackends;
	bool IsFallback;
}

class OnlineProviderAsset : Asset {
	OnlineProviderConfiguration[] Configurations;
}

struct OnlineProviderConfiguration {
	GamePlatform Platform;
	string Client;
	string ServiceName;
	string SKU;
	string Version;
	uint32 ServerSocketPacketSize;
	bool IsServer;
}

class OnlineServicesAsset : Asset {
	PresenceServiceData[] OnlineServices;
}

class OnlineSettings : SystemSettings {
	BackendType Backend;
	BackendType PeerBackend;
	OnlineEnvironment Environment;
	string MatchmakingToken;
	OnlineProviderAsset Provider;
	RichPresenceData RichPresence;
	ChatSettings ChatSettings;
	string MatchmakingOptions;
	string Region;
	uint32 NegativeUserCacheRefreshPeriod;
	string MatchmakingMode;
	string Country;
	bool IsSecure;
	bool SupportHostMigration;
	bool MatchmakeImmediately;
}

class OperandLogicNode : UINodeData {
	UIDataSourceInfo LeftDataSourceInfo;
	UILogicOperator Operator;
	UIDataSourceInfo RightDataSourceInfo;
	double RightLiteralOperand;
	UINodePort In;
	UINodePort True;
	UINodePort False;
}

class Or4EntityData : EntityData {
	Realm Realm;
	bool In1;
	bool In2;
	bool In3;
	bool In4;
}

class OrderBonusScoringHandlerData : ScoringHandlerData {
}

class OrderEntityData : EntityData {
	string DebugName;
	float IssueOrderDelay;
	float OnCompleteTimeOut;
	float OnFailedTimeOut;
	ReadinessLevel ReadinessOnStart;
	bool Enabled;
}

class OrderReadiness : UrgencyUserData {
	string OrderType;
	ReadinessState MinimumReadiness;
}

class OrderSettings : Asset {
	OrderReadiness[] Orders;
}

enum OrderType {
	OrderType_None = 0,
	OrderType_RequestHeal = 1,
	OrderType_LetMeHeal = 2,
	OrderType_RequestAmmo = 3,
	OrderType_LetMeGiveAmmo = 4,
	OrderType_LetMeRepair = 5,
	OrderType_RequestRepair = 6,
	OrderType_RequestRide = 7,
	OrderType_GoGoGo = 8,
	OrderType_FollowMe = 9,
	OrderType_Negative = 10,
	OrderType_Sorry = 11,
	OrderType_ThankYou = 12,
	OrderType_RogerThat = 13,
	OrderType_NeedBackup = 14,
	OrderType_GetIn = 15,
	OrderType_GetOut = 16,
	OrderType_Attack = 17,
	OrderType_Count = 18
}

class OrEntityData : EntityData {
	Realm Realm;
	bool In1;
	bool In2;
}

class OrientationNodeData : AudioGraphNodeData {
	AudioGraphNodePort ListenerRelativeYaw;
	AudioGraphNodePort ListenerRelativePitch;
	AudioGraphNodePort ListenerRelativeRoll;
}

class OutdoorLightComponentData : ComponentData {
	Vec3 SunColor;
	Vec2 CloudShadowSpeed;
	Vec3 SkyColor;
	Vec3 GroundColor;
	float SunRotationY;
	float SunRotationX;
	Realm Realm;
	float SkyLightAngleFactor;
	float SunSpecularScale;
	float SkyEnvmapShadowScale;
	float SunShadowHeightScale;
	float CloudShadowCoverage;
	TextureAsset CloudShadowTexture;
	float TranslucencyDistortion;
	float CloudShadowSize;
	float TranslucencyAmbient;
	float CloudShadowExponent;
	float TranslucencyScale;
	float TranslucencyPower;
	bool Enable;
	bool CloudShadowEnable;
}

class OutdoorLightEffectState : DataContainer {
	Vec3 SkyColor;
	Vec3 GroundColor;
	Vec3 SunColor;
	Vec2 CloudShadowSpeed;
	float SunRotationX;
	float SunRotationY;
	float SkyLightAngleFactor;
	float SunShadowHeightScale;
	TextureAsset CloudShadowTexture;
	float CloudShadowSize;
	float CloudShadowExponent;
	float CloudShadowCoverage;
	bool CloudShadowEnable;
	bool Enable;
}

class OutputNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort BypassHeadroom;
	float MinDistance;
	AudioCurve AttenuationCurve;
	float Gain;
	float HFDampingDistance;
	float HFDampingObstruction;
	float HFDampingOcclusion;
	SoundGraphPluginRef MainSendPlugin;
	SoundBusData MainSend;
	string OutputName;
	OutputTransformSource TransformSource;
	uint32 OutputNameHash;
	SoundGraphPluginRef LowPassPlugin;
	SoundGraphPluginRef VuPlugin;
	bool Solo;
	bool EnableHdr;
}

enum OutputTransformSource {
	OutputTransformSource_Sound = 0,
	OutputTransformSource_Listener = 1,
	OutputTransformSource_Output = 2
}

struct OverHeatData {
	float HeatPerBullet;
	float HeatDropPerSecond;
	float OverHeatPenaltyTime;
	float OverHeatThreshold;
	FireEffectData OverHeatEffect;
}

class PackagingCellData : EntityData {
	PackagingRule[] Rules;
	PackagingCellData[] Targets;
	Vec2[] Shape;
}

struct PackagingDetailInfo {
	int32 MipsToSkip;
	int32 LodsToSkip;
	bool IncludeAnimation;
	bool IncludeMeshes;
	bool IncludeSounds;
	bool IncludeTextures;
}

enum PackagingDetailLevel {
	PackagingDetailLevel_Low = 0,
	PackagingDetailLevel_Medium = 1,
	PackagingDetailLevel_High = 2,
	PackagingDetailLevel_Base = 3,
	PackagingDetailLevel_Count = 4
}

class PackagingRule : Asset {
	Vec3 DebugColor;
	bool CanTargetSelf;
}

class PadInputActionData : AxesInputActionData {
	InputDevicePadButtons Button;
	InputDevicePOVs Pov;
	InputDevicePadButtons PS3AlternativeButton;
	bool UseSquareInput;
}

class PadRumbleNodeData : AudioGraphNodeData {
	AudioGraphNodePort RumbleHigh;
	AudioGraphNodePort RumbleLow;
}

class ParachuteStateData : CharacterStateData {
	float DeployTime;
	float TerminalVelocity;
	float ForwardDragCoefficient;
	float AngleOfAttack;
	float BankOffset;
	float ThrottleOffset;
	float BrakeOffset;
	float MaxRollVelocity;
	float MaxPitchVelocity;
	float MaxYawVelocity;
}

class ParameterFilterLinearNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Out;
	AudioGraphNodePort AttackSpeed;
	AudioGraphNodePort ReleaseSpeed;
}

class ParameterFilterLpNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Out;
	AudioGraphNodePort Hz;
}

enum PartComponentConstants {
	MaxHealthStateCount = 256
}

class PartComponentData : ComponentData {
	HealthStateData[] HealthStates;
	PartLinkData[] PartLinks;
	bool IsSupported;
	bool IsFragile;
	bool IsNetworkable;
	bool IsWindow;
	bool AnimatePhysics;
}

struct PartInfoData {
	AxisAlignedBox Aabb;
	Vec3 Translation;
}

class PartLinkData : DataContainer {
	uint32 PartComponentIndex1;
	uint32 PartComponentIndex2;
}

struct PathfindingBlob {
	guid BlobId;
	uint32 BlobSize;
	uint32[] ChunkSizes;
}

class PathfindingBuildOrderData : VolumeVectorShapeData {
}

class PathfindingBuildSettingsAsset : Asset {
	float EntityRadius;
	float EntityHeight;
	float MaxWalkableSlope;
	float MaxStep;
	float MinIslandSurfaceArea;
	float VoxSize;
	float GridSideLength;
	float AdditionalInwardsSmoothingDist;
	uint32 TerrainSamplingStep;
	bool TesselateForPathingAccuracy;
	bool UseEnhancedTerrainTracking;
	bool OptimizeForAxisAligned;
	bool LeaveSmallIslandsTouchingPortals;
}

class PathfindingDebugSettings : DataContainer {
	int32 TypesToDrawMask;
	int32 TextOffsetY;
	int32 TextStartX;
	int32 TextStartY;
	PathfindingReplayMode ReplayMode;
	bool DrawConnections;
	bool DrawObstacles;
	bool DrawPolygonOutline;
	bool DrawFilledPolygons;
	bool DrawMemory;
	bool DrawStats;
	bool DrawTimings;
	bool OriginalPaths;
	bool RandomPositions;
	bool PotentialObstacles;
}

class PathfindingExclusionVolumeData : OBBData {
}

class PathfindingObjectCategoryAsset : Asset {
}

struct PathfindingObjectCategoryRepresentation {
	PathfindingObjectCategoryAsset Category;
	PathfindingRepresentation Representation;
}

enum PathfindingReplayMode {
	PathfindingReplayMode_Disabled = 0,
	PathfindingReplayMode_Binary = 1,
	PathfindingReplayMode_Text = 2
}

enum PathfindingRepresentation {
	PathfindingRepresentation_Ignore = 0,
	PathfindingRepresentation_WalkableMesh = 1,
	PathfindingRepresentation_ObstacleMesh = 2,
	PathfindingRepresentation_ObstacleMeshAndThinSideLink = 3,
	PathfindingRepresentation_BoundingBoxExclusion = 4
}

class PathfindingSandboxAsset : Asset {
	PathfindingSystemEntityData System;
}

enum PathfindingStreamAndConnect {
	PathfindingStreamAndConnect_Grid = 0,
	PathfindingStreamAndConnect_Manual = 1
}

class PathfindingSystemEntityData : EntityData {
	uint32[] PathfindingTypesOnLevel;
}

class PathfindingTypeAsset : Asset {
	uint32 Index;
}

class PathFollowingComponentData : ComponentData {
	float UpdatePathAtDistancePercent;
	uint32 PreferredPathfindingIndex;
	uint32[] AlternatePathfindingIndices;
	float MovementCorridorRadius;
}

class PatrolOrderEntityData : BFOrderEntityData {
	RouteType TypeOfRoute;
	CombatPatrolMode CombatMode;
	WaypointData StartingWaypoint;
	bool StartAtGeometricallyClosestWaypoint;
	bool UsePathFinding;
}

class PeakingIir2NodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Frequency;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort Q;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

struct PeerCreateGameParameters {
	MatchmakingCreateGameParameters Base;
	uint32 PlayerCapacity;
}

class PeerServerBackendData : ServerBackendData {
	PeerCreateGameParameters CreateParameters;
}

class PerformanceEvent : MetricEvent {
	Vec3 Position;
	float FreeCPUMemory;
	float CPUAverage;
	float AllocCPUMemory;
	float FreeGPUMemory;
	float GPUAverage;
	int32 DrawCallCount;
	int32 PrimitiveCount;
	float AllocGPUMemory;
	string PerformanceLocation;
	guid PerformanceLink;
}

struct PerformanceFpsHistogram {
	float Below5;
	float Below10;
	float Below15;
	float Below20;
	float Below25;
	float Below30;
	float Below60;
	float Above60;
}

enum PerformanceProfilePlatform {
	PPP_Win32 = 0,
	PPP_Xenon = 1,
	PPP_PS3 = 2
}

class PerformanceProfileState : MetricState {
	uint32 ProcessorCount;
	uint32 ProcessorCoreCount;
	uint32 ProcessorClock;
	uint32 TotalMemMB;
	uint32 GpuMemMB;
	string GraphicAdapterName;
	string Platform;
}

class PerformanceTrackerSettings : SystemSettings {
	float Interval;
	bool Enabled;
	bool SupressPerformanceStatsOnIdle;
	bool SupressPerformanceStatsUntilSpawned;
	bool JuiceLogPerformance;
}

class PersistenceConfiguration : Asset {
	StatCategoryTreeCollection StatCategoryTreeCollection;
	PlayerTypeProfile MPProfile;
	PlayerTypeProfile SPProfile;
	PlayerTypeProfile CoopProfile;
	PointSystemParamsAsset PointSystemParams;
	LicenseConfiguration LicenseConfig;
}

struct PersistenceConsumableMapping {
	ConsumableGroup Group;
}

class PersistenceData : AbstractPersistenceData {
	string PersistenceName;
	string ClubPersistenceName;
	PersistenceStatGroup ClientDefaultGroup;
	PersistentValueTemplateData[] Values;
	CustomReportValueData[] CustomReportValues;
	PersistenceStatGroup ServerDefaultGroup;
	PersistenceRetentionPolicy RetentionPolicy;
	PersistenceConsumableMapping[] ConsumableMappings;
	bool HistoryDaily;
	bool HistoryWeekly;
	bool HistoryMonthly;
	bool OutputProperties;
	bool DeltaGameReports;
}

class PersistenceGameData : Asset {
	Asset[] Assets;
}

enum PersistenceGameType {
	PersistenceGameType_Singleplayer = 0,
	PersistenceGameType_Cooperative = 1,
	PersistenceGameType_Multiplayer = 2,
	PersistenceGameType_Count = 3
}

class PersistenceRetentionPolicy : Asset {
	int32 DailyHistoryCount;
	int32 WeeklyHistoryCount;
	int32 MonthlyHistoryCount;
}

class PersistenceSettings : SystemSettings {
	StatCategoryTreeCollection StatCategoryTreeCollection;
	PlayerTypeProfile MPProfile;
	PlayerTypeProfile SPProfile;
	PlayerTypeProfile CoopProfile;
	PointSystemParamsAsset PointSystemParams;
	LicenseConfiguration LicenseConfig;
}

class PersistenceStatGroup : DataContainer {
	string GroupName;
}

class PersistenceStatTable : DataContainer {
	string TableName;
	AbstractPersistenceData OwnerPersistenceData;
}

class PersistentAwardDataStatRef : AbstractPersistentStatRef {
	AwardData Definition;
}

class PersistentCriteriaStatRef : AbstractPersistentStatRef {
	CriteriaData Criteria;
	StatsCategoryBaseData ParamX;
	StatsCategoryBaseData ParamY;
	AwardData CriteriaOwner;
}

enum PersistentValueDataKind {
	PersistentValueDataKind_Raw = 0,
	PersistentValueDataKind_Seconds = 1,
	PersistentValueDataKind_Minutes = 2,
	PersistentValueDataKind_Hours = 3,
	PersistentValueDataKind_Percent = 4
}

enum PersistentValueDataType {
	PersistentValueDataType_Decimal = 0,
	PersistentValueDataType_Integer = 1,
	PersistentValueDataType_String = 2,
	PersistentValueDataType_HighPrecisionDecimal = 3
}

enum PersistentValueHistoryType {
	PersistentValueHistoryType_None = 0,
	PersistentValueHistoryType_Delta = 1,
	PersistentValueHistoryType_DeltaAndAbsolute = 2,
	PersistentValueHistoryType_HistoryOnly = 3
}

class PersistentValueTemplate : DataContainer {
	PersistentValueTemplateData Data;
	AbstractPersistentStatRef[] DerivedFormulaRefs;
}

struct PersistentValueTemplateData {
	string Name;
	string DefaultValue;
	float DefaultFloatValue;
	int32 DefaultIntValue;
	PersistentValueType ValueType;
	PersistentValueDataType DataType;
	PersistentValueHistoryType HistoryType;
	AwardGroup Group;
	bool ClubStat;
	bool ForceIntoTemplate;
}

class PersistentValueTemplateStatRef : AbstractPersistentStatRef {
	PersistentValueTemplate Definition;
}

enum PersistentValueType {
	PersistentValueType_Set = 0,
	PersistentValueType_High = 1,
	PersistentValueType_Low = 2,
	PersistentValueType_Increment = 3,
	PersistentValueType_Decrement = 4
}

enum PersonViewMode {
	PersonViewMode_FirstPerson = 0,
	PersonViewMode_ThirdPerson = 1
}

class PhantomComponentData : ComponentData {
	Vec3 BoxSize;
	AntRef AsyncQueryPointerAsset;
	AntRef EnableTrajectoryOverride;
	AntRef TrajectoryOverride;
}

class PhysicsConeConstraintData : PhysicsConstraintData {
	float MinAngle;
	float AngularFriction;
	float MaxAngle;
	bool HasLimits;
}

class PhysicsConstraintData : GameObjectData {
	LinearTransform Transform;
	ReferenceObjectData ConstrainedObject;
	float BreakThreshold;
	bool IsBreakable;
}

class PhysicsDebugSettings : DataContainer {
	uint32 TimingRecursionDepth;
	bool UsePhysicsCpuTimers;
	bool DebugHingeConstraints;
}

struct PhysicsDrivenAnimationEntityBinding {
	AntRef AimLeftRight;
	AntRef AimUpDown;
	AntRef Crouch;
	AntRef ForceSetTrajectory;
	AntRef InAir;
	AntRef Skydive;
	AntRef Parachute;
	AntRef Swim;
	AntRef InputBackward;
	AntRef InputForward;
	AntRef InputLeft;
	AntRef InputRight;
	AntRef IsEnemy;
	AntRef Jump;
	AntRef LeanLeftRight;
	AntRef Prone;
	AntRef Sprint;
	AntRef GroundSupported;
	AntRef GroundNormal;
	AntRef GroundDistance;
	AntRef GroundAngleZ;
	AntRef GroundAngleX;
	AntRef GroundAngleFromNormal;
	AntRef IsClientAnimatable;
	AntRef CustomizationScreen;
	AntRef Minimal3pServer;
	AntRef VerticalImpact;
	AntRef FalseSignal;
	AntRef LockArmsToCameraWeight;
}

class PhysicsDrivenAnimationEntityData : EntityData {
	Realm Realm;
	PhysicsDrivenAnimationEntityBinding Binding;
	int32 AnimationEntitySpacePriority;
}

class PhysicsEntityData : EntityData {
	Vec3 InertiaModifier;
	HavokAsset[] ScaledAssets;
	RigidBodyData[] RigidBodies;
	HavokAsset Asset;
	FloatPhysicsData FloatPhysics;
	float Mass;
	float Restitution;
	float Friction;
	float LinearVelocityDamping;
	float AngularVelocityDamping;
	ProximityData Proximity;
	RigidBodyConstraintData[] Constraints;
	bool EncapsulatePartsInLists;
	bool MovableParts;
}

class PhysicsEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Distance;
	AudioGraphNodePort Azimuth;
	AudioGraphNodePort ElevationAngle;
	OutputNodeData Output;
}

class PhysicsHingeConstraintData : PhysicsConstraintData {
	float MinAngle;
	float AngularFriction;
	float MaxAngle;
	bool HasLimits;
}

class PhysicsMaterialRelationPropertyData : MaterialRelationPropertyData {
}

class PhysicsMaterialsRasterData : RasterQuadtreeData {
}

class PhysicsNodeData : AudioGraphNodeData {
	AudioGraphNodePort Distance;
	AudioGraphNodePort Velocity;
	AudioGraphNodePort RelativeVelocity;
	AudioGraphNodePort Azimuth;
	AudioGraphNodePort ElevationAngle;
	PhysicsEntry[] Entries;
}

struct PhysicsPartInfo {
	uint32 PartComponentIndex;
	uint32 HealthStateIndex;
}

class PhysicsPropertyRelationPropertyData : MaterialRelationPropertyData {
}

class PhysicsRenderSettings : DataContainer {
	int32 RenderSpecificPart;
	float ViewDistance;
	bool RenderClient;
	bool RenderEffectWorld;
	bool RenderDetail;
	bool RenderStatic;
	bool RenderUngrouped;
	bool RenderRagdoll;
	bool RenderGroup;
	bool RenderPhantoms;
	bool RenderCharacterCollision;
	bool RenderWater;
	bool RenderSolidGeometry;
	bool UseShapeCache;
	bool RenderConstraints;
	bool RenderOnlyContactConstraints;
	bool RenderConstraintCount;
	bool RenderActiveConstraintCount;
	bool RenderSimulationIslands;
	bool RenderBroadphaseHandles;
	bool RenderDestructionConnections;
	bool RenderPartBoundingBoxes;
	bool RenderOnlyBoundingBoxes;
	bool RenderInertia;
	bool RenderCenterOfMass;
	bool RenderLinearVelocity;
	bool RenderCollidesWithTerrain;
	bool RenderCollisionSpheres;
	bool RenderEntityStats;
	bool RenderWorldStats;
	bool ShowContactsInWorldStats;
	bool ShowInactiveContactsInWorldStats;
	bool ShowPhantomsInWorldStats;
	bool ShowFixedObjectsInWorldStats;
	bool RenderMemoryUsed;
	bool CollisionSpawnDebug;
	bool RenderServer;
}

class PhysicsSettings : DataContainer {
	uint32 IntegrateJobCount;
	uint32 ClientEffectWorldThreadCount;
	uint32 ClientWorldThreadCount;
	uint32 ServerWorldThreadCount;
	uint32 CollideJobCount;
	bool Enable;
	bool EnableAIRigidBody;
	bool ForestEnable;
	bool EnableJobs;
	bool RemoveRagdollWhenWoken;
	bool RemoveFromWorldOnCollisionOverflow;
	bool SingleStepCharacter;
	bool ForceSingleStepCharacterInSP;
	bool EnableFollowWheelRaycasts;
	bool EnableClientWheelRaycasts;
	bool EnableASyncWheelRaycasts;
	bool UseDelayedWakeUpClient;
	bool UseDelayedWakeUpServer;
	bool SuppressDebrisSpawnUntilReady;
}

enum PhysicsWorldType {
	PhysicsWorldType_Client = 0,
	PhysicsWorldType_ClientEffect = 1,
	PhysicsWorldType_Server = 2,
	PhysicsWorldType_Unknown = 100
}

class PickupEntityAsset : Asset {
	PickupEntityData Data;
}

class PickupEntityData : GamePhysicsEntityData {
	PickupPlayerEnum RandomizeAmmoOnDropForPlayer;
	int32 MinRandomClipAmmoPercent;
	ObjectBlueprint PhysicsBlueprint;
	MeshAsset Mesh;
	int32 MaxRandomClipAmmoPercent;
	uint32 PreferredWeaponSlot;
	float TimeToLive;
	int32 MinRandomSpareAmmoPercent;
	float InteractionRadius;
	int32 MaxRandomSpareAmmoPercent;
	bool UnspawnOnPickup;
	bool UnspawnOnAmmoPickup;
	bool ForceWeaponSlotSelection;
	bool DisplayInMiniMap;
	bool HasAutomaticAmmoPickup;
	bool UseWeaponMesh;
	bool AllowPickup;
	bool ContentIsStatic;
	bool PositionIsStatic;
	bool IgnoreNullWeaponSlots;
	bool ReplaceAllContent;
	bool RemoveWeaponOnDrop;
	bool SendPlayerInEventOnPickup;
}

enum PickupPlayerEnum {
	PickupPlayerEnum_None = 0,
	PickupPlayerEnum_Both = 1,
	PickupPlayerEnum_HumanOnly = 2,
	PickupPlayerEnum_AIOnly = 3
}

struct PickupSettingsData {
	Vec3 MeshRenderOffset;
	Vec3 MeshRenderRotation;
}

struct PitchModifier {
	Vec3 Offset;
	float PitchVal;
	float PitchAngle;
}

enum PixelNormalSpace {
	PnsTangent = 0
}

class PlanarReflectionComponentData : ComponentData {
	BlurFilter VerticalBlurFilter;
	float HorizontalDeviation;
	float GroundHeight;
	float VerticalDeviation;
	BlurFilter HorizontalBlurFilter;
	bool SkyRenderEnable;
	bool Enable;
}

class PlatformSplitterEntityData : EntityData {
	Realm Realm;
	bool RunOnce;
}

class PlayerCameraEntityData : CameraEntityBaseData {
	TargetMode SoldierTargetMode;
	uint32 SoldierCameraIndex;
	TargetMode VehicleTargetMode;
	uint32 VehicleCameraIndex;
	bool ReleaseControlIfTargetLost;
	bool ShouldTargetControllable;
	bool ShouldTargetVehicleDriverEntry;
	bool ShouldTargetExtraPlayerInDoublePlayerEvent;
}

class PlayerData : Asset {
	PlayerViewData PlayerView;
	EntryInputActionMapsData InputConceptDefinition;
	InputActionMappingsData InputMapping;
}

class PlayerEntryComponentData : EntryComponentData {
	Vec3 AnimationAccelerationMultiplier;
	AntEntryIdEnum AntEntryId;
	string AntEntryID;
	AntEnumeration AntEntryEnumeration;
	float ShieldedTransitionExitTime;
}

class PlayerFilterEntityData : EntityData {
	Realm Realm;
	bool InvertFilter;
	bool ForwardToSpectators;
}

class PlayerInputTriggerEntityData : EntityData {
	Realm Realm;
	EntryInputActionEnum EntryInputActions;
	float ValueModifier;
	float TrailingValueAtStart;
	float AccumulatedValueAtStart;
	bool SendTriggerEvents;
	bool EnabledFromStart;
}

class PlayerInteractionViewData : SubViewData {
}

enum PlayerKilledWeaponType {
	PlayerKilledWeaponType_Unknown = 0,
	PlayerKilledWeaponType_HandheldWeapon = 1,
	PlayerKilledWeaponType_Vehicle = 2,
	PlayerKilledWeaponType_Count = 3
}

class PlayerLookAtEntityData : EntityData {
	LinearTransform TargetTransform;
}

class PlayerOrderTrackerData : HudTrackerData {
	UIHudIcon AttackIcon;
	UIHudIcon DefendIcon;
	UIHudIcon MoveToIcon;
}

enum PlayerRole {
	PRSquadLeader = 0,
	PRSquadMember = 1,
	PRUnknown = 2
}

struct PlayerScore {
	int32 Rank;
	uint32 Kills;
	uint32 Deaths;
	uint32 ScoreMultiplier;
	int32 Score;
	int32 GlobalScoreOriginal;
	int32 GlobalScoreUpdated;
	float Time;
	uint32 GunMasterLevel;
}

enum PlayerSpawnType {
	PlayerSpawnType_HumanPlayer = 0,
	PlayerSpawnType_AiPlayer = 1,
	PlayerSpawnType_Actor = 2
}

class PlayerState : MetricState {
	uint64 OnlineId;
}

class PlayerTakeOverTriggerEntityData : GameEntityData {
	TeamId TeamId;
	float TimeToLoseControl;
}

class PlayerTypeProfile : Asset {
	PersistenceData Values;
	AwardDataTree Awards;
	RankParamsAsset RankParams;
	ScoringData Scoring;
	DogTagsAsset DogTags;
	EloParameters EloParams;
	StaticUnlockList StaticUnlocks;
	StatSpamSettings SpamSettings;
	string[] OrderedUnlockNames;
}

class PlayerViewData : DataContainer {
	SubViewData[] SubViews;
}

class PlayFromHereAsset : Asset {
	Blueprint Soldier;
	AnimatedSkeletonDatabase AnimatedSkeletonDatabase;
	AntProjectAsset AntProject;
}

class PlayVideoEntityData : EntityData {
	MovieTextureAsset Movie;
	bool KeepBlackScreen;
	bool AllowSkip;
}

enum PointCloudAttributeQuantization {
	PointCloudAttributeQuantization_s5e5 = 0,
	PointCloudAttributeQuantization_s7e5 = 1,
	PointCloudAttributeQuantization_s10e5 = 2,
	PointCloudAttributeQuantization_s16e7 = 3,
	PointCloudAttributeQuantization_None = 4,
	PointCloudAttributeQuantization_Count = 5
}

enum PointCloudAttributeUsage {
	PointCloudAttributeUsage_Position = 0,
	PointCloudAttributeUsage_Normal = 1,
	PointCloudAttributeUsage_Tangent = 2,
	PointCloudAttributeUsage_Binormal = 3,
	PointCloudAttributeUsage_Count = 4
}

class PointEnvelope : DataContainer {
	PointEnvelopePoint[] Points;
}

struct PointEnvelopePoint {
	float X;
	float Y;
}

class PointLightEntityData : LocalLightEntityData {
	float Width;
	float TranslucencyAmbient;
	float TranslucencyScale;
	uint32 TranslucencyPower;
	float TranslucencyDistortion;
}

class PointSystemParamsAsset : Asset {
	float MultiKillTimeLimit;
	float DnfTimeout;
	uint32 KillStreakX;
	uint32 NemesisKillX;
	float FreefallHeight;
}

class PointTargetData : SpatialEntityData {
}

struct PoissonRadialBlurData {
	Vec2 PoissonDiscScale;
	float BlendFactor;
	float RadialScale;
	float RadialExponent;
}

class PolynomialColorInterpData : EvaluatorData {
	Vec3 Color0;
	Vec3 Color1;
	Vec4 Coefficients;
}

class PolynomialData : EvaluatorData {
	Vec4 Coefficients;
	float ScaleValue;
	float MinClamp;
	float MaxClamp;
}

enum PolynomialOperation {
	Multiplication = 0,
	Addition = 1,
	Subtraction = 2
}

class PolynomialOperatorData : EvaluatorData {
	PolynomialTempData FirstOperand;
	PolynomialTempData SecondOperand;
	PolynomialOperation Operation;
	float MinClampResult;
	float MaxClampResult;
}

struct PolynomialTempData {
	Vec4 Coefficients;
	float ScaleValue;
	float MinClamp;
	float MaxClamp;
}

struct PoseConstraintsData {
	bool StandPose;
	bool CrouchPose;
	bool PronePose;
}

enum PoseTransition {
	PTStandToProne = 0,
	PTStandToCrouch = 1,
	PTCrouchToStand = 2,
	PTCrouchToProne = 3,
	PTProneToStand = 4,
	PTProneToCrouch = 5
}

struct PoseTransitionTime {
	CharacterPoseType ToPose;
	float TransitionTime;
}

enum PoseType {
	PoseType_Current = 0,
	PoseType_Stand = 1,
	PoseType_Crouch = 2
}

class PositionEvaluationConstantData : Asset {
	float OwnRandomPositionsRadius;
	float LeaderRandomPositionsRadius;
}

enum PostProcessDebugMode {
	PpdmDefault = 0,
	PpdmBloom = 1,
	PpdmBloomStep = 2,
	PpdmDofBlur = 3,
	PpdmBlur = 4,
	PpdmBlurStep = 5,
	PpdmDepth = 6
}

class PowerToolWeaponData : WeaponData {
	SoundAsset RepairSound;
	SoundAsset RepairCompletedSound;
	SoundAsset DamageSound;
	MaterialContainerPair RepairMaterialPair;
	bool PlayFireEffectOnRepairOnly;
}

struct PrecomputeCache {
	guid Guid;
	string Key;
	bool CachedDataEnable;
}

class PredestructionEntityData : GameEntityData {
	float Radius;
}

class PrefabBlueprint : Blueprint {
	GameObjectData[] Objects;
}

class PreRoundEntityData : GameEntityData {
	int32 RoundMaxPlayerCount;
	uint32 RoundRestartCountdown;
	int32 RoundMinPlayerCount;
}

class PresenceAchievementServiceData : PresenceServiceData {
}

class PresenceBackendData : Asset {
	PresenceRequest[] Requests;
}

class PresenceBlobServiceData : PresenceServiceData {
}

class PresenceCalendarServiceData : PresenceServiceData {
}

class PresenceCommerceServiceData : PresenceServiceData {
}

class PresenceCommServiceData : PresenceServiceData {
}

class PresenceEntitlementServiceData : PresenceServiceData {
}

class PresenceFriendsServiceData : PresenceServiceData {
}

class PresenceGameConfigurationServiceData : PresenceServiceData {
	OnlineEnvironmentConsoleUrl ConfigUrl;
}

class PresenceLeaderboardServiceData : PresenceServiceData {
}

class PresenceMatchFeedServiceData : PresenceServiceData {
}

class PresenceNewsTickerServiceData : PresenceServiceData {
}

class PresencePlaygroupServiceData : PresenceServiceData {
}

enum PresenceRequest {
	PresenceRequest_Invalid = 0,
	PresenceRequest_DownloadBlob = 1,
	PresenceRequest_UploadBlob = 2,
	PresenceRequest_DownloadUserSettings = 3,
	PresenceRequest_UploadUserSettings = 4,
	PresenceRequest_InitializeCommerceService = 5,
	PresenceRequest_ShutDownCommerceService = 6,
	PresenceRequest_EnumerateCommerceContent = 7,
	PresenceRequest_PurchaseCommerceContent = 8,
	PresenceRequest_PurchaseConsumableCommerceContent = 9,
	PresenceRequest_ConsumeCommerceContent = 10,
	PresenceRequest_GetCommerceContentImage = 11,
	PresenceRequest_CheckOnlinePass = 12,
	PresenceRequest_PurchaseOnlinePass = 13,
	PresenceRequest_RedeemOnlinePassCode = 14,
	PresenceRequest_SetOverlayUrl = 15,
	PresenceRequest_ListEntitlements = 16,
	PresenceRequest_GrantEntitlement = 17,
	PresenceRequest_GetFriends = 18,
	PresenceRequest_InviteFriend = 19,
	PresenceRequest_RemoveFriend = 20,
	PresenceRequest_HttpGet = 21,
	PresenceRequest_JoinGameByOnlineNativeData = 22,
	PresenceRequest_DownloadUpdate = 23,
	PresenceRequest_SendMessage = 24,
	PresenceRequest_CreatePlaygroup = 25,
	PresenceRequest_JoinPlaygroup = 26,
	PresenceRequest_JoinPlaygroupByUsername = 27,
	PresenceRequest_JoinPlaygroupByOnlineNativeData = 28,
	PresenceRequest_JoinPlaygroupByInviteToken = 29,
	PresenceRequest_SetPlaygroupAttribute = 30,
	PresenceRequest_LeavePlaygroup = 31,
	PresenceRequest_DownloadStatistics = 32,
	PresenceRequest_GetLeaderboard = 33,
	PresenceRequest_UploadProgression = 34,
	PresenceRequest_SendInvite = 35,
	PresenceRequest_KickFromPlaygroup = 36,
	PresenceRequest_ViewInvite = 37,
	PresenceRequest_SendInviteToLiveParty = 38,
	PresenceRequest_SetUserInfoAttribute = 39,
	PresenceRequest_GetServerBrowserSnapshot = 40,
	PresenceRequest_GetGamesWithFriends = 41,
	PresenceRequest_GetGamesByServerId = 42,
	PresenceRequest_GetDetailedServerInfo = 43,
	PresenceRequest_UnlockAchievements = 44,
	PresenceRequest_RspGetServers = 45,
	PresenceRequest_RspGetServerDetails = 46,
	PresenceRequest_RspUpdateServerSettings = 47,
	PresenceRequest_RspGetConfig = 48,
	PresenceRequest_RspRestartServer = 49,
	PresenceRequest_RspUpdatePreset = 50,
	PresenceRequest_RspUpdateMapRotation = 51,
	PresenceRequest_RspUpdateAdminUser = 52,
	PresenceRequest_RspUpdateBannedUser = 53,
	PresenceRequest_RspUpdateVipUser = 54,
	PresenceRequest_RspUpdateServerBanner = 55,
	PresenceRequest_ReportServerBanner = 56,
	PresenceRequest_GetUserId = 57,
	PresenceRequest_VerifyGrantEntitlement = 58,
	PresenceRequest_ResetStatistics = 59,
	PresenceRequest_GetXPromoInformation = 60,
	PresenceRequest_GetContentInformation = 61,
	PresenceRequest_DownloadPromoItem = 62,
	PresenceRequest_Count = 63
}

class PresenceRspServiceData : PresenceServiceData {
}

class PresenceServerBrowserServiceData : PresenceServiceData {
	MatchmakingCriteria FilterCriterias;
	uint32 ListCapacity;
}

class PresenceServiceData : Asset {
}

class PresenceStatisticsServiceData : PresenceServiceData {
}

class PresenceUserIdServiceData : PresenceServiceData {
}

class PresenceWebFeedServiceData : PresenceServiceData {
}

class PresenceXPromoServiceData : PresenceServiceData {
}

struct PresetTypeConfig {
	int32 PresetId;
	string Key;
	string NameSid;
	string DescSid;
	LockedSettingConfig[] LockedSettings;
	bool Predefined;
}

enum PrimitiveType {
	PrimitiveType_PointList = 0,
	PrimitiveType_LineList = 1,
	PrimitiveType_LineStrip = 2,
	PrimitiveType_TriangleList = 3,
	PrimitiveType_TriangleStrip = 5,
	PrimitiveType_QuadList = 7,
	PrimitiveType_XenonRectList = 8
}

class PrintDebugTextEntityData : EntityData {
	Vec3 TextColor;
	Realm Realm;
	string Text;
	bool Enabled;
}

class ProceduralAwarenessAntRefs : DataContainer {
	AntRef ProceduralAwarenessActive;
	AntRef ProceduralAwarenessHumanIKActive;
	AntRef ProceduralAwarenessData;
}

class ProcessorData : EmitterComponentData {
	Vec4 DefaultValues;
	ProcessorData NextProcessor;
	EmitterComponentData Pre;
	EmittableField EvaluatorInput;
	bool Enable;
}

enum ProcessorType {
	PtBaseEmitter = 0,
	PtSpawnRate = 1,
	PtSpawnSpeed = 2,
	PtSpawnPosition = 3,
	PtSpawnDirection = 4,
	PtSpawnSize = 5,
	PtSpawnAnimation = 6,
	PtSpawnAnimationFrame = 7,
	PtSpawnRotation = 8,
	PtSpawnOrientation = 9,
	PtSpawnRotationSpeed = 10,
	PtUpdatePosition = 11,
	PtUpdateAge = 12,
	PtTurbulance = 13,
	PtGravity = 14,
	PtLocalForce = 15,
	PtAirResistance = 16,
	PtUpdateLinearVelocity = 17,
	PtUpdateOrientation = 18,
	PtEmitter = 19,
	PtUpdateColor = 20,
	PtUpdateColorLeaf = 21,
	PtUpdateTransparency = 22,
	PtUpdateTextureCoords = 23,
	PtUpdateRotation = 24,
	PtUpdateSizeX = 25,
	PtUpdateSizeY = 26,
	PtUpdateSizeZ = 27,
	PtUpdateSize = 28,
	PtUpdateAlphaLevelMin = 29,
	PtUpdateAlphaLevelMax = 30,
	PtUpdateAlphaLevelScale = 31,
	PtUpdateClipScale = 32,
	PtUpdateCameraProximity = 33,
	ProcessorTypeCount = 34
}

class ProfileEntityData : EntityData {
	Realm Realm;
	string ProfileName;
}

class ProfileOptionData : Asset {
	string UniqueId;
	ProfileOptionsType Category;
}

class ProfileOptionDataBinary : ProfileOptionData {
	int32 MaxLength;
}

class ProfileOptionDataBool : ProfileOptionData {
	bool Value;
}

class ProfileOptionDataEnum : ProfileOptionData {
	ProfileOptionDataEnumItem[] Items;
}

struct ProfileOptionDataEnumItem {
	string DisplayName;
	bool Default;
}

class ProfileOptionDataFloat : ProfileOptionData {
	float Min;
	float Max;
	float Value;
	float Step;
}

class ProfileOptionDataInt : ProfileOptionData {
	int32 Min;
	int32 Max;
	int32 Value;
	int32 Step;
}

class ProfileOptionDataString : ProfileOptionData {
	int32 MaxLength;
	string Value;
}

class ProfileOptionsAsset : Asset {
	string FileName;
	string ContentName;
	uint32 FileSize;
	ProfileOptionData[] Options;
	bool AutoSaveOnQuit;
}

enum ProfileOptionsType {
	GstAudio = 0,
	GstRender = 1,
	GstInput = 2,
	GstAI = 3,
	GstGameplay = 4,
	GstPlayerProfile = 5,
	GstPersistence = 6,
	GstBinary = 7,
	GstKeyBinding = 8,
	GstCount = 9
}

enum ProgressType {
	PT_CapturePointCooldown = 0
}

class ProjectileBlueprint : ObjectBlueprint {
}

class ProjectileEntityData : GamePhysicsEntityData {
	float VisualConvergeDistance;
	float InitialSpeed;
	float TimeToLive;
	uint32 MaxCount;
	float InitMeshHideTime;
	MaterialContainerPair MaterialPair;
	AntHitReactionWeaponType HitReactionWeaponType;
	ExplosionEntityData Explosion;
	WeaponSuppressionData SuppressionData;
	string AmmunitionType;
	bool ServerProjectileDisabled;
	bool DetonateOnTimeout;
	bool SuppressOwnerVehicleDamage;
}

class PropellerEngineConfigData : EngineConfigData {
	Vec3 HorisontalForceOffset;
	PropellerType PropellerType;
	RotorParameters RotorConfig;
	ForceMagnitudeInputType ForceMagnitudeInputType;
	uint32 DirectionVectorIndex;
	float ForceMagnitudeMultiplier;
	float LiftForceSpringConstant;
	float LiftForceDampingConstant;
	float CyclicInputScaleRoll;
	float CyclicRollLiftMod;
	float CyclicRollStrafeMod;
	float CyclicInputScalePitch;
	float CyclicPitchLiftMod;
	float CyclicPitchStrafeMod;
	float CyclicPitchStrafeBrakeMod;
	float CollectiveInputIdle;
	float CollectiveThrottleInputScale;
	float CollectiveBrakeInputScale;
	float DefaultAngleOfAttack;
	float AttackAngleMod;
	float StabilizerMod;
	float HorisontalMinEffectVelocity;
	float HorisontalMinEffectMod;
	float PitchStrength;
	float PitchFromVel;
	float GravityMod;
	float SPForwardStrength;
	float SPSidewaysStrength;
	float SPVerticalStrength;
	float VelocityFromPitch;
	float PitchLimit;
	float BankingStrength;
	float BankingLimit;
	float RollStrength;
	float PitchUpWhenBankStrength;
	float PitchUpWhenBankLimit;
	bool SPDefault;
	bool EnableNewHelicopter;
	bool SPAllowed;
}

enum PropellerType {
	PropellerType_Regular = 0,
	PropellerType_Rotor = 1
}

class PropertyCastEntityData : EntityData {
	Realm Realm;
	int32 IntValue;
	float FloatValue;
	bool BoolValue;
}

struct PropertyConnection {
	DataContainer Source;
	DataContainer Target;
	int32 SourceFieldId;
	int32 TargetFieldId;
}

class PropertyDebugEntityData : EntityData {
	Vec3 Vec3Value;
	Vec3 TextColor;
	Vec2 ScreenPosition;
	LinearTransform TransformValue;
	Vec2 Vec2Value;
	string ValuePrefix;
	Realm Realm;
	float FloatValue;
	int32 IntValue;
	float TextScale;
	string StringValue;
	bool DefaultVisible;
	bool BoolValue;
	bool Multiline;
}

class PropertyGateEntityData : EntityData {
	LinearTransform TransformIn;
	Vec4 Vec4In;
	Vec3 Vec3In;
	Realm Realm;
	float FloatIn;
	int32 IntIn;
	bool BoolIn;
	bool Default;
}

class PropertyRecordingData : DataContainer {
	int32 Id;
}

class PropertyTrackData : DataContainer {
	int32 Id;
	int32[] Times;
}

class ProximityData : DataContainer {
	ProximityObjectType ProximityType;
}

enum ProximityObjectType {
	PotProximityDisabled = 0,
	PotVaultableLow = 1,
	PotVaultableHigh = 2,
	PotSupportedShooting = 3,
	PotInteractWith = 4,
	PotBashable = 5
}

struct Ps3AgeLevels {
	int32 AgeLevel7;
	int32 AgeLevel8;
	int32 AgeLevel9;
	int32 AgeLevel10;
}

struct Ps3ParentalLockAgeSettings {
	string Region;
	Ps3AgeLevels AgeLevels;
	Ps3ParentalLockAgeSettingsOverrides CountryOverrides;
}

struct Ps3ParentalLockAgeSettingsForCountry {
	string CountryCode;
	Ps3AgeLevels AgeLevels;
}

class Ps3ParentalLockAgeSettingsOverrides : DataContainer {
	Ps3ParentalLockAgeSettingsForCountry[] Overrides;
}

class Ps3PresenceBackendData : PresenceBackendData {
	string CommunicationId;
	string CommunicationSignature;
	Ps3SkuSettings[] SkuSettings;
	Ps3ParentalLockAgeSettings[] ParentalLockAgeSettings;
}

struct Ps3SkuSettings {
	string TitleId;
	string SpId;
	bool GrantsOnlinePass;
}

class PS3StoreImageHD1080 : UIItemDescription {
	string Identifier;
	string ImagePath;
}

class PS3StoreImageSD : UIItemDescription {
	string Identifier;
	string ImagePath;
}

enum QualityLevel {
	QualityLevel_Low = 0,
	QualityLevel_Medium = 1,
	QualityLevel_High = 2,
	QualityLevel_Ultra = 3
}

class QueryGetNode : UINodeData {
	UINodePort In;
	UINodePort Out;
	UIDataSourceInfo DataSource;
}

enum QuickThrowTypeEnum {
	QttHand = 0,
	QttBag = 1
}

class RadarSweepComponentData : ComponentData {
	float ControllableSpeedThreshold;
	float ControllableSweepRadius;
	float ControllableSweepInterval;
	float MineSweepInterval;
	float MineSweepRadius;
	bool SweepForMines;
	bool SweepForControllables;
}

class RadioAltitudeData : DataContainer {
	float Range;
	float UpdateFrequency;
	CollisionMethodEnum CollisionMethod;
}

class RadioComponentData : ComponentData {
	SoundAsset SoundEffect;
}

class RadiosityEntityData : EntityData {
}

class RadiosityMaterial : DataContainer {
	Vec3 Color;
	string Name;
	bool Emissive;
}

class RagdollAsset : Asset {
	MaterialContainerPair MaterialPair;
	bool UseServerRagdoll;
}

struct RagdollBinding {
	AntRef RagdollOnBack;
	AntRef RagdollBlend;
	AntRef RagdollForceBlendDisabled;
	AntRef RagdollActiveTime;
	AntRef RagdollFullyBlendedIn;
}

class RagdollComponentData : ComponentData {
	SkeletonAsset SkeletonAsset;
	RagdollAsset RagdollAsset;
	SkeletonCollisionData SkeletonCollisionData;
	RagdollBinding Binding;
	string LeftLegBoneName;
	string RightLegBoneName;
}

class RandomDelayEntityData : EntityData {
	float MinDelay;
	float MaxDelay;
	Realm Realm;
	bool AutoStart;
	bool RunOnce;
}

class RandomEvaluatorData : EvaluatorData {
	float Max;
	float Min;
}

class RandomEventEntityData : EntityData {
	Realm Realm;
	int32 Probability;
	bool RandomizeFirstOnly;
	bool AutoStart;
}

class RandomFloatEntityData : EntityData {
	Realm Realm;
	float Min;
	float Max;
}

class RandomMultiEventEntityData : EntityData {
	Realm Realm;
	float[] RandomEventWeight;
	bool UniformDistribution;
	bool ResetOutputsWhenAllHasTriggered;
	bool DisableOutputOnTrigger;
}

class RandomWalkOrderEntityData : BFOrderEntityData {
	bool CombatForbidden;
}

class RandomXYZEvaluatorData : EvaluatorData {
	float MaxX;
	float MinX;
	float MaxY;
	float MinY;
	float MaxZ;
	float MinZ;
}

class RankLevelData : DataContainer {
	string RankName;
	uint32 PointsNeeded;
	string ImageName;
	string IconName;
	string SoundName;
	BasicUnlockInfo[] UnlockInfos;
	int32 RankNumber;
}

class RankParamsAsset : Asset {
	RankLevelData[] Ranks;
}

class RasterCoverageData : DataContainer {
}

enum RasterNodeUsage {
	RasterNodeUsage_Default = 0,
	RasterNodeUsage_Disabled = 1,
	RasterNodeUsage_Persistent = 2,
	RasterNodeUsage_PersistentDedicatedServer = 3,
	RasterNodeUsage_Pruned = 4
}

class RasterQuadtreeData : Asset {
}

class RasterQuadtreeNodeData : DataContainer {
}

class RasterTreeAsset : DataContainer {
}

enum RasterTreeBuildMode {
	RasterTreeBuildMode_InlinePersistentStreamRest = 0,
	RasterTreeBuildMode_InlinePersistentRemoveRest = 1,
	RasterTreeBuildMode_InlineAll = 2
}

class RawFileAsset : Asset {
}

class RawFileDataAsset : RawFileAsset {
	uint8[] RawData;
	uint32 Size;
}

class RawFileImportActionParams : DataContainer {
	string SourceFile;
}

class RawFileResourceAsset : RawFileAsset {
}

enum ReadinessLevel {
	RLPatrol = 0,
	RLReady = 1,
	RLCombat = 2,
	RLNone = 3
}

struct ReadinessLevelCharacteristics {
	float MinReactionTime;
	float MaxReactionTime;
	float ReductionTime;
}

struct ReadinessLevels {
	ReadinessLevelCharacteristics Patrol;
	ReadinessLevelCharacteristics Ready;
	ReadinessLevelCharacteristics Combat;
}

enum ReadinessState {
	RSPatrol = 0,
	RSReady = 1,
	RSCombat = 2
}

enum Realm {
	Realm_Client = 0,
	Realm_Server = 1,
	Realm_ClientAndServer = 2,
	Realm_None = 3,
	Realm_Pipeline = 4
}

class ReceivedAwardSurveyEvent : MetricEvent {
	string AwardName;
	guid SurveyMetricLink;
}

class ReceiveEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Out;
	AudioGraphParameter Source;
	float Parameter;
	float SavedValue;
}

class ReceiveNodeData : AudioGraphNodeData {
	ReceiveEntry[] Entries;
}

struct RecoilData {
	float MaxRecoilAngleX;
	float MinRecoilAngleX;
	float MaxRecoilAngleY;
	float MinRecoilAngleY;
	float MaxRecoilAngleZ;
	float MinRecoilAngleZ;
	float MaxRecoilFov;
	float MinRecoilFov;
	bool RecoilFollowsDispersion;
}

class RecordedInputData : Asset {
	InputRecorderTrackData[] TrackData;
}

struct RectangularCoverageData {
}

class ReferenceObjectData : GameObjectData {
	LinearTransform BlueprintTransform;
	Blueprint Blueprint;
	ObjectVariation ObjectVariation;
	StreamRealm StreamRealm;
	bool CastSunShadowEnable;
	bool Excluded;
}

class RefreshNode : UINodeData {
	UINodePort In;
	UINodePort Out;
	UIDataSourceInfo DataSource;
}

class RegistryContainer : DataContainer {
	DataContainer[] EntityRegistry;
	DataContainer[] AssetRegistry;
	DataContainer[] BlueprintRegistry;
	DataContainer[] ReferenceObjectRegistry;
}

struct RegularCameraViewData {
	Vec3 MeshOffset;
	InputSuppressionData InputSuppression;
	float FieldOfView;
	RigidMeshAsset Mesh;
	float ScreenExposureAreaScale;
	ObjectBlueprint MaskMeshBlueprint;
	bool LockMeshToRenderView;
	bool AllowFieldOfViewScaling;
	bool FLIREnabled;
}

class RegularSocketObjectData : SocketObjectData {
	LinearTransform Transform;
	LinearTransform[] Mesh3pTransforms;
}

enum ReloadBehavior {
	RbInCover = 0,
	RbStationary = 1,
	RbAnywhere = 2
}

enum ReloadLogic {
	rlWeaponSwitchCancelsUnfinishedReload = 0,
	rlReloadUnaffectedByWeaponSwitch = 1
}

enum ReloadType {
	rtSingleBullet = 0,
	rtMagazine = 1,
	rtMagazineWithPossibleShorterReload = 2
}

class RemoteEntryComponentData : EntryComponentData {
}

enum RenderBlendMode {
	RenderBlendMode_Zero = 0,
	RenderBlendMode_One = 1,
	RenderBlendMode_SourceColor = 2,
	RenderBlendMode_InvSourceColor = 3,
	RenderBlendMode_SourceAlpha = 4,
	RenderBlendMode_InvSourceAlpha = 5,
	RenderBlendMode_DestColor = 6,
	RenderBlendMode_InvDestColor = 7,
	RenderBlendMode_DestAlpha = 8,
	RenderBlendMode_InvDestAlpha = 9,
	RenderBlendMode_SourceAlphaSaturate = 10
}

enum RenderBlendOp {
	RenderBlendOp_Add = 0,
	RenderBlendOp_Subtract = 1,
	RenderBlendOp_RevSubtract = 2,
	RenderBlendOp_Min = 3,
	RenderBlendOp_Max = 4
}

enum RenderClearMask {
	RenderClearMask_Color0 = 1,
	RenderClearMask_Color1 = 2,
	RenderClearMask_Color2 = 4,
	RenderClearMask_Color3 = 8,
	RenderClearMask_Color4 = 16,
	RenderClearMask_Color5 = 32,
	RenderClearMask_Color6 = 64,
	RenderClearMask_Color7 = 128,
	RenderClearMask_Color = 255,
	RenderClearMask_Depth = 256,
	RenderClearMask_Stencil = 512,
	RenderClearMask_All = 1023
}

enum RenderCullMode {
	RenderCullMode_None = 0,
	RenderCullMode_Front = 1,
	RenderCullMode_Back = 2
}

enum RenderDepthMode {
	RenderDepthMode_Disabled = 0,
	RenderDepthMode_ReadOnly = 1,
	RenderDepthMode_ReadAndWrite = 2,
	RenderDepthMode_WriteOnly = 3
}

enum RenderFillMode {
	RenderFillMode_Solid = 0,
	RenderFillMode_Wireframe = 1
}

class RenderTextureAsset : TextureBaseAsset {
}

class RenderVolumeEntityData : SpatialEntityData {
	Vec4 UserMasks;
	SurfaceShaderInstanceDataStruct Shader;
	RenderVolumeTransformType TransformType;
	bool Enabled;
}

enum RenderVolumeTransformType {
	RenderVolumeTransformType_WorldSpaceInv = 0,
	RenderVolumeTransformType_WorldSpaceNoScale = 1
}

enum RenderWriteMask {
	RenderWriteMask_None = 0,
	RenderWriteMask_Red = 1,
	RenderWriteMask_Green = 2,
	RenderWriteMask_Blue = 4,
	RenderWriteMask_Color = 7,
	RenderWriteMask_Alpha = 8,
	RenderWriteMask_All = 15
}

class RepairToolWeaponData : PowerToolWeaponData {
	float RechargeSpeed;
}

enum ResourceBundleKind {
	ResourceBundleKind_AlwaysLoaded = 0,
	ResourceBundleKind_GlobalPackage = 1,
	ResourceBundleKind_AssetPackage = 2,
	ResourceBundleKind_SubLevelPackage = 3,
	ResourceBundleKind_BlueprintBundle = 4
}

class ResourceManagerSettings : SystemSettings {
	int32 CasBundleReadBufferSizeKb;
	int32 CasBundleDecompressBufferSizeKb;
	int32 CasBundleDecompressBufferCount;
	bool BundleProfilingEnable;
	bool SPUDecompressEnable;
}

class RGBRasterData : RasterQuadtreeData {
}

class RibbonData : VisualVectorShapeData {
	RibbonPointData[] RibbonPoints;
}

struct RibbonPointData {
	Vec4 UserMaskRight;
	Vec4 UserMaskLeft;
	float Right;
	float Left;
}

class RichPresenceContext : DataContainer {
	string Name;
	RichPresenceContextValue[] Values;
	RichPresenceContextValue DefaultValue;
	int8 Index;
}

struct RichPresenceContextSetting {
	RichPresenceContext Context;
	RichPresenceContextValue Value;
}

class RichPresenceContextValue : DataContainer {
	string SID;
	int8 Index;
}

class RichPresenceContextValueWithKey : RichPresenceContextValue {
	string Key;
}

class RichPresenceData : Asset {
	RichPresencePresenceString[] PresenceModes;
	RichPresencePresenceString DefaultMode;
	RichPresencePresenceString InactiveMode;
	RichPresenceContext[] Contexts;
	RichPresenceProperty[] Properties;
}

class RichPresencePresenceString : DataContainer {
	string SID;
	bool Interpolated;
	int8 Index;
}

struct RichPresenceProperty {
	string Name;
	RichPresencePropertyType PropertyType;
}

enum RichPresencePropertyType {
	RichPresencePropertyType_Float = 0,
	RichPresencePropertyType_Integer = 1,
	RichPresencePropertyType_LongFloat = 2,
	RichPresencePropertyType_LongInteger = 3
}

enum RigidBodyCollisionLayer {
	RigidBodyCollisionLayer_Invalid = 0,
	RigidBodyCollisionLayer_VehicleLayer = 1,
	RigidBodyCollisionLayer_VehicleAndCharacterCollisionLayer = 2,
	RigidBodyCollisionLayer_Size = 3
}

class RigidBodyConeConstraintData : RigidBodyConstraintData {
	float MinAngle;
	float AngularFriction;
	float MaxAngle;
	bool HasLimits;
}

class RigidBodyConstraintData : GameObjectData {
	LinearTransform Transform;
	RigidBodyData ParentBody;
	float BreakThreshold;
	bool IsBreakable;
}

class RigidBodyData : DataContainer {
	Vec3 InertiaModifier;
	RigidBodyType RigidBodyType;
	float Mass;
	float Restitution;
	float Friction;
	float AngularVelocityDamping;
	float LinearVelocityDamping;
	uint32 InteractionToolkitCollisionVolumeId;
	RigidBodyMotionType MotionType;
	RigidBodyQualityType QualityType;
	RigidBodyCollisionLayer CollisionLayer;
	FloatPhysicsData FloatPhysics;
	RigidBodyConstraintData[] Constraints;
}

class RigidBodyHingeConstraintData : RigidBodyConstraintData {
	float MinAngle;
	float AngularFriction;
	float MaxAngle;
	bool HasLimits;
}

enum RigidBodyMotionType {
	RigidBodyMotionType_Invalid = 0,
	RigidBodyMotionType_Fixed = 1,
	RigidBodyMotionType_Keyframed = 2,
	RigidBodyMotionType_Dynamic = 3,
	RigidBodyMotionType_Size = 4
}

enum RigidBodyQualityType {
	RigidBodyQualityType_Invalid = 0,
	RigidBodyQualityType_Fixed = 1,
	RigidBodyQualityType_Debris = 2,
	RigidBodyQualityType_DebrisSimpleToi = 3,
	RigidBodyQualityType_Moving = 4,
	RigidBodyQualityType_Critical = 5,
	RigidBodyQualityType_Size = 6
}

enum RigidBodyType {
	RBTypeCollision = 0,
	RBTypeDetail = 1,
	RBTypeCharacter = 2,
	RBTypeRaycast = 3,
	RBTypeGroup = 4,
	RBTypeSize = 5
}

class RigidMeshAsset : MeshAsset {
}

class RigidMeshEntityData : SpatialEntityData {
	RigidMeshAsset Mesh;
}

struct RigidMeshSocketTransform {
	LinearTransform Transform;
	WeaponRegularSocketObjectData SocketObject;
}

class RiverData : RibbonData {
}

class RoadData : RibbonData {
	SurfaceShaderBaseAsset Shader2d;
	SurfaceShaderBaseAsset Shader3dZOnly;
	float UvTileFactor;
	bool StickToTerrain;
}

struct RotateToHitData {
	float RotationSpeedFactor;
}

class RotateVectorData : EvaluatorData {
	float Angle;
	bool RotateWithinPlane;
	bool InputAffectsPhi;
}

enum RotationAxis {
	raX = 0,
	raY = 1,
	raZ = 2
}

enum RotationAxisEnum {
	RALeft = 0,
	RAUp = 1,
	RADof = 2
}

class RotationBodyData : MovingBodyData {
	float AngularMomentumMultiplier;
	float AngularMomentumThreshold;
	float AngularMomentumDamping;
	float AngularMomentumDampingAcc;
	float AngularMomentumDampingDeacc;
	float AngularConstraintMin;
	ExtendedConstraintsData ExtendedConstraints;
	float AngularConstraintMax;
	int32 RotationAxis;
	bool UsePostSatisfyConstraints;
	bool UseAngularMomentumThreshold;
	bool UseAngularMomentumDamping;
	bool UseAngularConstraint;
}

enum RotationChannel {
	RotationChannel_Pitch = 0,
	RotationChannel_Yaw = 1,
	RotationChannel_Roll = 2
}

class RotorComponentData : ComponentData {
	RotorModelData LowRpmModel;
	RotorModelData HighRpmModel;
	RotationAxis RotationAxis;
	float RotationMultiplier;
	float ChangeModelRpm;
	EffectBlueprint BlowEffect;
	float TriggerGroundEffectHeight;
	float CriticallyDamagedRotationForce;
	bool OnlyTriggerBlowEffectInWater;
	bool GroundEffectOnTerrainOnly;
	bool CriticalDamage;
}

struct RotorModelData {
	float RotationRpm;
	uint32 PartIndex;
}

class RotorParameters : DataContainer {
	float CyclicInputScaleRoll;
	float CyclicInputScalePitch;
	float CollectiveThrottleInputScale;
	float CollectiveBrakeInputScale;
	float CollectiveInputIdle;
	float HorizontalForceModifier;
	Vec2[] AngleOfAttack;
	float CyclicFadeOutOffset;
	float AdditionalGravityModifier;
	float HorisontalMinEffectMod;
	float HorisontalMinEffectVelocity;
	bool EnableHorisontalMinEffect;
	bool ReverseThrottle;
}

class RoundEvent : MetricEvent {
	string LevelName;
	int32 JuiceSessionId;
}

class RoundOverEntityData : EntityData {
	TeamId Team;
}

class RoundOverEvent : MetricEvent {
	int32 WinningTeam;
	int32 TicketsLeft;
}

enum RouteChannel {
	RouteChannel_0 = 0,
	RouteChannel_1 = 1,
	RouteChannel_2 = 2,
	RouteChannel_3 = 3,
	RouteChannel_4 = 4,
	RouteChannel_5 = 5,
	RouteChannel_6 = 6,
	RouteChannel_7 = 7,
	RouteChannel_8 = 8,
	RouteChannel_9 = 9,
	RouteChannel_10 = 10,
	RouteChannel_11 = 11,
	RouteChannel_12 = 12,
	RouteChannel_13 = 13,
	RouteChannel_14 = 14,
	RouteChannel_15 = 15,
	RouteChannel_16 = 16,
	RouteChannel_17 = 17,
	RouteChannel_18 = 18,
	RouteChannel_19 = 19,
	RouteChannel_21 = 20,
	RouteChannel_22 = 21,
	RouteChannel_23 = 22,
	RouteChannel_24 = 23,
	RouteChannel_25 = 24,
	RouteChannel_26 = 25,
	RouteChannel_27 = 26,
	RouteChannel_28 = 27,
	RouteChannel_29 = 28,
	RouteChannel_30 = 29,
	RouteChannel_31 = 30,
	RouteChannel_32 = 31,
	RouteChannel_33 = 32,
	RouteChannel_34 = 33,
	RouteChannel_35 = 34,
	RouteChannel_36 = 35,
	RouteChannel_37 = 36,
	RouteChannel_38 = 37,
	RouteChannel_39 = 38,
	RouteChannel_40 = 39,
	RouteChannel_41 = 40,
	RouteChannel_42 = 41,
	RouteChannel_43 = 42,
	RouteChannel_44 = 43,
	RouteChannel_45 = 44,
	RouteChannel_46 = 45,
	RouteChannel_47 = 46,
	RouteChannel_48 = 47,
	RouteChannel_49 = 48,
	RouteChannel_50 = 49,
	RouteChannel_51 = 50,
	RouteChannel_52 = 51,
	RouteChannel_53 = 52,
	RouteChannel_54 = 53,
	RouteChannel_55 = 54,
	RouteChannel_56 = 55,
	RouteChannel_57 = 56,
	RouteChannel_58 = 57,
	RouteChannel_59 = 58,
	RouteChannel_60 = 59,
	RouteChannel_61 = 60,
	RouteChannel_62 = 61,
	RouteChannel_63 = 62
}

class RouteEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Output;
	AudioGraphNodePort Amplitude;
	SoundGraphPluginRef Plugin;
}

class RouteNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	RouteEntry[] Routes;
}

enum RouteType {
	RouteStop = 0,
	RouteCircular = 1
}

struct RumbleFiringData {
	float LowRumble;
	float HighRumble;
	float RumbleDuration;
}

enum SampleCenter {
	SampleCenter_Center = 0,
	SampleCenter_TopLeft = 1
}

class SamplerNodeData : AudioGraphNodeData {
	AudioGraphNodePort ExternalWave;
	AudioGraphNodePort Variation;
	AudioGraphNodePort Offset;
	AudioGraphNodePort Delay;
	AudioGraphNodePort Pitch;
	AudioGraphNodePort Amplitude;
	AudioGraphNodePort EnableStep;
	AudioGraphNodePort Buffer;
	AudioGraphNodePort Trigger;
	AudioGraphNodePort Release;
	AudioGraphNodePort Step;
	AudioGraphNodePort Output;
	AudioGraphNodePort Finished;
	AudioGraphNodePort Buffered;
	AudioGraphNodePort Position;
	SoundWaveAsset Wave;
	float BasePitch;
	LoopType Loop;
	SamplerPlugins[] Plugins;
	bool ShuffleSegments;
}

struct SamplerPlugins {
	SoundGraphPluginRef SndPlayer;
	SoundGraphPluginRef Resample;
	SoundGraphPluginRef Pause;
	SoundGraphPluginRef Gain;
}

class SampleTextureData : EvaluatorData {
	Vec2 TextureDimensions;
	Vec3 ColorIntensityMax;
	Vec3 ColorIntensityMin;
	Vec4[] GradientData;
	float TextureOriginU;
	float TextureOriginV;
}

class SaveEntityData : EntityData {
	TextureAsset SaveScreenTexture;
	string LevelName;
	string SaveFileName;
	string SaveNameSID;
	bool CheckForHumanPlayer;
}

class SaveGameLoadedEntityData : EntityData {
}

class ScaleClampNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort InMin;
	AudioGraphNodePort InMax;
	AudioGraphNodePort OutMin;
	AudioGraphNodePort OutMax;
	AudioGraphNodePort Out;
}

struct ScenarioTaskData {
	Vec3 EndPointWorldOffset;
	Vec3 StartPoint;
	int32 ScenarioId;
	int32 ActorId;
	int32 PartId;
	int32 LevelId;
	float WorldAngle;
	LinearTransform[] ConnectTransforms;
	float StartTurnDistance;
	float StartTimerDistance;
	float TriggerScenarioDelay;
	bool TriggerScenario;
	bool UseClientPosition;
}

class ScenarioWaypointData : AbstractLocoWaypointData {
	AntRef ScenarioAntRef;
	ScenarioTaskData ScenarioTask;
}

class SceneRecordingData : DataContainer {
	EntityRecordingData[] Data;
}

class ScopeFilterData : Asset {
}

class ScoreAggregate : MetricAggregate {
	float TotalScore;
}

enum ScoreboardPosition {
	ScoreboardPosition_FirstPlace = 0,
	ScoreboardPosition_SecondPlace = 1,
	ScoreboardPosition_ThirdPlace = 2,
	ScoreboardPosition_FourthPlace = 3,
	ScoreboardPosition_FifthPlace = 4,
	ScoreboardPosition_LAST_ITEM = 5
}

enum ScoringBucket {
	ScoringBucket_General = 0,
	ScoringBucket_Teamwork = 1,
	ScoringBucket_Bonus = 2,
	ScoringBucket_Squad = 3,
	ScoringBucket_Objective = 4,
	ScoringBucket_Award = 5,
	ScoringBucket_VehicleMBT = 6,
	ScoringBucket_VehicleIFV = 7,
	ScoringBucket_VehicleAA = 8,
	ScoringBucket_VehicleAttackHeli = 9,
	ScoringBucket_VehicleScoutHeli = 10,
	ScoringBucket_VehicleJet = 11,
	ScoringBucket_KitAssault = 12,
	ScoringBucket_KitEngineer = 13,
	ScoringBucket_KitRecon = 14,
	ScoringBucket_KitSupport = 15,
	ScoringBucket_SinglePlayer = 16,
	ScoringBucket_Cooperation = 17,
	ScoringBucket_CoopIndivid = 18,
	ScoringBucket_Unlock = 19,
	ScoringBucket_SpecialKit = 20,
	ScoringBucket_VehicleLBT = 21,
	ScoringBucket_VehicleArtillery = 22,
	ScoringBucket_LastScoringBucketItem = 23
}

class ScoringBucketData : DataContainer {
	ScoringBucket DestinationBucket;
	ScoringBucketType BucketType;
	string Name;
	ScoringBucketData TeamTotalBucket;
	ScoringBucketUnlockData[] Unlocks;
	StatsCategoryBaseData[] ConnectedCategories;
	bool AddToEntry;
	bool RoundScore;
	bool GlobalScore;
}

enum ScoringBucketType {
	ScoringBucketType_Disabled = 0,
	ScoringBucketType_Normal = 1,
	ScoringBucketType_Vehicle = 2,
	ScoringBucketType_Kit = 3,
	ScoringBucketType_Count = 4
}

struct ScoringBucketUnlockData {
	uint32 PointsNeeded;
	BasicUnlockInfo UnlockInfo;
}

class ScoringData : Asset {
	ScoringTypeData[] ScoringTypes;
	ScoringHandlerData[] ScoringHandlers;
	ScoringBucketData[] Buckets;
}

class ScoringHandlerData : DataContainer {
}

class ScoringTypeData : DataContainer {
	StatEvent Measuring;
	StatsCategoryBaseData ParamX;
	StatsCategoryBaseData ParamY;
	float Limit;
	string DescriptionSid;
	ScoringVisibilityType VisibilityType;
	ScoringBucket Bucket;
	float Score;
	float AdditionalValueMultiplier;
	bool ShowForTeam;
}

enum ScoringVisibilityType {
	ScoringVisibilityType_Major = 0,
	ScoringVisibilityType_Minor = 1,
	ScoringVisibilityType_Hidden = 2
}

class ScreenEffectComponentData : ComponentData {
	Vec4 ScreenEffectParams;
	ScreenEffectFrameType FrameType;
	SurfaceShaderBaseAsset Shader;
	float FrameWidth;
	float OuterFrameOpacity;
	float InnerFrameOpacity;
	float Angle;
	Realm Realm;
}

enum ScreenEffectFrameType {
	ScreenEffectFrameType_FullFrame = 0,
	ScreenEffectFrameType_SingleFramePart = 1,
	ScreenEffectFrameType_SingleSquareFramePart = 2
}

struct ScreenshotInfo {
	string Name;
	uint32 CropImageY1;
	uint32 CropImageX1;
	uint32 CropImageX2;
	uint32 CropImageY2;
	uint32 ResizeOutputImageHeight;
	uint32 ResizeOutputImageWidth;
	bool ResizeOutputImage;
	bool CropImage;
}

class ScriptEntityData : EntityData {
	string Code;
	Realm Realm;
}

class SearchAndDestroyConstantData : Asset {
	float TimeToWaitMin;
	float TimeToWaitMax;
	float DefaultSearchAndDestroyRadius;
}

class SearchAndDestroyOrderEntityData : BFOrderEntityData {
	TargetPosKnowledgeType TargetPosKnowledge;
	float FindTargetTime;
	bool TargetAreaFollowsTarget;
	bool Aggressive;
}

enum SecureReason {
	SecureReason_Ok = 0,
	SecureReason_WrongProtocolVersion = 1,
	SecureReason_WrongTitleVersion = 2,
	SecureReason_ServerFull = 3,
	SecureReason_KickedOut = 4,
	SecureReason_Banned = 5,
	SecureReason_GenericError = 6,
	SecureReason_WrongPassword = 7,
	SecureReason_KickedOutDemoOver = 8,
	SecureReason_RankRestricted = 9,
	SecureReason_ConfigurationNotAllowed = 10,
	SecureReason_ServerReclaimed = 11,
	SecureReason_MissingContent = 12,
	SecureReason_NotVerified = 13,
	SecureReason_TimedOut = 14,
	SecureReason_ConnectFailed = 15,
	SecureReason_NoReply = 16,
	SecureReason_AcceptFailed = 17,
	SecureReason_MismatchingContent = 18,
	SecureReason_InteractivityTimeout = 19,
	SecureReason_KickedFromQueue = 20,
	SecureReason_TeamKills = 21,
	SecureReason_KickedByAdmin = 22,
	SecureReason_KickedViaPunkBuster = 23,
	SecureReason_KickedOutServerFull = 24,
	SecureReason_ESportsMatchStarting = 25,
	SecureReason_NotInESportsRosters = 26,
	SecureReason_ESportsMatchEnding = 27,
	SecureReason_VirtualServerExpired = 28,
	SecureReason_VirtualServerRecreate = 29,
	SecureReason_ESportsTeamFull = 30,
	SecureReason_ESportsMatchAborted = 31,
	SecureReason_ESportsMatchWalkover = 32,
	SecureReason_ESportsMatchWarmupTimedOut = 33,
	SecureReason_NotAllowedToSpectate = 34,
	SecureReason_NoSpectateSlotAvailable = 35,
	SecureReason_InvalidSpectateJoin = 36,
	SecureReason_PremiumStatusMismatch = 37
}

class SelectEventEntityData : EntityData {
	Realm Realm;
	string[] Events;
}

class SendEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort In;
	AudioGraphParameter Target;
}

class SendNodeData : AudioGraphNodeData {
	SendEntry[] Entries;
}

class SenseTerrainSphereData : SphereData {
}

class SensingComponentData : ComponentData {
	SensingTemplateData Template;
	SensingSettings Settings;
	bool Enabled;
	bool SharedPlayerMemory;
	bool UseWeaponTransform;
}

struct SensingLimits {
	float HearingDistance;
	float HearingCutoff;
	float ViewAngle;
	float ViewDistance;
	float PeripheralViewAngle;
	float PeripheralViewDistance;
	float PeripheralMovementCutoff;
}

class SensingManagerEntityData : EntityData {
	SensingSphere[] SenseTerrainAreas;
}

class SensingSettings : Asset {
	double SensingTimeSpan;
	double AttackerTrackTime;
	double LineOfSightTestTime;
	int32 MaxRays;
	VisionBoxSettings CharacterVisionBoxSettings;
	VisionBoxSettings VehicleVisionBoxSettings;
	float CloseFireImpactDistance;
	float CloseExplosiveImpactDistance;
	float CloseTrajectoryDistance;
	float ImpactSenseDistance;
	float MaxVolume;
	float MaxSize;
	float MaxSpeed;
	float VolumeModifier;
	float MovementModifier;
	float LuckModifier;
	float BackgroundLoudnessFactor;
	float MotionSizeFactor;
	float MotionSpeedFactor;
	float MotionPeripheralityFactor;
	float MotionDistanceFactor;
	float SmokeSphereRadius;
	float SmokeSphereDuration;
	float SpawnOutOfLOSRaycastHeight;
	float SpawnOutOfLOSTraceDistance;
	float SpawnOutOfLOSRaycastDistance;
	float SpawnOutOfLOSRadius;
	SensingTemplateData DefaultTemplate;
}

struct SensingSphere {
	Vec3 Position;
	float RadiusSqr;
}

class SensingTemplateData : GameSensingTemplateData {
	double AwareForgetTime;
	double LostForgetTime;
	double TimeUntilUnseenIsLost;
	float MaximumMergeDistance;
	float MaximumAlertDistance;
	float MaximumReadinessRaiseDistance;
	SensingLimits ReadyLimits;
	SensingLimits RelaxedLimits;
	string DebugText;
	SensingLimits CombatLimits;
	bool UseSenseSharing;
	bool NoticeBullets;
}

struct SensitivityAtVelocity {
	float SteeringSensitivity;
	float Velocity;
}

class SequenceData : SequenceEntityData {
}

class SequenceEntityData : EntityData {
	SequenceEventData[] Events;
	int32 SequenceStartTime;
	int32 SequenceLength;
	float ExternalTime;
	PropertyTrackData[] PropertyTracks;
	Realm Realm;
	UpdatePass ServerUpdatePass;
	UpdatePass ClientUpdatePass;
	CustomSequenceTrackData[] CustomSequenceTracks;
	bool AutoPlayFirstFrame;
	bool Looping;
	bool AutoStart;
	bool PlayInReverse;
}

struct SequenceEventData {
	EventSpec Event;
	int32 Time;
}

class SequenceGeneratorNodeData : AudioGraphNodeData {
	AudioGraphNodePort Trigger;
	AudioGraphNodePort Reset;
	AudioGraphNodePort Min;
	AudioGraphNodePort Max;
	AudioGraphNodePort Step;
	AudioGraphNodePort Value;
}

enum ServerBackendAttribute {
	ServerBackendAttribute_Level = 0,
	ServerBackendAttribute_GameMode = 1,
	ServerBackendAttribute_LevelLocation = 2,
	ServerBackendAttribute_Mod = 3,
	ServerBackendAttribute_Public = 4,
	ServerBackendAttribute_Vip = 5,
	ServerBackendAttribute_Preset = 6,
	ServerBackendAttribute_Settings1 = 7,
	ServerBackendAttribute_Settings2 = 8,
	ServerBackendAttribute_MapSettings = 9,
	ServerBackendAttribute_Maps1 = 10,
	ServerBackendAttribute_Maps2 = 11,
	ServerBackendAttribute_Description1 = 12,
	ServerBackendAttribute_Description2 = 13,
	ServerBackendAttribute_Admins1 = 14,
	ServerBackendAttribute_Admins2 = 15,
	ServerBackendAttribute_ReservedSlots1 = 16,
	ServerBackendAttribute_ReservedSlots2 = 17,
	ServerBackendAttribute_Message = 18,
	ServerBackendAttribute_BannerUrl = 19,
	ServerBackendAttribute_Mission = 20,
	ServerBackendAttribute_Difficulty = 21,
	ServerBackendAttribute_PingSite = 22,
	ServerBackendAttribute_MapsInfo = 23,
	ServerBackendAttribute_Owner = 24,
	ServerBackendAttribute_MatchId = 25,
	ServerBackendAttribute_RosterA1 = 26,
	ServerBackendAttribute_RosterA2 = 27,
	ServerBackendAttribute_RosterA3 = 28,
	ServerBackendAttribute_RosterA4 = 29,
	ServerBackendAttribute_RosterA5 = 30,
	ServerBackendAttribute_RosterA6 = 31,
	ServerBackendAttribute_RosterA7 = 32,
	ServerBackendAttribute_RosterA8 = 33,
	ServerBackendAttribute_RosterA9 = 34,
	ServerBackendAttribute_RosterB1 = 35,
	ServerBackendAttribute_RosterB2 = 36,
	ServerBackendAttribute_RosterB3 = 37,
	ServerBackendAttribute_RosterB4 = 38,
	ServerBackendAttribute_RosterB5 = 39,
	ServerBackendAttribute_RosterB6 = 40,
	ServerBackendAttribute_RosterB7 = 41,
	ServerBackendAttribute_RosterB8 = 42,
	ServerBackendAttribute_RosterB9 = 43,
	ServerBackendAttribute_Spectators = 44,
	ServerBackendAttribute_ExpirationDate = 45,
	ServerBackendAttribute_MatchState = 46,
	ServerBackendAttribute_PremiumStatus = 47,
	ServerBackendAttribute_Count = 48
}

struct ServerBackendAttributeMapping {
	ServerBackendAttribute Attribute;
	string Setting;
	string DefaultValue;
}

class ServerBackendData : Asset {
	ServerBackendAttributeMapping[] Mappings;
}

struct ServerInfoSetting {
	string Key;
	string Name;
	bool IsBool;
}

enum ServerMapSequencerEventType {
	ServerMapSequencerEventType_Add = 0,
	ServerMapSequencerEventType_Remove = 1,
	ServerMapSequencerEventType_Clear = 2,
	ServerMapSequencerEventType_List = 3,
	ServerMapSequencerEventType_Load = 4,
	ServerMapSequencerEventType_Save = 5,
	ServerMapSequencerEventType_SetNextMapIndex = 6,
	ServerMapSequencerEventType_GetMapIndices = 7,
	ServerMapSequencerEventType_GetRounds = 8,
	ServerMapSequencerEventType_RunNextRound = 9,
	ServerMapSequencerEventType_RestartRound = 10,
	ServerMapSequencerEventType_AvailableMaps = 11
}

class ServerMetricsSettings : DataContainer {
	string ReportName;
	bool Enabled;
	bool DbxReportEnabled;
	bool TickTelemetryEnabled;
	bool DevelopmentTelemetryEnabled;
	bool PerformanceTelemetryEnabled;
	bool JuiceTelemetryEnabled;
	bool PerformanceProfileStateEnabled;
	bool TransactionTelemetryEnabled;
	bool CompressTransactions;
}

class ServerPerformanceEvent : MetricEvent {
	float CPUAverage;
	float CPUMemory;
	uint32 Received;
	uint32 Sent;
	float ReceivedAverage;
	float SentAverage;
}

class ServerSettings : SystemSettings {
	string InstancePath;
	uint32 RemoteControlPort;
	float DuplicationChance;
	uint32 MaxQueriesPerSecond;
	float CorruptionChance;
	string RemoteAdministrationPort;
	float MaxDropDuration;
	float ReorderingChance;
	float HumanHealthMultiplier;
	string ServerName;
	float MinDropDuration;
	uint32 SaveGameVersion;
	float PacketDrops;
	float DropSpikeChance;
	float MaxLatency;
	uint32 OutgoingRate;
	uint32 IncomingRate;
	string Playlist;
	string SavePoint;
	float IngameTimeout;
	float OutgoingFrequency;
	float RespawnTimeModifier;
	float MinLatency;
	string ServerPassword;
	float TimeoutTime;
	uint32 PlayerCountNeededForMultiplayer;
	float VehicleSpawnDelayModifier;
	string DebugMenuClick;
	string AdministrationPassword;
	float LoadingTimeout;
	int32 DedicatedServerCpu;
	bool DeathmatchDebugInfo;
	bool TimeoutGame;
	bool AILooksIntoCamera;
	bool IsStatsEnabled;
	bool IsTreeDestructionEnabled;
	bool HavokCaptureToFile;
	bool ShowTriggerDebugText;
	bool IsInternetSimulationEnabled;
	bool DisableCutscenes;
	bool JobEnable;
	bool ThreadingEnable;
	bool DrawActivePhysicsObjects;
	bool IsRanked;
	bool UnlockResolver;
	bool ScoringLogEnabled;
	bool HavokVisualDebugger;
	bool IsSoldierDetailedCollisionEnabled;
	bool LoadSavePoint;
	bool IsSoldierAnimationEnabled;
	bool IsAiEnabled;
	bool IsReconfigurable;
	bool IsDestructionEnabled;
	bool ForcePlaylist;
	bool IsNetworkStatsEnabled;
	bool AutoUnspawnBangers;
	bool RegulatedAIThrottle;
	bool EnableAnimationCulling;
	bool FallBackToSquadSpawn;
	bool AllowIndestructibleParts;
	bool IsPresenceEnabled;
	bool WaterPhysicsEnabled;
	bool RespawnOnDeathPosition;
	bool IsRenderDamageEvents;
	bool VehicleSpawnAllowed;
	bool QueryProviderEnabled;
	bool IsDesertingAllowed;
	bool DebrisClusterEnabled;
	bool AdministrationEnabled;
	bool AdministrationLogEnabled;
	bool AdministrationTimeStampLogNames;
	bool AdministrationEventsEnabled;
	bool AdministrationServerNameRestricted;
	bool ThreadedLoadingEnable;
	bool VegetationEnabled;
}

enum ServerUnlockListEventType {
	ServerUnlockListEventType_Add = 0,
	ServerUnlockListEventType_Remove = 1,
	ServerUnlockListEventType_Clear = 2,
	ServerUnlockListEventType_List = 3,
	ServerUnlockListEventType_Load = 4,
	ServerUnlockListEventType_Save = 5,
	ServerUnlockListEventType_GetMode = 6,
	ServerUnlockListEventType_SetMode = 7,
	ServerUnlockListEventType_SetFromBitmap = 8
}

enum ServerUnlockSystemType {
	ServerUnlockSystemType_All = 0,
	ServerUnlockSystemType_Common = 1,
	ServerUnlockSystemType_None = 2,
	ServerUnlockSystemType_FromStats = 3,
	ServerUnlockSystemType_FromWhiteList = 4,
	ServerUnlockSystemType_FromBlackList = 5,
	ServerUnlockSystemType_Count = 6
}

struct SettingConfig {
	string Key;
	string NameSid;
	string DescSid;
	uint32 Max;
	uint32 Default;
	uint32 Min;
	bool Ranked;
}

class SettingEntityData : EntityData {
	Realm Realm;
	string BoolSettingName;
	string IntSettingName;
	string FloatSettingName;
}

class SettingsBundleAsset : Asset {
	SystemSettings[] Settings;
}

enum ShaderBlendMode {
	ShaderBlendMode_Lerp = 0,
	ShaderBlendMode_Additive = 1,
	ShaderBlendMode_Multiply = 2,
	ShaderBlendMode_LerpPremultiplied = 3,
	ShaderBlendMode_DecalLerpNoSpec = 4,
	ShaderBlendMode_DecalLerpNormal = 5,
	ShaderBlendMode_DecalLerpNormalMultiplyDiffuse = 6,
	ShaderBlendMode_DecalLerpDiffuse = 7,
	ShaderBlendMode_DecalLerpDiffuseNoSpec = 8
}

enum ShaderBranchMethod {
	SbmStatic = 0,
	SbmFlat = 1,
	SbmDynamicIfElse = 2,
	SbmDynamicIfTrue = 3,
	SbmDynamicIfFalse = 4
}

class ShaderColorUnlockPartCollection : ShaderCustomizationUnlockPartCollection {
	ColorReference DefaultColorReference;
	ColorUnlockPartData[] UnlockParts;
}

enum ShaderComparisonOperator {
	ScoEquals = 0,
	ScoNotEquals = 1,
	ScoLess = 2,
	ScoLessEquals = 3,
	ScoGreater = 4,
	ScoGreaterEquals = 5
}

enum ShaderConstantFunction {
	ShaderConstantFunction_ViewMatrix = 0,
	ShaderConstantFunction_ViewProjMatrix = 1,
	ShaderConstantFunction_WorldViewMatrix = 2,
	ShaderConstantFunction_WorldViewProjMatrix = 3,
	ShaderConstantFunction_CrViewProjMatrix = 4,
	ShaderConstantFunction_CrWorldViewProjMatrix = 5,
	ShaderConstantFunction_CameraPos = 6,
	ShaderConstantFunction_PrevViewProjMatrix = 7,
	ShaderConstantFunction_PrevWorldViewProjMatrix = 8,
	ShaderConstantFunction_WorldMatrix = 9,
	ShaderConstantFunction_PrevWorldMatrix = 10,
	ShaderConstantFunction_BoneVectors = 11,
	ShaderConstantFunction_PrevBoneVectors = 12,
	ShaderConstantFunction_LightProbeShR = 13,
	ShaderConstantFunction_LightProbeShG = 14,
	ShaderConstantFunction_LightProbeShB = 15,
	ShaderConstantFunction_LightProbeShO = 16,
	ShaderConstantFunction_LightMapUvTransform = 17,
	ShaderConstantFunction_LightMapUvTranslation = 18,
	ShaderConstantFunction_LightMapIrradianceTexture = 19,
	ShaderConstantFunction_LightMapIrradianceChromaTexture = 20,
	ShaderConstantFunction_LightMapIrradianceLumaTexture = 21,
	ShaderConstantFunction_LightMapDirectionTexture = 22,
	ShaderConstantFunction_LightMapSkyVisibilityTexture = 23,
	ShaderConstantFunction_DepthBufferTexture = 24,
	ShaderConstantFunction_ViewportZMinMaxKzKw = 25,
	ShaderConstantFunction_Time = 26,
	ShaderConstantFunction_ScreenSize = 27,
	ShaderConstantFunction_OutdoorLightDir = 28,
	ShaderConstantFunction_OutdoorLightHemisphereDir = 29,
	ShaderConstantFunction_OutdoorLightKeyColor = 30,
	ShaderConstantFunction_OutdoorLightKeySpecularColorAndHemisphereVisibility = 31,
	ShaderConstantFunction_OutdoorLightTopColor = 32,
	ShaderConstantFunction_OutdoorLightBottomColor = 33,
	ShaderConstantFunction_OutdoorLightShadowTransform = 34,
	ShaderConstantFunction_OutdoorLightShadowmapSizeAndInvSize = 35,
	ShaderConstantFunction_OutdoorLightShadowmapTexture = 36,
	ShaderConstantFunction_OutdoorLightTransparencyShadowmapTexture = 37,
	ShaderConstantFunction_OutdoorLightSkyEnvmap = 38,
	ShaderConstantFunction_OutdoorLightDynamicEnvmap = 39,
	ShaderConstantFunction_OutdoorLightTopColorEnvmap = 40,
	ShaderConstantFunction_OutdoorLightBottomColorEnvmap = 41,
	ShaderConstantFunction_OutdoorLightKeyColorEnvmap = 42,
	ShaderConstantFunction_OutdoorLightSkyEnvmap8BitTexInvScale = 43,
	ShaderConstantFunction_TransparentStartAndEndAndClamp = 44,
	ShaderConstantFunction_BestFitNormalScaleTexture = 45,
	ShaderConstantFunction_SceneTexture = 46,
	ShaderConstantFunction_ColorScale = 47,
	ShaderConstantFunction_DebugNonFiniteColor = 48,
	ShaderConstantFunction_XenonInstancingIndexCount = 49,
	ShaderConstantFunction_Ps3ClipPlane = 50,
	ShaderConstantFunction_DxVectorBufferOffsets = 51,
	ShaderConstantFunctionCount = 52
}

enum ShaderConstantSystemTexture {
	ShaderConstantSystemTexture_DepthBufferTexture = 0,
	ShaderConstantSystemTextureCount = 1
}

class ShaderCustomizationUnlockPartCollection : DataContainer {
	ObjectBlueprint[] MeshBlueprints;
	string ShaderNodeName;
	CustomizedMeshMaterialsData[] MeshMaterials;
}

class ShaderDatabaseAsset : Asset {
	string LevelName;
}

enum ShaderDepthBiasGroup {
	ShaderDepthBiasGroup_Default = 0,
	ShaderDepthBiasGroup_Decal = 1,
	ShaderDepthBiasGroup_EmitterOcclusion = 2,
	ShaderDepthBiasGroup_EdgeModel = 3,
	ShaderDepthBiasGroup_TerrainDecal = 4,
	ShaderDepthBiasGroup_TerrainDecalZPass = 5,
	ShaderDepthBiasGroup_Shadow16Bit = 6,
	ShaderDepthBiasGroup_Shadow24Bit = 7,
	ShaderDepthBiasGroup_ZPass = 8,
	ShaderDepthBiasGroup_Emissive = 9,
	ShaderDepthBiasGroupCount = 10
}

enum ShaderGBufferLayout {
	ShaderGBufferLayout_Default = 0,
	ShaderGBufferLayout_Test = 1
}

enum ShaderGeometrySpace {
	ShaderGeometrySpace_Object = 0,
	ShaderGeometrySpace_ObjectScaled = 1,
	ShaderGeometrySpace_World = 2,
	ShaderGeometrySpace_Screen = 3
}

class ShaderGraph : SurfaceShaderBaseAsset {
	uint32 MaxSubMaterialCount;
	bool GammaCorrectionEnable;
}

enum ShaderInstancingMethod {
	ShaderInstancingMethod_None = 0,
	ShaderInstancingMethod_ObjectTransform4x3Half = 1,
	ShaderInstancingMethod_ObjectTransform4x3InstanceData4x1Half = 2,
	ShaderInstancingMethod_ObjectTransform4x3InstanceData4x2Half = 3,
	ShaderInstancingMethod_WorldTransform4x3Float = 4,
	ShaderInstancingMethod_ObjectTranslationScaleHalf = 5,
	ShaderInstancingMethod_ObjectTranslationScaleHalfInstanceData4x1Half = 6,
	ShaderInstancingMethod_ObjectTranslationScaleHalfInstanceData4x2Half = 7,
	ShaderInstancingMethod_VertexAnimation = 8,
	ShaderInstancingMethod_DxBuffer = 9,
	ShaderInstancingMethodCount = 10
}

enum ShaderInterpolationType {
	ShaderInterpolationType_Linear = 0,
	ShaderInterpolationType_Centroid = 1,
	ShaderInterpolationType_NoInterpolation = 2,
	ShaderInterpolationType_NoPerspective = 3,
	ShaderInterpolationType_Sample = 4,
	ShaderInterpolationType_Count = 5
}

enum ShaderLightingModel {
	ShaderLightingModel_Standard = 0,
	ShaderLightingModel_Metallic = 1,
	ShaderLightingModel_Skin = 2,
	ShaderLightingModel_DynamicEnvmap = 3,
	ShaderLightingModel_Translucent = 4
}

enum ShaderObjectLighting {
	ShaderObjectLighting_None = 0,
	ShaderObjectLighting_LightProbe = 1,
	ShaderObjectLighting_LightMap = 2
}

class ShaderParameterComponentData : ComponentData {
	ShaderParameterVector[] ShaderParameterVectors;
}

enum ShaderParameterType {
	ShaderParameterType_Bool = 0,
	ShaderParameterType_Int = 1,
	ShaderParameterType_Scalar = 2,
	ShaderParameterType_Vec2 = 3,
	ShaderParameterType_Vec3 = 4,
	ShaderParameterType_Vec4 = 5,
	ShaderParameterType_Color = 6,
	ShaderParameterType_TextureSlice = 7,
	ShaderParameterTypeCount = 8
}

struct ShaderParameterVector {
	Vec4 Value;
	string ParameterName;
}

class ShaderParamsComponentData : ComponentData {
	Vec4 Value;
	string ParameterName;
}

enum ShaderPortType {
	SptBool = 0,
	SptInteger = 1,
	SptScalar = 2,
	SptVec2 = 3,
	SptVec3 = 4,
	SptVec4 = 5,
	SptColor = 6
}

enum ShaderPositionSpace {
	ShaderPositionSpace_Object = 0,
	ShaderPositionSpace_World = 1
}

enum ShaderProgram {
	ShaderProgram_DebugRender_Font2d = 0,
	ShaderProgram_DebugRender_FontShadow2d = 1,
	ShaderProgram_DebugRender_Color2d = 2,
	ShaderProgram_DebugRender_Color3d = 3,
	ShaderProgram_DebugRender_Lit3d = 4,
	ShaderProgram_DebugRender_LitGrid3d = 5,
	ShaderProgram_SimpleWhite = 6,
	ShaderProgram_MaterialID = 7,
	ShaderProgram_DownsampleQuarter = 8,
	ShaderProgram_DownsampleQuarterZ = 9,
	ShaderProgram_DownsampleHalf = 10,
	ShaderProgram_DownsampleDepthHalfSingleSample = 11,
	ShaderProgram_DownsampleHalfGrayscaleLog = 12,
	ShaderProgram_DownsampleCubeHalfPoisson13 = 13,
	ShaderProgram_DownsampleCubeHalfPoisson13Clamped = 14,
	ShaderProgram_SeperableFilter = 15,
	ShaderProgram_GaussianBlurRgb15HCube = 16,
	ShaderProgram_GaussianBlurRgb15VCube = 17,
	ShaderProgram_FastGaussian9H = 18,
	ShaderProgram_FastGaussian9V = 19,
	ShaderProgram_GreyscaleGaussian9H = 20,
	ShaderProgram_GreyscaleGaussian9V = 21,
	ShaderProgram_CosineBlurRgbHCube = 22,
	ShaderProgram_CosineBlurRgbVCube = 23,
	ShaderProgram_GaussianBlurRgba15HCube = 24,
	ShaderProgram_GaussianBlurRgba15VCube = 25,
	ShaderProgram_CosineBlurRgbaHCube = 26,
	ShaderProgram_CosineBlurRgbaVCube = 27,
	ShaderProgram_Tex2d = 28,
	ShaderProgram_Tex2dConstantAlpha = 29,
	ShaderProgram_Tex2dSaturateAlpha = 30,
	ShaderProgram_Tex2dAlpha = 31,
	ShaderProgram_Tex2dAlphaOverlayAdd = 32,
	ShaderProgram_Tex2dAlphaOverlayLerp = 33,
	ShaderProgram_Tex2dPow = 34,
	ShaderProgram_Tex2dPowAlpha = 35,
	ShaderProgram_Tex2dMrt2 = 36,
	ShaderProgram_Tex2dMrt3 = 37,
	ShaderProgram_Tex2dMrt4 = 38,
	ShaderProgram_Tex2dGrayscaleLog = 39,
	ShaderProgram_Tex3d = 40,
	ShaderProgram_TexCube = 41,
	ShaderProgram_TexCubeAlpha = 42,
	ShaderProgram_TexCubeAlphaOverlayAdd = 43,
	ShaderProgram_TexCubeAlphaOverlayLerp = 44,
	ShaderProgram_Color = 45,
	ShaderProgram_Tonemap = 46,
	ShaderProgram_ColorGrade = 47,
	ShaderProgram_Dof = 48,
	ShaderProgram_UnprojectDepthBuffer = 49,
	ShaderProgram_UnprojectDepthBufferHalf = 50,
	ShaderProgram_UnprojectDepthBufferMsaa = 51,
	ShaderProgram_SingleDepthSampleMsaa = 52,
	ShaderProgram_MaxDepthSampleMsaa = 53,
	ShaderProgram_TexYCrCb = 54,
	ShaderProgram_CombineTextures2 = 55,
	ShaderProgram_CombineTextures3 = 56,
	ShaderProgram_CombineTextures4 = 57,
	ShaderProgram_CombineTextures5 = 58,
	ShaderProgram_CombineTextures6 = 59,
	ShaderProgram_CombineTextures2Bilinear = 60,
	ShaderProgram_CombineTextures3Bilinear = 61,
	ShaderProgram_CombineTextures4Bilinear = 62,
	ShaderProgram_CombineTextures5Bilinear = 63,
	ShaderProgram_CombineTextures6Bilinear = 64,
	ShaderProgram_CombineOpaqueAndTrans2d = 65,
	ShaderProgram_CombineOpaqueAndTransCube = 66,
	ShaderProgram_CombineOpaqueAndTrans2dSpecial = 67,
	ShaderProgram_CombineOpaqueAndTransCubeSpecial = 68,
	ShaderProgram_CrtHudFx = 69,
	ShaderProgram_CrtAnalogLinkHudFx = 70,
	ShaderProgram_RadialBlur = 71,
	ShaderProgram_PoissonRadialBlur = 72,
	ShaderProgram_ChromaticAberrationWithRadialBlend = 73,
	ShaderProgram_FLIR = 74,
	ShaderProgram_ColorTint = 75,
	ShaderProgram_WriteZ = 76,
	ShaderProgram_WriteHalfResZ = 77,
	ShaderProgram_WriteHalfResZFat = 78,
	ShaderProgram_WriteHalfResZAverage = 79,
	ShaderProgram_LinearZ = 80,
	ShaderProgram_ParticleVertexShadows = 81,
	ShaderProgram_ParticleVertexShadowsAccum = 82,
	ShaderProgram_ParticleVertexShadowsAccumBlend = 83,
	ShaderProgram_HalfResUpsampleBilateral = 84,
	ShaderProgram_HalfResUpsampleBilateralTiled = 85,
	ShaderProgram_HalfResUpsampleBilinearTiled = 86,
	ShaderProgram_HalfResCategorize = 87,
	ShaderProgram_HalfResCategorizeDownsample = 88,
	ShaderProgram_DigitalDistortion = 89,
	ShaderProgram_MotionBlur = 90,
	ShaderProgram_CalcVelocityFromZBuffer = 91,
	ShaderProgram_FXAA = 92,
	ShaderProgram_HorizonBasedAO = 93,
	ShaderProgram_HorizonBasedAO_BlurPS = 94,
	ShaderProgram_HorizonBasedAO_BlurCS = 95,
	ShaderProgram_HorizonBasedAO_PackAODepth = 96,
	ShaderProgram_HorizonBasedAO_CompositeTemporal = 97,
	ShaderProgram_HorizonBasedAO_NoiseDetection = 98,
	ShaderProgram_SSAO = 99,
	ShaderProgram_SSAO_DilateDraw = 100,
	ShaderProgram_LightTileDownsampleHalf = 101,
	ShaderProgram_LightTileDownsampleHalfStage2 = 102,
	ShaderProgram_LightTileDownsampleHalfStage3 = 103,
	ShaderProgram_TiledLightVisibility_Point = 104,
	ShaderProgram_TiledLightVisibility_Spot = 105,
	ShaderProgram_TiledLightVisibility_Line = 106,
	ShaderProgram_TiledLightVisibility_CalcTileFrustaData = 107,
	ShaderProgram_DeferredGBufferSimpleFixup = 108,
	ShaderProgram_MsaaClassify = 109,
	ShaderProgram_DeferredPointLight = 110,
	ShaderProgram_DeferredPointLightCS = 111,
	ShaderProgram_DeferredPointLightTile = 112,
	ShaderProgram_DeferredPointLightZ = 113,
	ShaderProgram_DeferredLineLight = 114,
	ShaderProgram_DeferredLineLightTile = 115,
	ShaderProgram_DeferredSpotLight = 116,
	ShaderProgram_DeferredSpotLightZ = 117,
	ShaderProgram_DeferredConeLight = 118,
	ShaderProgram_DeferredConeLightTile = 119,
	ShaderProgram_DeferredOutdoorLight = 120,
	ShaderProgram_DeferredOutdoorLightTile = 121,
	ShaderProgram_DeferredShadow = 122,
	ShaderProgram_Sky = 123,
	ShaderProgram_HeightfieldTessellation = 124,
	ShaderProgram_XenonMemCopy = 125,
	ShaderProgram_XenonFastUntile = 126,
	ShaderProgram_XenonFastDepthStencilFill = 127,
	ShaderProgram_XenonFastDepthStencilFill_ZOnly = 128,
	ShaderProgram_XenonJobEnable = 129,
	ShaderProgram_Ui_Textured = 130,
	ShaderProgram_Ui_Textured2 = 131,
	ShaderProgram_Ui_Textured3 = 132,
	ShaderProgram_Ui_Textured2GlobalColor = 133,
	ShaderProgram_Ui_Scaleform_StripSolidColor = 134,
	ShaderProgram_Ui_Scaleform_StripCxformTextureMultiply = 135,
	ShaderProgram_Ui_Scaleform_StripCxformTexture = 136,
	ShaderProgram_Ui_Scaleform_StripCxformGauraudNoAddAlpha = 137,
	ShaderProgram_Ui_Scaleform_StripCxformGauraud = 138,
	ShaderProgram_Ui_Scaleform_StripCxformGauraudTexture = 139,
	ShaderProgram_Ui_Scaleform_StripCxform2Texture = 140,
	ShaderProgram_Ui_Scaleform_StripCxformGauraudMultiply = 141,
	ShaderProgram_Ui_Scaleform_StripCxformGauraudMultiplyNoAddAlpha = 142,
	ShaderProgram_Ui_Scaleform_StripCxformGauraudMultiplyTexture = 143,
	ShaderProgram_Ui_Scaleform_StripCxformMultiply2Texture = 144,
	ShaderProgram_Ui_Scaleform_XY16iC32SolidColor = 145,
	ShaderProgram_Ui_Scaleform_XY16iC32CxformTextureMultiply = 146,
	ShaderProgram_Ui_Scaleform_XY16iC32CxformTexture = 147,
	ShaderProgram_Ui_Scaleform_XY16iC32CxformGauraudNoAddAlpha = 148,
	ShaderProgram_Ui_Scaleform_XY16iC32CxformGauraud = 149,
	ShaderProgram_Ui_Scaleform_XY16iC32CxformGauraudTexture = 150,
	ShaderProgram_Ui_Scaleform_XY16iC32Cxform2Texture = 151,
	ShaderProgram_Ui_Scaleform_XY16iC32CxformGauraudMultiply = 152,
	ShaderProgram_Ui_Scaleform_XY16iC32CxformGauraudMultiplyNoAddAlpha = 153,
	ShaderProgram_Ui_Scaleform_XY16iC32CxformGauraudMultiplyTexture = 154,
	ShaderProgram_Ui_Scaleform_XY16iC32CxformMultiply2Texture = 155,
	ShaderProgram_Ui_Scaleform_XY16iCF32SolidColor = 156,
	ShaderProgram_Ui_Scaleform_XY16iCF32CxformTextureMultiply = 157,
	ShaderProgram_Ui_Scaleform_XY16iCF32CxformTexture = 158,
	ShaderProgram_Ui_Scaleform_XY16iCF32CxformGauraudNoAddAlpha = 159,
	ShaderProgram_Ui_Scaleform_XY16iCF32CxformGauraud = 160,
	ShaderProgram_Ui_Scaleform_XY16iCF32CxformGauraudTexture = 161,
	ShaderProgram_Ui_Scaleform_XY16iCF32Cxform2Texture = 162,
	ShaderProgram_Ui_Scaleform_XY16iCF32CxformGauraudMultiply = 163,
	ShaderProgram_Ui_Scaleform_XY16iCF32CxformGauraudMultiplyNoAddAlpha = 164,
	ShaderProgram_Ui_Scaleform_XY16iCF32CxformGauraudMultiplyTexture = 165,
	ShaderProgram_Ui_Scaleform_XY16iCF32CxformMultiply2Texture = 166,
	ShaderProgram_Ui_Scaleform_XY16iCF32_T2SolidColor = 167,
	ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformTextureMultiply = 168,
	ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformTexture = 169,
	ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformGauraudNoAddAlpha = 170,
	ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformGauraud = 171,
	ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformGauraudTexture = 172,
	ShaderProgram_Ui_Scaleform_XY16iCF32_T2Cxform2Texture = 173,
	ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformGauraudMultiply = 174,
	ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformGauraudMultiplyNoAddAlpha = 175,
	ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformGauraudMultiplyTexture = 176,
	ShaderProgram_Ui_Scaleform_XY16iCF32_T2CxformMultiply2Texture = 177,
	ShaderProgram_Ui_Scaleform_GlyphTextTextureAlpha = 178,
	ShaderProgram_Ui_Scaleform_GlyphTextTextureColorMultiply = 179,
	ShaderProgram_Ui_Scaleform_GlyphTextTextureColor = 180,
	ShaderProgram_Ui_Scaleform_StripFilterBlur = 181,
	ShaderProgram_Ui_Scaleform_StripFilterShadow = 182,
	ShaderProgram_Ui_Scaleform_XY16iC32FilterBlur = 183,
	ShaderProgram_Ui_Scaleform_XY16iC32FilterShadow = 184,
	ShaderProgram_Ui_Scaleform_XY16iCF32FilterBlur = 185,
	ShaderProgram_Ui_Scaleform_XY16iCF32FilterShadow = 186,
	ShaderProgram_Ui_Scaleform_XY16iCF32_T2FilterBlur = 187,
	ShaderProgram_Ui_Scaleform_XY16iCF32_T2FilterShadow = 188,
	ShaderProgram_Ui_Scaleform_GlyphFilterBlur = 189,
	ShaderProgram_Ui_Scaleform_GlyphFilterShadow = 190,
	ShaderProgram_Ui_Minimap = 191,
	ShaderProgram_Ui_MinimapIcon = 192,
	ShaderProgram_Ui_CombatArea = 193,
	ShaderProgram_ExperimentShader_A = 194,
	ShaderProgram_ExperimentShader_B = 195,
	ShaderProgram_TextureCompress_A = 196,
	ShaderProgram_TextureCompress_DXT1 = 197,
	ShaderProgram_TextureCompress_DXT5 = 198,
	ShaderProgram_ErrorDifferenceSurface_RGB = 199,
	ShaderProgram_ErrorDifferenceSurface_Alpha = 200,
	ShaderProgram_XenonEncodeDXT5MemExport = 201,
	ShaderProgram_TerrainEncodeSurface_A = 202,
	ShaderProgram_TerrainEncodeSurface_B = 203,
	ShaderProgram_TerrainPatchVertexYFetch = 204,
	ShaderProgram_TerrainMeshScatteringYFetch = 205,
	ShaderProgram_TexYCrCbA = 206,
	ShaderProgram_RgbSeparation = 207,
	ShaderProgram_Distort = 208,
	ShaderProgram_DiffusionDofComputeRadius = 209,
	ShaderProgram_DiffusionDofTridiagonalFill = 210,
	ShaderProgram_DiffusionDofForwardCR = 211,
	ShaderProgram_DiffusionDofBackwardCR = 212,
	ShaderProgram_DiffusionDofSolveFinal = 213,
	ShaderProgram_DiffusionDofOutputPS = 214,
	ShaderProgram_DiffusionDofLinearRadiusPS = 215,
	ShaderProgram_DiffusionDofNonLinearRadiusPS = 216,
	ShaderProgram_DiffusionDofDetectForegroundPS = 217,
	ShaderProgram_DiffusionDofCombineForegroundPS = 218,
	ShaderProgram_DiffusionDofBlurXForegroundPS = 219,
	ShaderProgram_DiffusionDofBlurYForegroundPS = 220,
	ShaderProgram_Ui_DetailTexturedMinimap = 221,
	ShaderProgramCount = 222
}

enum ShaderRenderMode {
	ShaderRenderMode_Default = 0,
	ShaderRenderMode_DynamicEnvmap = 1,
	ShaderRenderMode_ZOnly = 2,
	ShaderRenderMode_DeferredShadingGBufferLayout0 = 3,
	ShaderRenderMode_DeferredShadingGBufferLayout1 = 4,
	ShaderRenderMode_DeferredShadingEmissive = 5,
	ShaderRenderMode_DeferredShadingUnlit = 6,
	ShaderRenderMode_VelocityVector = 7,
	ShaderRenderMode_DistortionVector = 8,
	ShaderRenderMode_AmbientOcclusionVolume = 9,
	ShaderRenderMode_DebugSimple = 10,
	ShaderRenderMode_DebugMulti = 11,
	ShaderRenderMode_DebugOverdraw = 12,
	ShaderRenderMode_DebugShaderCost = 13,
	ShaderRenderModeCount = 14
}

enum ShaderRenderPath {
	ShaderRenderPath_Dx10 = 0,
	ShaderRenderPath_Dx10Plus = 1,
	ShaderRenderPath_Dx10_1 = 2,
	ShaderRenderPath_Dx11 = 3,
	ShaderRenderPath_Xenon = 4,
	ShaderRenderPath_Ps3 = 5,
	ShaderRenderPath_Gl = 6,
	ShaderRenderPathCount = 7
}

enum ShaderShadowmapMethod {
	ShaderShadowmapMethod_None = 0,
	ShaderShadowmapMethod_Single = 1,
	ShaderShadowmapMethod_SingleDiscard = 2,
	ShaderShadowmapMethod_CascadedBox3 = 3,
	ShaderShadowmapMethod_CascadedBox4 = 4
}

enum ShaderShadowmapQuality {
	ShaderShadowmapQuality_Pcf2x2 = 0,
	ShaderShadowmapQuality_Pcf4x4 = 1,
	ShaderShadowmapQuality_Gaussian = 2
}

enum ShaderSkinningMethod {
	ShaderSkinningMethod_None = 0,
	ShaderSkinningMethod_Linear1Bone = 1,
	ShaderSkinningMethod_Linear2Bone = 2,
	ShaderSkinningMethod_Linear4Bone = 4,
	ShaderSkinningMethod_Linear8Bone = 8,
	ShaderSkinningMethod_Null = 9,
	ShaderSkinningMethod_DualQuaternion4Bone = 10
}

enum ShaderStageType {
	ShaderStageType_Vertex = 0,
	ShaderStageType_Pixel = 1,
	ShaderStageType_Hull = 2,
	ShaderStageType_Domain = 3,
	ShaderStageType_Geometry = 4,
	ShaderStageType_Compute = 5,
	ShaderStageTypeCount = 6
}

class ShaderSystemSettings : DataContainer {
	Vec3 DebugNonFiniteColor;
	uint32 DxInstancingBufferHandlingMethod;
	uint32 FrameMemoryBufferSize;
	uint32 XenonDispatchCmdBufferSize;
	uint32 XenonDispatchCmdBufferSegmentSize;
	uint32 DxDispatchJobBlocksPerCommandList;
	uint32 DxDispatchJobMinBlockCount;
	uint32 DxFrameVertexBufferPoolSize;
	int32 XenonDispatchOnlyJob;
	uint32 DxVsExternalConstantBufferSize;
	uint32 DxVsFunctionConstantBufferSize;
	uint32 DxPsFunctionConstantBufferSize;
	float Ps3GeometryYieldGranularity;
	uint32 XenonDispatchJobCount;
	int32 DispatchPrepareJobCount;
	uint32 Ps3MinMipmap;
	uint32 Ps3ZCullInFrontLimit;
	uint32 Ps3ZCullBehindLimit;
	int32 Ps3DispatchOnlyJob;
	uint32 Ps3DispatchJobSpuCount;
	uint32 DxMaxInstructionCount;
	uint32 OverdrawMaxLayerCount;
	uint32 Ps3GeometryJobCount;
	uint32 DxMaxInstanceCount;
	float Ps3DispatchYieldGranularity;
	uint32 DxPsExternalConstantBufferSize;
	uint32 XenonDispatchBlocksPerJob;
	uint32 Ps3DispatchJobCount;
	int32 DxDispatchJobCount;
	uint32 DrawCallMultiplier;
	uint32 Ps3MaxMipmap;
	float MipmapBias;
	uint32 MaxAnisotropy;
	uint32 ZOnlyMaxAnisotropy;
	uint32 XenonTrilinearThreshold;
	uint32 Ps3DispatchJobPriority;
	uint32 XenonDispatchMinJobBlockCount;
	uint32 Ps3GeometryJobSpuCount;
	uint32 Ps3DispatchBlocksPerJob;
	uint32 Ps3GeometryJobPriority;
	bool SinglePrimitiveEnable;
	bool SortBlocksEnable;
	bool DrawCallEnable;
	bool GcmReplayMarkersEnable;
	bool ClipPlanesEnable;
	bool DepthTestEnable;
	bool StencilEnable;
	bool ShaderPixScopeEnable;
	bool SingleFrameBlockLogEnable;
	bool AlphaBlendEnable;
	bool PixBlockEventsEnable;
	bool SimpleTexturesEnable;
	bool SimpleVertexShaderEnable;
	bool PseudoInstancingEnable;
	bool StatesEnable;
	bool PixelConstantsEnable;
	bool VertexConstantsEnable;
	bool PixelConstantRedundancyCheckingEnable;
	bool VertexConstantRedundancyCheckingEnable;
	bool SimpleTextureFilteringEnable;
	bool DepthWriteEnable;
	bool DispatchDirectEnable;
	bool DrawTileClassifiedBlocks;
	bool DepthEnable;
	bool DrawStreamedTextureBlocks;
	bool ForcePointFiltering;
	bool LogEnable;
	bool ZeroViewportEnable;
	bool DrawTransparentDecal;
	bool SingleFrameLogEnable;
	bool SingleFrameLogOverwrite;
	bool ForceDoubleSided;
	bool OnDemandMonitoringEnable;
	bool Ps3PixelShaderRedundancyCheckingEnable;
	bool Ps3PixelShaderHashStoreEnable;
	bool Ps3DispatchPrepareSpuJobEnable;
	bool Ps3DispatchSetupSpuJobEnable;
	bool Ps3GeometryJobEnable;
	bool DatabaseLoadingEnable;
	bool SimplePixelShaderEnable;
	bool Ps3GeometryJobWithoutDispatchJobEnable;
	bool Ps3GeometryDebugRenderEnable;
	bool BoneConstantOptimizationEnable;
	bool Ps3DrawEdgeGeometryEnable;
	bool Ps3DrawNonEdgeGeometryEnable;
	bool Ps3TriangleCullEnable;
	bool Ps3TriangleFrustumCullEnable;
	bool Ps3TriangleBackfaceCullEnable;
	bool Ps3TriangleCullZPassEnable;
	bool Ps3TriangleCullDoubleSidedEnable;
	bool Ps3TriangleCull1BoneSkinningEnable;
	bool Ps3TriangleCull4BoneSkinningEnable;
	bool Ps3TrianglePartCullEnable;
	bool Ps3DrawBlockCullEnable;
	bool Ps3PartitionFrustumCullEnable;
	bool Ps3PartitionClipPlaneCullEnable;
	bool Ps3PartitionVolumeCullEnable;
	bool Ps3SpuInstancingEnable;
	bool Ps3SpuClipPlaneRejectEnable;
	bool Ps3SpuCullVolumesEnable;
	bool Ps3DispatchJobEnable;
	bool OnDemandBuildingEnable;
	bool OnDemandPrimingEnable;
	bool DispatchExecuteEnable;
	bool TextureGammaCorrectionEnable;
	bool TileClassificationEnable;
	bool Ps3DispatchSpuBufferLinkingEnable;
	bool Ps3DispatchFrameBlockEnable;
	bool Ps3SCullEnable;
	bool Ps3ZCullEnable;
	bool DrawInstancedBlocks;
	bool DispatchPrepareBlockEnable;
	bool DrawNonInstancedBlocks;
	bool DrawNonStreamedTextureBlocks;
	bool Ps3TxpDemotionEnable;
	bool Ps3CmdBufVertexShaderInlineEnable;
	bool Ps3CmdBufClearEnable;
	bool Ps3SpuYieldingEnable;
	bool XenonDispatchJobEnable;
	bool DrawInlineBlocks;
	bool Ps3FlushEnable;
	bool Ps3FinishEnable;
	bool DxMultisampleEnable;
	bool DxTransparencySupersamplingEnable;
	bool DxSamplerStatesEnable;
	bool DxBatchedSamplerStatesEnable;
	bool DxBatchedTexturesEnable;
	bool DxStatesEnable;
	bool DrawOpaqueAlphaTestSimple;
	bool FlushEnable;
	bool DrawTransparent;
	bool DrawAdvancedStats;
	bool DxParallelShaderLoadingEnable;
	bool DxDelayedShaderLoadingEnable;
	bool DrawOpaque;
	bool DrawOpaqueAlphaTest;
	bool XenonHiZEnable;
	bool DrawZOnly;
	bool DrawStats;
	bool XenonDispatchBlockOnCmdBufEnable;
}

enum ShaderTextureCoordType {
	ShaderTextureCoordType_Unknown = 0,
	ShaderTextureCoordType_VertexElement = 1,
	ShaderTextureCoordType_WorldPos = 2
}

enum ShaderTextureDecompression {
	ShaderTextureDecompression_None = 0,
	ShaderTextureDecompression_NormalAG = 1,
	ShaderTextureDecompression_NormalRG = 2,
	ShaderTextureDecompression_NormalRGA = 3,
	ShaderTextureDecompression_RGBE = 4,
	ShaderTextureDecompression_SrgbToLinear = 5,
	ShaderTextureDecompression_NormalRGorAG = 6
}

class ShaderTextureUnlockPartCollection : ShaderCustomizationUnlockPartCollection {
	TextureReference DefaultTextureReference;
	TextureUnlockPartData[] UnlockParts;
}

enum ShaderTimeType {
	ShaderTimeType_Game = 0,
	ShaderTimeType_Real = 1
}

enum ShaderValueFormat {
	ShaderValueFormat_Half = 0,
	ShaderValueFormat_Float = 1,
	ShaderValueFormat_Int = 2,
	ShaderValueFormat_UInt = 3,
	ShaderValueFormat_Bool = 4
}

enum ShaderValueParameterType {
	SvptLiteral = 0,
	SvptExternalPermutation = 1,
	SvptExternalConstant = 2,
	SvptExternalSubMaterial = 3
}

enum ShaderValueType {
	ShaderValueType_None = 0,
	ShaderValueType_Half1 = 1,
	ShaderValueType_Half1x2 = 2,
	ShaderValueType_Half1x3 = 3,
	ShaderValueType_Half1x4 = 4,
	ShaderValueType_Half2 = 5,
	ShaderValueType_Half2x2 = 6,
	ShaderValueType_Half2x3 = 7,
	ShaderValueType_Half2x4 = 8,
	ShaderValueType_Half3 = 9,
	ShaderValueType_Half3x2 = 10,
	ShaderValueType_Half3x3 = 11,
	ShaderValueType_Half3x4 = 12,
	ShaderValueType_Half4 = 13,
	ShaderValueType_Half4x2 = 14,
	ShaderValueType_Half4x3 = 15,
	ShaderValueType_Half4x4 = 16,
	ShaderValueType_Float1 = 17,
	ShaderValueType_Float1x2 = 18,
	ShaderValueType_Float1x3 = 19,
	ShaderValueType_Float1x4 = 20,
	ShaderValueType_Float2 = 21,
	ShaderValueType_Float2x2 = 22,
	ShaderValueType_Float2x3 = 23,
	ShaderValueType_Float2x4 = 24,
	ShaderValueType_Float3 = 25,
	ShaderValueType_Float3x2 = 26,
	ShaderValueType_Float3x3 = 27,
	ShaderValueType_Float3x4 = 28,
	ShaderValueType_Float4 = 29,
	ShaderValueType_Float4x2 = 30,
	ShaderValueType_Float4x3 = 31,
	ShaderValueType_Float4x4 = 32,
	ShaderValueType_Int1 = 33,
	ShaderValueType_Int1x2 = 34,
	ShaderValueType_Int1x3 = 35,
	ShaderValueType_Int1x4 = 36,
	ShaderValueType_Int2 = 37,
	ShaderValueType_Int2x2 = 38,
	ShaderValueType_Int2x3 = 39,
	ShaderValueType_Int2x4 = 40,
	ShaderValueType_Int3 = 41,
	ShaderValueType_Int3x2 = 42,
	ShaderValueType_Int3x3 = 43,
	ShaderValueType_Int3x4 = 44,
	ShaderValueType_Int4 = 45,
	ShaderValueType_Int4x2 = 46,
	ShaderValueType_Int4x3 = 47,
	ShaderValueType_Int4x4 = 48,
	ShaderValueType_UInt1 = 49,
	ShaderValueType_UInt1x2 = 50,
	ShaderValueType_UInt1x3 = 51,
	ShaderValueType_UInt1x4 = 52,
	ShaderValueType_UInt2 = 53,
	ShaderValueType_UInt2x2 = 54,
	ShaderValueType_UInt2x3 = 55,
	ShaderValueType_UInt2x4 = 56,
	ShaderValueType_UInt3 = 57,
	ShaderValueType_UInt3x2 = 58,
	ShaderValueType_UInt3x3 = 59,
	ShaderValueType_UInt3x4 = 60,
	ShaderValueType_UInt4 = 61,
	ShaderValueType_UInt4x2 = 62,
	ShaderValueType_UInt4x3 = 63,
	ShaderValueType_UInt4x4 = 64,
	ShaderValueType_Bool1 = 65,
	ShaderValueType_Bool1x2 = 66,
	ShaderValueType_Bool1x3 = 67,
	ShaderValueType_Bool1x4 = 68,
	ShaderValueType_Bool2 = 69,
	ShaderValueType_Bool2x2 = 70,
	ShaderValueType_Bool2x3 = 71,
	ShaderValueType_Bool2x4 = 72,
	ShaderValueType_Bool3 = 73,
	ShaderValueType_Bool3x2 = 74,
	ShaderValueType_Bool3x3 = 75,
	ShaderValueType_Bool3x4 = 76,
	ShaderValueType_Bool4 = 77,
	ShaderValueType_Bool4x2 = 78,
	ShaderValueType_Bool4x3 = 79,
	ShaderValueType_Bool4x4 = 80,
	ShaderValueType_Sampler1d = 81,
	ShaderValueType_Sampler1dArray = 82,
	ShaderValueType_Sampler2d = 83,
	ShaderValueType_Sampler2dArray = 84,
	ShaderValueType_Sampler3d = 85,
	ShaderValueType_SamplerCube = 86
}

enum ShapeType {
	ShapeType_Hull = 0,
	ShapeType_Box = 1,
	ShapeType_OBB = 2,
	ShapeType_Sphere = 3,
	ShapeType_Cylinder = 4,
	ShapeType_Capsule = 5,
	ShapeType_Mesh = 6,
	ShapeType_Decompose = 7,
	ShapeType_Unknown = 8
}

class ShootAtFromCoverData : EntityData {
	StrengthType StrengthType;
	ShootType ShootType;
	bool CycleTargets;
	bool RandomTargetOrder;
	bool PreferAlternativeWeapon;
}

enum ShooterInfo {
	ShooterInfoInVehicle = 1,
	ShooterInfoInLandVehicle = 2,
	ShooterInfoInAerialVehicle = 4,
	ShooterInfoDrivingVehicle = 8,
	ShooterInfoInStationaryWeapon = 16,
	ShooterInfoInLightArmoredVehicle = 32,
	ShooterInfoInMediumArmoredVehicle = 64,
	ShooterInfoInHeavyArmoredVehicle = 128,
	ShooterInfoInBoat = 256,
	ShooterInfoUsedGrenade = 512,
	ShooterInfoUsedArtilleryStrike = 1024,
	ShooterInfoUsedLaserDesignator = 2048,
	ShooterInfoUsedMortarStrike = 4096,
	ShooterInfoUsedStingerMissile = 8192,
	ShooterInfoNoTeamKillPenalty = 16384
}

class ShootOrderEntityData : BFOrderEntityData {
	StrengthType StrengthType;
	PoseType Pose;
	ShootType ShootType;
	bool PreferAlternativeWeapon;
	bool CompleteWhenHumanIsSensed;
	bool CycleTargets;
	bool RandomTargetOrder;
}

enum ShootType {
	ShootType_OneBurstPerTarget = 0,
	ShootType_Continuous = 1
}

struct ShotConfigData {
	Vec3 InitialPosition;
	Vec3 InitialDirection;
	Vec3 InitialSpeed;
	float InheritWeaponSpeedAmount;
	ExplosionEntityData MuzzleExplosion;
	ProjectileEntityData ProjectileData;
	ProjectileEntityData SecondaryProjectileData;
	ProjectileBlueprint Projectile;
	ProjectileBlueprint SecondaryProjectile;
	UnlockableProjectile[] AlternateProjectiles;
	float SpawnDelay;
	uint32 NumberOfBulletsPerShell;
	uint32 NumberOfBulletsPerShot;
	uint32 NumberOfBulletsPerBurst;
	bool RelativeTargetAiming;
	bool ForceSpawnToCamera;
	bool SpawnVisualAtWeaponBone;
	bool ActiveForceSpawnToCamera;
}

struct SimpleAnimationControlBinding {
	AntRef LocoTarget;
}

class SimpleAnimationControlComponentData : ComponentData {
	SimpleAnimationControlBinding Binding;
	int32 AnimationEntitySpacePriority;
	bool Run;
}

class SimpleMovementActionBaseData : MovementActionData {
	SimpleMovementActionTimeData StartTimeInfo;
	SimpleMovementActionTimeData RunTimeInfo;
}

class SimpleMovementActionData : SimpleMovementActionBaseData {
	float Level;
	EntryInputActionEnum Action;
	int32 SpecialAnimationIndex;
	bool Respawn;
	bool Teleport;
}

struct SimpleMovementActionTimeData {
	float Time;
	float MaxVariation;
}

class SimplePropertyTrackData : PropertyTrackData {
	InterpolationType InterpolationType;
}

class SimpleTransformNodeData : AudioGraphNodeData {
	AudioGraphNodePort X;
	AudioGraphNodePort Y;
	AudioGraphNodePort Z;
	SimpleTransformOperation Operation;
	AngleUnit AngleUnit;
}

enum SimpleTransformOperation {
	SimpleTransformOperation_Add = 0,
	SimpleTransformOperation_Subtract = 1,
	SimpleTransformOperation_Multiply = 2,
	SimpleTransformOperation_Divide = 3,
	SimpleTransformOperation_Sine = 4,
	SimpleTransformOperation_Cosine = 5,
	SimpleTransformOperation_ArcSine = 6,
	SimpleTransformOperation_ArcCosine = 7,
	SimpleTransformOperation_Modulus = 8,
	SimpleTransformOperation_Round = 9,
	SimpleTransformOperation_Floor = 10,
	SimpleTransformOperation_Ceiling = 11,
	SimpleTransformOperation_Power = 12,
	SimpleTransformOperation_SquareRoot = 13,
	SimpleTransformOperation_Absolute = 14,
	SimpleTransformOperation_Exp = 15,
	SimpleTransformOperation_Log = 16,
	SimpleTransformOperation_Log10 = 17,
	SimpleTransformOperation_Tangent = 18,
	SimpleTransformOperation_ArcTangent = 19
}

class SimpleValueSelectorNodeData : AudioGraphNodeData {
	float[] OutValues;
	AudioGraphNodePort Index;
	AudioGraphNodePort Out;
}

class SingleTerrainLayerData : TerrainLayerData {
}

class SkeletonAsset : BaseSkeletonAsset {
	string[] BoneNames;
	int32[] Hierarchy;
	LinearTransform[] LocalPose;
	LinearTransform[] ModelPose;
	string WeaponBoneName;
	string HeadBoneName;
	string HipBoneName;
	string CameraBoneName;
}

class SkeletonCollisionData : DataContainer {
	SkeletonAsset SkeletonAsset;
	BoneCollisionData[] BoneCollisionData;
}

class SkinnedMeshAsset : MeshAsset {
	Vec3 BoundingBoxPositionOffset;
	Vec3 BoundingBoxSizeOffset;
}

class SkinnedSocketObjectData : SocketObjectData {
	int32 FaceposerLibraryIndex;
}

enum SKU {
	WW = 0,
	EU = 1,
	US = 2,
	JPN = 3,
	ROA = 4,
	RU = 5,
	EN = 6
}

struct SkyCloudLayer {
	Vec3 Color;
	float TileFactor;
	float Rotation;
	float Altitude;
	float Speed;
	float SunLightPower;
	float AmbientLightIntensity;
	float SunLightIntensity;
	float AlphaMul;
	TextureAsset Texture;
}

class SkyComponentData : ComponentData {
	Vec3 CloudLayerSunColor;
	Vec3 CloudLayer2Color;
	Vec3 CloudLayer1Color;
	TextureAsset SkyGradientTexture;
	float SunSize;
	float BrightnessScale;
	float SunScale;
	float PanoramicUVMaxX;
	float PanoramicUVMinY;
	float PanoramicUVMaxY;
	Realm Realm;
	float PanoramicUVMinX;
	TextureAsset PanoramicTexture;
	TextureAsset PanoramicAlphaTexture;
	float PanoramicTileFactor;
	TextureAsset CloudLayerMaskTexture;
	float CloudLayer1Altitude;
	float CloudLayer1TileFactor;
	float CloudLayer1Rotation;
	float CloudLayer1Speed;
	float CloudLayer1SunLightIntensity;
	float PanoramicRotation;
	float CloudLayer1AmbientLightIntensity;
	float CloudLayer1SunLightPower;
	float CloudLayer1AlphaMul;
	TextureAsset CloudLayer1Texture;
	float CloudLayer2Altitude;
	float CloudLayer2TileFactor;
	float CloudLayer2Rotation;
	float CloudLayer2Speed;
	float CloudLayer2SunLightIntensity;
	float CloudLayer2SunLightPower;
	float CloudLayer2AmbientLightIntensity;
	float StaticEnvmapScale;
	float CloudLayer2AlphaMul;
	TextureAsset CloudLayer2Texture;
	TextureAsset StaticEnvmapTexture;
	float SkyVisibilityExponent;
	float SkyEnvmap8BitTexScale;
	TextureAsset CustomEnvmapTexture;
	float CustomEnvmapScale;
	float CustomEnvmapAmbient;
	bool Enable;
}

class SkyEffectState : DataContainer {
	Vec3 CloudLayerSunColor;
	float PanoramicTileFactor;
	float SunSize;
	float SkyGradientScale;
	float SunScale;
	float PanoramicUVMinX;
	TextureAsset SkyGradientTexture;
	float PanoramicUVMinY;
	float PanoramicUVMaxY;
	float PanoramicUVMaxX;
	float PanoramicRotation;
	TextureAsset PanoramicTexture;
	TextureAsset PanoramicAlphaTexture;
	float WindDirection;
	TextureAsset CloudLayerMaskTexture;
	SkyCloudLayer CloudLayer1;
	SkyCloudLayer CloudLayer2;
	TextureAsset StaticEnvmapTexture;
	bool Enable;
}

class SlidingStateData : CharacterStateData {
	float HorizontalInputScale;
	float GravityScale;
}

class SlowMotionEntityData : EntityData {
	Realm Realm;
	float TimeScale;
	float ScaleDownTransitionTime;
	float ScaleUpTransitionTime;
}

struct SmokeJammingData {
	float JammingTime;
	float MaxRadius;
	float MinRadius;
	float TargetUpdateTime;
	bool EnableSmokeJamming;
	bool JammingPositionIsLocationDependent;
	bool ReportJammedBasedOnStartPosition;
}

class SniperLensScopeFilterData : ScopeFilterData {
	Vec2 ChromaticAberrationStrengths;
	Vec2 BlurCenter;
	Vec3 ChromaticAberrationColor1;
	Vec3 ChromaticAberrationColor2;
	Vec2 RadialBlendDistanceCoefficients;
	Vec2 ChromaticAberrationDisplacement1;
	Vec2 ChromaticAberrationDisplacement2;
	float BlurScale;
	ColorTintData ColorTintData;
}

class SocketData : DataContainer {
	LinearTransform BoneRigidTransform;
	LinearTransform Transform;
	UnlockAssetBase UnlockAsset;
	int32 BoneId;
	string BoneName;
	SocketObjectDataBase[] AvailableObjects;
	GearSlot GearSlot;
	SocketType SocketType;
	bool UsesDefaultObject;
	bool Excluded;
	bool DefaultEnableSocketEntities;
	bool ForceSocketEntitiesEnabled;
	bool HideByZoomTransition;
	bool HideByLightToggle;
}

class SocketObjectData : SocketObjectDataBase {
	guid Asset1pGuid;
	guid[] Variation1pGuids;
	guid Asset1pZoomGuid;
	guid[] Variation1pZoomGuids;
	guid Asset3pGuid;
	guid[] Variation3pGuids;
	CustomizedMaterialData[] CustomizedMaterials;
}

class SocketObjectDataBase : DataContainer {
}

enum SocketPhysics {
	SocketPhysics_Default = 0,
	SocketPhysics_FakePhysics = 1,
	SocketPhysics_Droppable = 2
}

enum SocketType {
	SocketType_Undefined = 0,
	SocketType_Gameplay = 1,
	SocketType_Visual = 2
}

class SoldierAimAssistData : GameDataContainer {
	Vec3 EyePosOffset;
	Vec3 StickyBoxScale;
	Vec3 SnapDistanceScale;
	Vec3 SnapBoxScale;
	Vec3 StickyDistanceScale;
	Vec2 MaxAcceleration;
	float AccelerationDamping;
	float AccelerationInputThreshold;
	float AccelerationMultiplier;
	float SquaredAcceleration;
	float YawSpeedStrength;
	float[] ZoomedInputPolynomial;
	float AccelerationTimeThreshold;
	float[] AttractDistanceFallOff;
	float AttractUserInputMultiplier;
	float AttractOwnSpeedInfluence;
	float AttractTargetSpeedInfluence;
	float AttractOwnRequiredMovementForMaximumAttract;
	float AttractStartInputThreshold;
	float AttractZoomingMultiplier;
	float AttractZoomingPostTime;
	float AttractYawStrength;
	float AttractPitchStrength;
	float PitchSpeedStrength;
	float AttractSoftZone;
	float[] InputPolynomial;
	bool UseYawAcceleration;
	bool UsePitchAcceleration;
}

class SoldierAimingConstraintsData : DataContainer {
	AimingConstraintsData SwimmingConstraints;
}

class SoldierAimingSimulationData : GameDataContainer {
	ZoomLevelData[] ZoomLevels;
	float ZoomTransitionTime;
	SoldierAimAssistData AimAssist;
	AimingPoseData StandPose;
	AimingPoseData CrouchPose;
	AimingPoseData PronePose;
	ZoomLevelSpecificTransitionTime[] ZoomTransitionTimeArray;
	float FovTransitionTime;
	float FovDelayTime;
	AimerModifierData[] Modifiers;
	float AimingRange;
	float LockAimToTargetSpeed;
	bool ReturnToZoomAfterReload;
}

struct SoldierAnimatedCameraData {
	float CameraTransitionTime;
	bool EnableFeature;
}

class SoldierAsset : SoldierBlueprint {
}

class SoldierAutoAimData : DataContainer {
	AutoAimData[] Poses;
}

class SoldierBlueprint : CharacterBlueprint {
}

class SoldierBodyComponentData : ComponentData {
	float SprintMultiplier;
	float OverrideGravityValue;
	float OverrideVelocityY;
	bool OverrideVelocity;
	bool OverrideGravity;
}

enum SoldierBuffId {
	SBImprovedBodyArmor = 0,
	SBCount = 1
}

class SoldierCameraComponentData : ComponentData {
	float ExplosionImpulseMultiplier;
	float StrafeTiltStrength;
	float PitchTiltStrength;
	TargetCameraData[] Cameras;
	CameraBinding CameraBinding;
	float ForceFieldOfView;
	bool AuthoritativeEyePosition;
	bool DisableAiming;
}

enum SoldierChangeAction {
	SCA_Done = 0,
	SCA_Altered = 1,
	SCA_None = 2
}

class SoldierCustomizationAsset : CharacterCustomizationAsset {
	CustomizationTable WeaponTable;
}

class SoldierDecalComponentData : ComponentData {
	DecalTemplateData SplashDecal;
	float SplashRayLength;
	DecalTemplateData PoolDecal;
	float PoolRayYOffset;
	float PoolRayLength;
}

struct SoldierDetonationData {
	float Angle;
	float MinSpeedForActivation;
	float Radius;
	float SoldierDetonationActivationDelay;
	bool UseAngle;
	bool HasSoldierDetonation;
}

enum SoldierEmote {
	SoldierEmote_Spot = 0,
	SoldierEmote_Ok = 1,
	SoldierEmote_NeedARide = 2,
	SoldierEmote_GoGoGo = 3,
	SoldierEmote_NeedBackup = 4,
	SoldierEmote_Thanks = 5,
	SoldierEmote_NeedMedic = 6,
	SoldierEmote_FollowMe = 7,
	SoldierEmote_NeedAmmo = 8,
	SoldierEmote_Sorry = 9,
	SoldierEmote_No = 10,
	SoldierEmote_DefendCapturePoint = 11,
	SoldierEmote_AttackCapturePoint = 12,
	SoldierEmote_MoveToPosition = 13,
	SoldierEmote_Count = 14
}

struct SoldierEmoteBinding {
	AntRef Speak;
	AntRef IsSquadLeader;
	AntRef EmoteSpot;
	AntRef EmoteOk;
	AntRef EmoteNeedARide;
	AntRef EmoteGoGoGo;
	AntRef EmoteNeedBackup;
	AntRef EmoteThanks;
	AntRef EmoteNeedMedic;
	AntRef EmoteFollowMe;
	AntRef EmoteNeedAmmo;
	AntRef EmoteSorry;
	AntRef EmoteNo;
	AntRef EmoteDefendCapturePoint;
	AntRef EmoteAttackCapturePoint;
	AntRef EmoteMoveToPosition;
}

class SoldierEmoteComponentData : ComponentData {
	SoldierEmoteBinding Binding;
	SoldierEmoteNetworkedMessageMapping[] NetworkedMessageMappings;
}

class SoldierEmoteNetworkedMessageMapping : DataContainer {
	SoldierEmote Emote;
	UIMessageType[] Messages;
}

class SoldierEntityData : CharacterEntityData {
	Vec3 FLIRKeyColor;
	MaterialContainerPair HeadMaterialPair;
	BoneFakePhysicsData[] BoneFakePhysics;
	SoldierAutoAimData AutoAim;
	SoldierAimingConstraintsData AimingConstraints;
	SoldierHeadCollisionData HeadCollision;
	CharacterPhysicsData CharacterPhysics;
	MaterialContainerPair FootMaterialPair;
	SoldierSprintSettingsData SprintSettings;
	SoldierMeshData[] Meshes1p;
	SoldierMeshData[] Meshes3p;
	HidableSoldierMeshWeaponPart[] HidableMeshParts;
	SoldierSoundData Sound;
	StreamGroupData StreamGroup1p;
	float ImpulseReactionTime;
	SoldierHealthModuleData HealthModule;
	float MaxHealth;
	CollisionData CollisionInfo;
	EntityVoiceOverInfo VoiceOverInfo;
	float FLIRValue;
	BreathControlData[] BreathControl;
	float ExplosionDamageModifier;
	UIPartData[] UIParts;
	float RegenerationDelayModifier;
	bool FreeSpaceCheck;
	bool ProximityCheck;
	bool EnableGroundmapLighting;
	bool ShowWeaponWhenDead;
	bool LowerGunOnOwnTeam;
	bool UseSpineXRotation;
	bool CollisionEnabled;
	bool PhysicsControlled;
	bool IsPushable;
	bool HumanPlayerControlled;
	bool InteractiveManDownAllowed;
	bool ShowNametag;
}

class SoldierEntityInteractionComponentData : EntityInteractionComponentData {
}

class SoldierEntryComponentData : EntryComponentData {
	AimingConstraintsData AimingConstraints;
	AntEnumeration AntEntryEnumeration;
	bool AlignConstraintsToEntity;
}

class SoldierFootplantEffectComponentData : ComponentData {
	MaterialContainerPair FootMaterialPair;
	float HeightOverGroundThreshold;
	float FootVelocityThreshold;
	float LodDistance;
	bool FullFootplantingEnabled;
}

class SoldierGripComponentData : ComponentData {
}

class SoldierHeadCollisionData : DataContainer {
	float HeadRadius;
	SoldierHeadCollisionPoseData[] PoseStates;
}

struct SoldierHeadCollisionPoseData {
	Vec3 IdleOffset;
	Vec3 MovingForwardOffset;
}

struct SoldierHealthModuleBinding {
	AntRef HeadShot;
	AntRef LeftArmHit;
	AntRef RightArmHit;
	AntRef LeftLegHit;
	AntRef RightLegHit;
	AntRef OnGround;
	AntRef DeathAnimationTriggered;
	AntRef RandomAnimationIndex;
	AntRef Sprinting;
	AntRef HitLeft;
	AntRef HitRight;
	AntRef HitFront;
	AntRef HitBack;
	AntRef DeathHitDirection;
	AntRef Explosion;
	AntRef Dead;
	AntRef Revived;
	AntRef RandomValue;
	AntRef Pose;
	AntRef RightSpeed;
	AntRef ForwardSpeed;
	AntRef CriticallyHit;
	AntRef InteractiveManDown;
}

class SoldierHealthModuleData : DataContainer {
}

struct SoldierMeshData {
	SkinnedMeshAsset Mesh;
	ObjectBlueprint MeshBlueprint;
	int32 RandomGroup;
}

class SoldierMovementSequenceData : MovementActionData {
	RecordedInputData RecordedInput;
	int32 InputRecordingIndex;
	bool IgnoreRecordingIndexFilter;
	bool ReportWhenFinished;
}

struct SoldierParachuteBinding {
	AntRef Enabled;
	AntRef SteerLeftRight;
	AntRef AccelerateBrake;
	AntRef Pitch;
	AntRef Roll;
}

class SoldierParachuteComponentData : ComponentData {
	SoldierParachuteBinding Binding;
	AimingConstraintsData AimingConstraints;
	float UndeployTime;
}

class SoldierSoundComponentData : ComponentData {
	float WalkVelocityThreshold;
	float RunVelocityThreshold;
	float WalkPeriod;
	float RunPeriod;
}

class SoldierSoundData : DataContainer {
	SoundAsset Movement;
	SoundAsset Death;
	SoundAsset BulletImpact;
	SoundAsset Healing;
	SoundAsset BreathControl;
	SoundAsset HitIndicator;
	SoundAsset PickupKit;
	SoundAsset PickupAmmo;
	float SprintTimeForRecovery;
	float MovementThreshold;
	float MinHealSoundTime;
}

class SoldierSpawnAppearanceTemplateData : Asset {
	uint32 Body;
}

class SoldierSpawnKitTemplateData : Asset {
	uint32 Kit;
	uint32 MainGun;
}

class SoldierSpawnTemplateData : Asset {
	CustomizeSoldierData CustomizeSoldierData;
	GameSensingTemplateData Sensing;
	GameBehaviourTemplateData Behaviour;
	AnimationSpawnTemplate AnimationTemplate;
	VoiceOverLabel[] VoiceOverLabels;
}

class SoldierSprintSettingsData : DataContainer {
	float Fov;
	float FovInDelay;
	float FovInTime;
	float FovOutDelay;
	float FovOutTime;
	float RecoverTime;
	float SprintToProneRecoverTime;
	EntryInputActionEnum[] InterruptingActions;
}

class SoldierSuppressionComponentData : ComponentData {
	SuppressionReactionData ReactionToSuppression;
	float SuppressionResistModifier;
	float SuppressionBoostModifier;
	float SuppressionDecay;
	float SuppressionSphereRadius;
	float FallOffDelay;
	float FallOffMultiplier;
	bool SuppressionAbortsHealthRegeneration;
	bool CheckLineOfSight;
}

class SoldierTestEntityData : GameEntityData {
	SoldierBlueprint TestSoldier;
	SoldierSpawnTemplateData Template;
	VehicleBlueprint TestVehicle;
	float SpecialAnimationIndex;
	RawFileAsset UnlocksProfile;
	TeamId Team;
	int32 RandomSeed;
	MovementActionData StartSequence;
	MovementActionRoot StartSequenceRoot;
	float YawInputVal;
	string CameraMovementsFilename;
	InputRecorderData InputRecorder;
	float ThrottleInputVal;
	float FireInputVal;
	float StrafeInputVal;
	float ProneInputVal;
	float PitchInputVal;
	float RollInputVal;
	float ZoomInputVal;
	float JumpInputVal;
	float ActiveInputRecording;
	float AuthoritativeAimingActive;
	float FireCounterMeasure;
	float AuthoritativeYaw;
	float AuthoritativePitch;
	bool RunAutomatically;
	bool UseUnlocksProfile;
	bool SprintInputVal;
}

class SoldierWeaponAsset : SoldierWeaponBlueprint {
}

class SoldierWeaponBlueprint : ObjectBlueprint {
}

class SoldierWeaponCustomizationAsset : Asset {
	CustomizationTable Customization;
}

class SoldierWeaponData : WeaponEntityData {
	Vec3 InteractionOffset;
	WeaponModifierData[] WeaponModifierData;
	SoldierAimingSimulationData AimingController;
	FirstPersonCameraData FirstPersonCamera;
	HudData Hud;
	string DamageGiverName;
	PickupSettingsData PickupSettings;
	WeaponAnimBaseSetEnum AnimBaseSet;
	AntPackageAsset AnimationData;
	float RenderFov;
	float ZoomRenderFov;
	StreamGroupData StreamGroup1p;
	EntityVoiceOverInfo VoiceOverInfo;
	QuickThrowTypeEnum QuickThrowType;
	SoldierWeaponCustomizationAsset Customization;
	float WeaponFloatParam;
	SocketData[] Sockets;
	EntryInputActionEnum SwitchWeaponStateInputAction;
	SoldierWeaponBlueprint SoldierWeaponBlueprint;
	string PersistenceId;
	bool AllowSwitchingToWeaponOutOfAmmo;
	bool HideWhenOutOfAmmo;
	bool LowerOnOwnTeam;
	bool RedeployWhenSwitchingWeaponStates;
	bool UseQuickThrowOnAutomaticSwitchback;
	bool EnableBreathControl;
	bool CanBeInSupportedShooting;
	bool AllowSwitchingToWeaponReloading;
	bool SwitchToPrimaryWhenOutOfAmmo;
	bool AllowSwitchingToWeaponInVehicles;
	bool IsSilenced;
}

struct SoldierWeaponDispersion {
	FiringDispersionData StandDispersion;
	FiringDispersionData CrouchDispersion;
	FiringDispersionData ProneDispersion;
	float JumpDispersionAngle;
	float ProneTransitionDispersionAngle;
	float MoveDispersionAngle;
	float MoveZoomedDispersionAngle;
	float DecreasePerSecond;
}

class SoldierWeaponMultiUnlock : UnlockUserDataBase {
	UnlockAssetBase First;
	UnlockAssetPair[] UnlockAssetPairs;
}

class SoldierWeaponOverrideData : DataContainer {
	WeaponOverrideData[] Overrides;
}

class SoldierWeaponsComponentData : ComponentData {
	LinearTransform AimDir;
	SkeletonAsset WeaponSkeleton;
	int32 PrimaryWeaponId;
	AnimatedWeaponBinding AnimatedWeaponBinding;
	Animated1pOnlyWeaponBinding Animated1pOnlyWeaponBinding;
	Animated3pOnlyWeaponBinding Animated3pOnlyWeaponBinding;
	float LockTimeMultiplier;
	int32 GrenadeIncrease;
	float AmmoClipIncreaseMultiplier;
	float ExplosiveIncreaseMultiplier;
	int32 UnderslungGrenadeIncrease;
	bool UseExternalAimDir;
	bool UnlimitedAmmo;
	bool UnlimitedMags;
}

class SoldierWeaponSwitchingData : Asset {
	WeaponSwitchingMapData[] SwitchMap;
	DirectWeaponSwitchingMapData[] DirectSwitchMap;
	float SwitchToGadgetCooldownTime;
}

class SoldierWeaponUnlockAsset : UnlockAssetBase {
	SoldierWeaponBlueprint Weapon;
	UnlockAssetBase Extra;
	uint32 WeaponIdentifier;
}

class SoundAreaEntityData : EntityData {
	SoundAsset Sound;
	BigWorldSettingsAsset BigWorld;
	float FadeWidth;
	float ProximityMultiplier;
	FadeCurveType FadeCurve;
}

class SoundAsset : Asset {
	SoundScopeData Scope;
}

class SoundBusData : AudioGraphNodeData {
	string BusName;
	SoundGraphPluginRef SubmixPlugin;
	int8 ChannelCount;
}

class SoundDataAsset : Asset {
	uint32 NameHash;
	SoundDataChunk[] Chunks;
}

struct SoundDataChunk {
	guid ChunkId;
	uint32 ChunkSize;
}

enum SoundDataRequestResult {
	SoundDataRequestResult_NotRequested = 0,
	SoundDataRequestResult_Requested = 1,
	SoundDataRequestResult_Available = 2
}

enum SoundDataState {
	SoundDataState_Pending = 0,
	SoundDataState_Cancelled = 1,
	SoundDataState_Lost = 2,
	SoundDataState_Valid = 3
}

class SoundEffectEntityData : EffectEntityData {
	SoundAsset Sound;
}

class SoundEntityData : EntityData {
	LinearTransform Transform;
	SoundAsset Sound;
	int32 ObstructionHandle;
	bool PlayOnCreation;
}

class SoundEnvironmentConstantData : Asset {
	float HumanPlayerSoldierMovementVolumeOverride;
	float MemoryTime;
	float MinimumLoudness;
}

class SoundGraphAsset : SoundAsset {
	SoundGraphData Graph;
	MixerAsset Mixer;
}

class SoundGraphData : AudioGraphData {
	SoundGraphInfo Info;
	AudioGraphParameter[] InputParameters;
	AudioGraphParameter[] OutputParameters;
	AudioGraphEvent[] InputEvents;
	AudioGraphEvent[] OutputEvents;
}

struct SoundGraphInfo {
	SoundGraphVoiceInfo[] Voices;
	SoundGraphLinkedPluginAttribute[] LinkedPluginAttributes;
	SoundGraphPluginConnection[] Connections;
	SoundGraphPluginConstructParam[] ConstructParams;
	uint32 PluginsParamCount;
	uint32 PluginCount;
}

struct SoundGraphLinkedPluginAttribute {
	SoundGraphPluginRef Plugin;
	AudioGraphNodeData Node;
	AudioGraphNodePort Port;
	int8 AttributeIndex;
	bool AllowExtremeValues;
}

struct SoundGraphPluginConnection {
	SoundGraphPluginConnectionType ConnectionType;
	SoundGraphPluginConnectionParam[] Parameters;
	SoundBusData Bus;
	int8 VoiceIndex;
}

struct SoundGraphPluginConnectionParam {
	float Value;
	int8 Index;
}

enum SoundGraphPluginConnectionType {
	SoundGraphPluginConnectionType_Unconnected = 0,
	SoundGraphPluginConnectionType_Voice = 1,
	SoundGraphPluginConnectionType_Bus = 2
}

struct SoundGraphPluginConstructParam {
	float Value;
	int8 Index;
}

struct SoundGraphPluginInfo {
	uint32 Id;
	uint32 EnableAttributeReadMask;
	int8 ConnectionIndex;
	int8 OutputChannelCount;
	int8 ConstructParamsIndex;
	int8 ConstructParamCount;
}

struct SoundGraphPluginRef {
	bool IsValid;
	int8 VoiceIndex;
	int8 PluginIndex;
}

struct SoundGraphVoiceInfo {
	SoundGraphPluginInfo[] Plugins;
	int8 ProcessingStage;
}

class SoundMasterPatchAsset : SoundGraphAsset {
	SoundBusData[] Busses;
	SoundBusData RwMovieBus;
}

class SoundPatchAsset : SoundGraphAsset {
	AudioGraphNodeData[] OutputNodes;
	float Loudness;
	float AILoudness;
	float Radius;
	float DopplerFactor;
	float MasterPitch;
	MixGroup MixGroup;
	AudioGraphEvent DefaultStopEvent;
	AudioGraphEvent DefaultStartEvent;
	AudioGraphEvent DefaultForceInitEvent;
	AudioGraphEvent DefaultEnterScopeEvent;
	bool IsPersistent;
	bool IsLooping;
}

class SoundPatchConfigurationAsset : SoundAsset {
	SoundPatchAsset Sound;
	SoundPatchConfigurationEntry[] Entries;
	float Loudness;
}

class SoundPatchConfigurationAssetEntry : SoundPatchConfigurationEntry {
	uint32 NameHash;
	Asset Value;
}

class SoundPatchConfigurationEntry : DataContainer {
}

class SoundPatchConfigurationParameterEntry : SoundPatchConfigurationEntry {
	uint32 NameHash;
	float Value;
}

enum SoundPatchDefaultEvent {
	SoundPatchDefaultEvent_Start = 0,
	SoundPatchDefaultEvent_Stop = 1,
	SoundPatchDefaultEvent_EnterScope = 2,
	SoundPatchDefaultEvent_ForceInit = 3
}

struct SoundPatchPublicNode {
	AudioGraphNodeData Node;
	uint32 Id;
}

class SoundPrimeEntityData : EntityData {
	SoundDataAsset[] DataAssets;
}

class SoundScopeData : DataContainer {
	string Name;
	SoundScopeStrategyData DefaultStrategy;
}

class SoundScopeSetupData : DataContainer {
	string Name;
	SoundScopeStrategyMapping[] Mappings;
}

class SoundScopeSetupEntityData : EntityData {
	SoundScopeSetupData Setup;
}

class SoundScopeStrategyData : DataContainer {
	string Name;
}

struct SoundScopeStrategyMapping {
	SoundScopeData Scope;
	SoundScopeStrategyData Strategy;
}

class SoundSettings : SystemSettings {
	string VOEnglish;
	string AudioSystemUri;
	string VOCommon;
	string VOItalian;
	string VOSpanish;
	string VOFrench;
	string VOGerman;
	bool Enable;
}

class SoundState : DataContainer {
	string Name;
	float LpCutoffFrequency;
	float Duration;
	float FadeInTime;
	float FadeOutTime;
	SoundAsset BypassSound;
	HdrSetting HdrSetting;
	MixerAsset Mixer;
	bool FadeSound;
}

class SoundStateEntityData : EntityData {
	SoundState SoundState;
}

class SoundStateSettingsAsset : Asset {
	SoundState[] SoundStates;
	float ImpairedHearingImpulseThreshold;
	float ScreamThreshold;
	float SupressionThreshold;
}

class SoundTestAsset : Asset {
	SoundTestTaskSpec[] TaskSpecs;
	SoundTestSpec[] TestSpecs;
	SoundTestSuite[] Suites;
}

class SoundTestEventTask : SoundTestTaskSpec {
	string EventName;
}

enum SoundTestParamBehavior {
	SoundTestParamBehavior_Constant = 0,
	SoundTestParamBehavior_LinearRamp = 1,
	SoundTestParamBehavior_Random = 2
}

class SoundTestParamTask : SoundTestTaskSpec {
	string ParamName;
	SoundTestParamBehavior Behavior;
	float RangeMin;
	float RangeMax;
	float InitialValue;
}

class SoundTestSpec : DataContainer {
	string Name;
	string Description;
	SoundTestTask MainStartTask;
	SoundTestTask MainStopTask;
	float Duration;
	SoundTestTask[] Tasks;
}

class SoundTestSuite : DataContainer {
	string Name;
	SoundAsset[] Assets;
	SoundTestSpec[] Tests;
	bool ProfileTests;
}

class SoundTestTask : DataContainer {
	SoundTestTaskSpec Spec;
	SoundTestTaskParam Param;
	float StartTime;
	uint32 Repetitions;
}

class SoundTestTaskParam : DataContainer {
}

class SoundTestTaskSpec : DataContainer {
	string Description;
	float Duration;
}

enum SoundTestTransformBehavior {
	SoundTestTransformBehavior_Static = 0
}

class SoundTestTransformTask : SoundTestTaskSpec {
	Vec3 InitialPosition;
	SoundTestTransformBehavior Behavior;
	bool RelativeListener;
}

class SoundWaveAsset : SoundDataAsset {
	SoundWaveVariation[] Variations;
	SoundWaveLocalizationInfo[] Localization;
	string[] SubtitleStringIds;
	SoundWaveVariationSelection Selection;
	StreamPoolAsset StreamPool;
	bool Seekable;
	bool PreferAvailableVariations;
	int8 PersistentVariationCount;
	int8 ChannelCount;
	int8 VoicePriority;
	int8 PrimePriority;
	int8 RequestPriority;
}

struct SoundWaveLocalizationInfo {
	AudioLanguage Language;
	uint16 FirstVariationIndex;
	uint16 VariationCount;
}

enum SoundWaveReadPriority {
	SoundWaveReadPriority_Unspecified = 0,
	SoundWaveReadPriority_Low = 1,
	SoundWaveReadPriority_Medium = 2,
	SoundWaveReadPriority_Normal = 3,
	SoundWaveReadPriority_High = 4
}

struct SoundWaveSubtitle {
	float Time;
	int8 StringIndex;
}

class SoundWaveVariation : DataContainer {
	SoundWaveSubtitle[] Subtitles;
	uint32 SeekTablesSize;
	SoundWaveVariationSegment[] Segments;
	int8 ChunkIndex;
	int8 FirstLoopSegmentIndex;
	int8 LastLoopSegmentIndex;
}

struct SoundWaveVariationSegment {
	uint32 SamplesOffset;
	uint32 SeekTableOffset;
	float SegmentLength;
}

enum SoundWaveVariationSelection {
	SwvsSequential = 0,
	SwvsRandom = 1
}

enum SoundWaveVoicePriority {
	SoundWaveVoicePriority_Unspecified = 0,
	SoundWaveVoicePriority_Low = 1,
	SoundWaveVoicePriority_Normal = 2,
	SoundWaveVoicePriority_High = 3,
	SoundWaveVoicePriority_Permanent = 4
}

enum SpaceType {
	STBody = 0,
	STWorld = 1
}

class SpatialEntityData : EntityData {
	LinearTransform Transform;
}

class SpatialPrefabBlueprint : PrefabBlueprint {
}

class SpatialReferenceObjectData : ReferenceObjectData {
}

class SpawnAnimationData : ProcessorData {
	float AnimationSpeed;
}

class SpawnAnimationFrameData : ProcessorData {
	uint32 AnimationFrame;
}

class SpawnDirectionData : ProcessorData {
	float DirectionFromEmitterOrigin;
	bool InheritSpeedAndDirectionFromEmitter;
}

class SpawnEntitySelector : DataContainer {
}

class SpawnEvent : MetricEvent {
	Vec3 Position;
	float Time;
}

class SpawnOrientationData : ProcessorData {
}

class SpawnPointManagerData : Asset {
	bool UseAiLodSystem;
}

class SpawnPositionData : ProcessorData {
}

class SpawnRateData : ProcessorData {
	float SpawnRate;
	float TrailSegmentLength;
	bool DistributeOverTime;
	bool DistributeOverDistance;
}

class SpawnReferenceObjectData : ReferenceObjectData {
	LinearTransform AirdropTransform;
	LinearTransform ControllableInput;
	LinearTransform ControllableTransform;
	string LocationNameSid;
	string LocationTextSid;
	TeamId Team;
	uint32 SpawnProtectionFriendlyKilledCount;
	float SpawnProtectionFriendlyKilledTime;
	float RotationRoll;
	float Throttle;
	float InitialSpawnDelay;
	float SpawnDelay;
	int32 MaxCount;
	int32 MaxCountSimultaneously;
	int32 TotalCountSimultaneouslyOfType;
	float SpawnAreaRadius;
	float SpawnProtectionRadius;
	float RotationYaw;
	float RotationPitch;
	float InitialVelocity;
	int32 TakeControlEntryIndex;
	bool SpawnProtectionCheckAllTeams;
	bool ClearBangersOnSpawn;
	bool TryToSpawnOutOfSight;
	bool SendWeaponEvents;
	bool TakeControlOnTransformChange;
	bool ReturnControlOnIdle;
	bool AutoSpawn;
	bool UseAsSpawnPoint;
	bool LockedTeam;
	bool InitialAutoSpawn;
	bool OverwriteThrottle;
	bool OnlySendEventForHumanPlayers;
	bool Enabled;
	bool IsDynamicSpawn;
}

class SpawnRotationData : ProcessorData {
	float Rotation;
}

class SpawnRotationSpeedData : ProcessorData {
	float RotationSpeed;
}

struct SpawnScreenWeaponData {
	string WeaponName;
	TextureAsset Texture;
}

class SpawnSizeData : ProcessorData {
	float Size;
}

class SpawnSpeedData : ProcessorData {
	float Speed;
}

class SpawnState : MetricState {
	int32 Team;
}

class SpawnSubViewData : SubViewData {
}

class SpawnSurveyEvent : MetricEvent {
	guid SurveyMetricLink;
}

struct SpecialMoveInterpolatedPoint {
	Vec3 Value;
	float Time;
}

struct SpecialMovesBinding {
	AntRef TriggerHighVault;
	AntRef TriggerUpVault;
	AntRef TriggerLowVault;
	AntRef TriggerSlideIntoProne;
	AntRef TriggerSpecialAnimation;
	AntRef SpecialAnimationIndex;
	AntRef ObjectHeight;
	AntRef ObjectDistance;
	AntRef StartObjectDistanceTimer;
	AntRef VaultObjectPositionX;
	AntRef VaultObjectPositionZ;
	AntRef CancelAnimation;
}

class SpecialMovesComponentData : ComponentData {
	SpecialMoveStateData VaultOverHighState;
	SpecialMoveStateData VaultUpHighState;
	SpecialMoveStateData VaultOverLowState;
	SpecialMoveStateData SprintToProneState;
	SpecialMoveStateData DeathState;
	SpecialMoveStateData SpecialAnimationState;
	SpecialMoveStateData[] IndexedDeathStates;
	SpecialMoveStateData[] IndexedSpecialAnimationStates;
	SpecialMoveVaultStateCriteria[] IndexedVaultOverHighStates;
	SpecialMoveVaultStateCriteria[] IndexedVaultUpStates;
	SpecialMoveVaultStateCriteria[] IndexedVaultOverLowStates;
	SpecialMovesBinding Binding;
}

enum SpecialMovesPoseType {
	SpecialMovesPoseType_None = -1,
	SpecialMovesPoseType_Stand = 0,
	SpecialMovesPoseType_Crouch = 1,
	SpecialMovesPoseType_Prone = 2
}

struct SpecialMoveStateData {
	float MinHeightScale;
	float OptimumDistanceFromObject;
	float OptimumHeightOfObject;
	float OptimumLengthOfObject;
	float MaxDistanceScale;
	float MinDistanceScale;
	float MaxHeightScale;
	SpecialMoveInterpolatedPoint[] MotionPoints;
	float MaxObjectLengthScale;
	float MinObjectLengthScale;
	float ExitAnimationDrivenStateVelocity;
	SpecialMovesPoseType ResetPose;
	SpecialMovesPoseType OverridePose;
	SpecialMoveInterpolatedPoint[] GravityPoints;
	bool KeepInitialSoldierDirection;
	bool ScaleWithDistanceToObject;
}

struct SpecialMoveVaultStateCriteria {
	float DistToObject;
	float DistToObjectTolerance;
	float HeightOfObject;
	float HeightOfObjectTolerance;
	float LengthOfObject;
	float LengthOfObjectTolerance;
	SpecialMoveStateData SpecialMoveState;
}

class SpectatorReplayEntityData : EntityData {
}

class SpectatorSubViewData : SubViewData {
}

class SpeedEventGateEntityData : GameEntityData {
	float MinSpeed;
	float MaxSpeed;
}

struct SpeedModifierData {
	float ForwardConstant;
	float BackwardConstant;
	float LeftConstant;
	float RightConstant;
}

struct SphereCollisionData {
	float ExtraRadius;
	float CounterNormalBrakeForceMod;
	bool Enabled;
}

class SphereData : BaseShapeData {
	Vec3 Position;
	float Radius;
}

class SphereEvaluatorData : EvaluatorData {
	Vec3 Scale;
	Vec3 Pivot;
	float Radius;
}

class SplitterNode : UINodeData {
	UINodePort In;
	UINodePort[] Outputs;
}

class SpotLightEntityData : LocalLightEntityData {
	SpotLightShape Shape;
	float ConeInnerAngle;
	float ConeOuterAngle;
	float FrustumFov;
	float FrustumAspect;
	float OrthoWidth;
	float OrthoHeight;
	TextureAsset Texture;
	QualityLevel CastShadowsMinLevel;
	bool CastShadowsEnable;
}

enum SpotLightShape {
	SpotLightShape_Cone = 0,
	SpotLightShape_Frustum = 1,
	SpotLightShape_OrthoFrustum = 2
}

class SpottingComponentData : ComponentData {
	float SpottingFov;
	float TeamOrderFov;
	float SpottingDistance;
	float PassiveSpottingTimeInterval;
	float TimeRequiredToPassiveSpot;
	float OrderNeedAmmoPercentage;
	float OrderHealPercentage;
	float OrderRepairPercentage;
	float PickupOrderDistance;
	float HealOrderDistance;
	float AmmoOrderDistance;
	float RepairOrderDistance;
	float CoolDownHistoryTime;
	int32 CoolDownAllowedSpotsWithinHistory;
	bool OnlyAllowedToHaveOneSpottedPlayer;
}

class SpottingEntityData : EntityData {
	Realm Realm;
	TeamId TeamToSpot;
	bool Enabled;
}

class SpottingScoringHandlerData : ScoringHandlerData {
}

class SpottingTargetComponentData : ComponentData {
	float ActiveSpottedTime;
	float PassiveSpottedTime;
	float ActiveSpottedTimeMultiplier;
	float PassiveSpottedTimeMultiplier;
	float SpotOnFireMultiplier;
	bool TargetBoundingBoxCenter;
}

enum SpottingType {
	STGunner = 0,
	STSquadLeader = 1,
	STDefault = 2,
	STPersonal = 3,
	STSnapshot = 4,
	STSquadUav = 5,
	STTypesCount = 6
}

enum SpotType {
	SpotType_None = 0,
	SpotType_Active = 1,
	SpotType_Passive = 2,
	SpotType_Radar = 3,
	SpotType_Unspottable = 4,
	SpotType_Count = 5
}

struct SpringData {
	float Length;
	float Stiffness;
	float Damping;
	float MaxSpringForce;
	float ProgressiveStartRatio;
	float ProgressiveExponent;
	float VisualClipOffset;
	float AttachOffsetY;
	float DisabledStrenghModifier;
}

enum SquadAction {
	SquadAction_PlayerJoined = 0,
	SquadAction_PlayerLeft = 1,
	SquadAction_PlayerWasKicked = 2
}

enum SquadId {
	SquadNone = 0,
	Squad1 = 1,
	Squad2 = 2,
	Squad3 = 3,
	Squad4 = 4,
	Squad5 = 5,
	Squad6 = 6,
	Squad7 = 7,
	Squad8 = 8,
	Squad9 = 9,
	Squad10 = 10,
	Squad11 = 11,
	Squad12 = 12,
	Squad13 = 13,
	Squad14 = 14,
	Squad15 = 15,
	Squad16 = 16,
	Squad17 = 17,
	Squad18 = 18,
	Squad19 = 19,
	Squad20 = 20,
	Squad21 = 21,
	Squad22 = 22,
	Squad23 = 23,
	Squad24 = 24,
	Squad25 = 25,
	Squad26 = 26,
	Squad27 = 27,
	Squad28 = 28,
	Squad29 = 29,
	Squad30 = 30,
	Squad31 = 31,
	Squad32 = 32,
	SquadIdCount = 33
}

class StabilizerData : DataContainer {
	float PitchStrength;
	float RollStrength;
	float VerticalVelocityStrength;
	float YawStrength;
	bool AdvancedYaw;
	bool Advanced;
}

enum StabilizerProperty {
	SPPitchAngle = 0,
	SPYawAngle = 1,
	SPRollAngle = 2,
	SPVerticalPosition = 3,
	SPVerticalVelocity = 4
}

struct StabilizerSettings {
	StabilizerProperty Property;
	float Strength;
	bool Advanced;
}

struct StanceCameraData {
	int32[] ValidStances;
	int32[] DefaultCameraForStances;
}

class StanceFilterComponentData : ComponentData {
	int32[] ValidStances;
	float StanceChangeTime;
	ActionSuppressor[] ActionsToFilter;
	bool FilterSpecificActions;
	bool UndoParentStanceFilter;
}

struct StanceSwitchSoundData {
	SoundAsset StanceSwitchSound;
	int32[] ValidStances;
}

class StandardMoveWaypointData : AbstractLocoWaypointData {
	AILocoMoveTaskData MoveTask;
}

class StartEntityData : EntityData {
	float SortIndex;
	string StartName;
	bool IsDefault;
}

class StatCategoriesAwardTree : StatCategoriesGuidTree {
}

class StatCategoriesBaseTree : TreeBase {
	StatsCategoryBaseData[] RootBaseCategories;
	CriteriaData[] ParamX;
	CriteriaData[] ParamY;
	bool ProcessAllLevelsInTree;
}

class StatCategoriesDifficultyTree : StatCategoriesGuidTree {
}

class StatCategoriesGuidTree : StatCategoriesBaseTree {
}

class StatCategoriesKitTree : StatCategoriesGuidTree {
}

class StatCategoriesLevelTree : StatCategoriesGuidTree {
}

class StatCategoriesPlayerRoleTree : StatCategoriesBaseTree {
}

class StatCategoriesScoreboardPositionTree : StatCategoriesBaseTree {
}

class StatCategoriesScoringBucketTree : StatCategoriesGuidTree {
}

class StatCategoriesTree : StatCategoriesBaseTree {
	StatsCategoryData[] Categories;
}

class StatCategoriesVehicleStateTypeTree : StatCategoriesBaseTree {
}

class StatCategoriesVehicleTree : StatCategoriesGuidTree {
}

class StatCategoriesVehicleWeaponTree : StatCategoriesGuidTree {
}

class StatCategoriesWeaponAccessoryTree : StatCategoriesGuidTree {
}

class StatCategoriesWeaponTree : StatCategoriesGuidTree {
}

class StatCategoryTreeCollection : Asset {
	StatCategoriesBaseTree[] CategoryTrees;
}

class StateEventGateEntityData : GameEntityData {
	EventGateState CheckedState;
}

class StateNode : UINodeData {
	UIScreenAsset Screen;
	UINodePort In;
	UINodePort Show;
	UINodePort Hide;
	UINodePort[] Inputs;
	UINodePort[] Outputs;
	bool RenderToTexture;
}

class StateRenderSettings : DataContainer {
	bool Ps3PixelShaderConstantsEnable;
}

enum StatEvent {
	StatEvent_Kill = 0,
	StatEvent_Kill_In_X = 1,
	StatEvent_Kill_As_X = 2,
	StatEvent_KillWith_X_As_Y = 3,
	StatEvent_KillDistance = 4,
	StatEvent_KillOf_X_As_Y = 5,
	StatEvent_KillOf_X_In_Y = 6,
	StatEvent_TeamKill = 7,
	StatEvent_AvengerKill = 8,
	StatEvent_SaviorKill = 9,
	StatEvent_DriverAssist = 10,
	StatEvent_TeamDriverAssist = 11,
	StatEvent_SquadDriverAssist = 12,
	StatEvent_PassengerAssist = 13,
	StatEvent_TeamPassengerAssist = 14,
	StatEvent_SquadPassengerAssist = 15,
	StatEvent_RoadKill = 16,
	StatEvent_Death = 17,
	StatEvent_DoubleKill = 18,
	StatEvent_TripleKill = 19,
	StatEvent_MultiKill = 20,
	StatEvent_PostMortemKill = 21,
	StatEvent_KillStreak = 22,
	StatEvent_KillStreakX = 23,
	StatEvent_CancelKillStreak = 24,
	StatEvent_Comeback = 25,
	StatEvent_SquadWipe = 26,
	StatEvent_NemesisKill = 27,
	StatEvent_NemesisKillX = 28,
	StatEvent_CancelNemesisKill = 29,
	StatEvent_SecondsAs_X = 30,
	StatEvent_SecondsWith_X = 31,
	StatEvent_SecondsIn_X = 32,
	StatEvent_SecondsOn_X = 33,
	StatEvent_Destroy_X = 34,
	StatEvent_Destroy_X_As_Y = 35,
	StatEvent_Destroy_X_In_Y = 36,
	StatEvent_DestroyWith_X_As_Y = 37,
	StatEvent_Destroy_X_With_Y = 38,
	StatEvent_DestroyExplosives = 39,
	StatEvent_Disabled_X = 40,
	StatEvent_KillOfWith_X_As_Y = 41,
	StatEvent_TaggedDamageAssist_X = 42,
	StatEvent_Tagged_X = 43,
	StatEvent_SuppressWith_X_As_Y = 44,
	StatEvent_Level_X_Completed_Y_Difficulty = 45,
	StatEvent_Level_X_Completed_Y_Difficulty_WithTimeValue = 46,
	StatEvent_CleanLevel_X_Completed = 47,
	StatEvent_RoundOverOutcome_X_On_Y = 48,
	StatEvent_Rounds = 49,
	StatEvent_Headshot_X_With_Y = 50,
	StatEvent_HeadshotAs_X_With_Y = 51,
	StatEvent_HeadshotDistance_With_X = 52,
	StatEvent_SelfHeal = 53,
	StatEvent_BestSquad = 54,
	StatEvent_ShotsFired_With_X = 55,
	StatEvent_ShotsHit_With_X = 56,
	StatEvent_SpotAssist = 57,
	StatEvent_SpotAssistFrom_X = 58,
	StatEvent_SuppressionAssist = 59,
	StatEvent_Heal = 60,
	StatEvent_TeamHeal = 61,
	StatEvent_SquadHeal = 62,
	StatEvent_Revive = 63,
	StatEvent_TeamRevive = 64,
	StatEvent_SquadRevive = 65,
	StatEvent_ReviveAccepted = 66,
	StatEvent_TeamReviveAccepted = 67,
	StatEvent_SquadReviveAccepted = 68,
	StatEvent_ManDownRevive = 69,
	StatEvent_Resupply = 70,
	StatEvent_TeamResupply = 71,
	StatEvent_SquadResupply = 72,
	StatEvent_KillAssist = 73,
	StatEvent_Repair = 74,
	StatEvent_TeamRepair = 75,
	StatEvent_SquadRepair = 76,
	StatEvent_VehicleDestroyAssist = 77,
	StatEvent_TreeDestroyed = 78,
	StatEvent_WallDestroyed = 79,
	StatEvent_CaptureCapturePoint = 80,
	StatEvent_CaptureCapturePointAssist = 81,
	StatEvent_NeutralizeCapturePoint = 82,
	StatEvent_NeutralizeCapturePointAssist = 83,
	StatEvent_CapturePointDefense = 84,
	StatEvent_CapturePointAttack = 85,
	StatEvent_CrateArmed = 86,
	StatEvent_CrateDisarmed = 87,
	StatEvent_CrateDestroyed = 88,
	StatEvent_CrateDefendKill = 89,
	StatEvent_CrateAttackKill = 90,
	StatEvent_SquadDefendOrder = 91,
	StatEvent_SquadAttackOrder = 92,
	StatEvent_SquadLeaderDefendOrder = 93,
	StatEvent_SquadLeaderAttackOrder = 94,
	StatEvent_RankUp = 95,
	StatEvent_UniqueAward = 96,
	StatEvent_DogTag = 97,
	StatEvent_DogTagSavior = 98,
	StatEvent_SquadSpawn = 99,
	StatEvent_SquadSpawnOnRemoteVehicle_X = 100,
	StatEvent_Suicide = 101,
	StatEvent_GainAward_X = 102,
	StatEvent_PlayerScoreboardPosition_X = 103,
	StatEvent_GainedHighestRank = 104,
	StatEvent_GainedHighestUnlockInBucket_X = 105,
	StatEvent_Misc_X_and_Y = 106,
	StatEvent_TotalScoreOn_X_Difficulty_Y = 107,
	StatEvent_Invalid = 108,
	StatEvent_Damage = 109,
	StatEvent_PlayerScoreboardPosition_X_On_Y = 110,
	StatEvent_CaptureCapturePointDOM = 111,
	StatEvent_CaptureCapturePointAssistDOM = 112,
	StatEvent_NeutralizeCapturePointDOM = 113,
	StatEvent_NeutralizeCapturePointAssistDOM = 114,
	StatEvent_Kill_With_X_In_Y = 115,
	StatEvent_DoubleKill_With_X_In_Y = 116,
	StatEvent_ShotFired_With_X = 117,
	StatEvent_SpotAssistFor_X = 118,
	StatEvent_Misc_X_In_Y = 119,
	StatEvent_CTF_Capture = 120,
	StatEvent_CTF_CaptureStreak = 121,
	StatEvent_CTF_CaptureAssist = 122,
	StatEvent_CTF_PickUp = 123,
	StatEvent_CTF_PickUpAssist = 124,
	StatEvent_CTF_Return = 125,
	StatEvent_CTF_CarrierAssist = 126,
	StatEvent_CTF_CarrierAssistStreak = 127,
	StatEvent_CTF_FlagTransporter_In_X = 128,
	StatEvent_CTF_CarrierSavior = 129,
	StatEvent_CTF_CarrierSuppression = 130,
	StatEvent_CTF_CarrierKiller = 131,
	StatEvent_CTF_CarrierKillAssist = 132,
	StatEvent_CTF_CarrierHeal = 133,
	StatEvent_BadLuck = 134,
	StatEvent_Jump_In_X = 135,
	StatEvent_Kill_From_X = 136,
	StatEvent_ParadropDestroy_X = 137,
	StatEvent_ParadropKill = 138,
	StatEvent_FreefallDeath = 139,
	StatEvent_PassengerKill_In_X = 140,
	StatEvent_TakeDogTagAssassin = 141,
	StatEvent_Spawn_In_X = 142,
	StatEvent_RoadKill_With_X = 143,
	StatEvent_LAST_ITEM = 144
}

class StatEventTriggerEntityData : GameEntityData {
	StatEvent StatEvent;
	string MiscParamX;
	string MiscParamY;
	bool SendToAll;
}

class StaticCameraData : TargetCameraData {
	Vec3[] LeftCurve;
	Vec3[] RightCurve;
	Vec3[] UpCurve;
	Vec3[] DownCurve;
	float UpPitchAngle;
	EntryInputActionEnum YawInputAction;
	CameraLoosePartPhysicsData[] LoosePartPhysics;
	float LeftYawAngle;
	float RightYawAngle;
	float PitchSensitivityZoomed;
	float DownPitchAngle;
	int32 AverageFilterFrames;
	EntryInputActionEnum PitchInputAction;
	float YawSensitivityZoomed;
	float PitchSensitivityNonZoomed;
	float YawSensitivityNonZoomed;
	bool ResetAccumulatedInputOnViewChange;
	bool MirrorHorizontalCurves;
	bool AccumulateInput;
	bool MirrorVerticalCurves;
}

class StaticConfigAsset : Asset {
}

class StaticEnlightenData : Asset {
	TextureAsset StaticIrradianceChromaTexture;
	TextureAsset StaticIrradianceLumaTexture;
	TextureAsset StaticDirectionTexture;
}

class StaticEnlightenEntityData : EnlightenEntityData {
	StaticEnlightenData EnlightenData;
	EnlightenDataAsset DynamicEnlightenData;
}

struct StaticListItem {
	string ItemName;
	UIDataSourceInfo DynamicDisable;
	UIDataSourceInfo DynamicNewContent;
	bool AppendPlatformToSID;
	bool ExcludeInRetail;
}

class StaticModelEntityData : GamePhysicsEntityData {
	PartLinkData[] PartLinks;
	MeshAsset Mesh;
	uint32 BoneCount;
	LinearTransform[] BasePoseTransforms;
	StaticModelNetworkInfo NetworkInfo;
	PhysicsPartInfo[] PhysicsPartInfos;
	bool ExcludeFromNearbyObjectDestruction;
	bool AnimatePhysics;
	bool Visible;
}

class StaticModelGroupEntityData : GamePhysicsEntityData {
	StaticModelGroupMemberData[] MemberDatas;
	guid HackToSolveRealTimeTweakingIssue;
	uint32 NetworkIdCount;
}

struct StaticModelGroupMemberData {
	LinearTransform[] InstanceTransforms;
	float[] InstanceScale;
	uint32[] InstanceObjectVariation;
	bool[] InstanceCastSunShadow;
	GamePhysicsEntityData MemberType;
	EntityData MeshEntityType;
	uint32 InstanceCount;
	uint32 HealthStateEntityManagerId;
	IndexRange PhysicsPartRange;
	uint32 PhysicsPartCountPerInstance;
	IndexRange NetworkIdRange;
	uint32 NetworkIdCountPerInstance;
}

struct StaticModelNetworkInfo {
	IndexRange[] PartNetworkIdRanges;
	uint32 NetworkIdCount;
	ChildStaticModelNetworkInfo[] ChildNetworkInfos;
	uint32 ChildNetworkIdCount;
}

class StaticUnlockList : Asset {
	BasicUnlockInfo[] UnlockInfos;
}

enum StatPeriod {
	StatPeriod_AllTime = 0,
	StatPeriod_Monthly = 1,
	StatPeriod_Weekly = 2,
	StatPeriod_Daily = 3,
	StatPeriod_Size = 4,
	StatPeriod_Error = 5
}

class StatsCategoryAwardData : StatsCategoryGuidData {
}

class StatsCategoryBaseData : TreeNodeBase {
	StatsCategoryBaseData[] BaseSubCategories;
	string Code;
}

class StatsCategoryData : StatsCategoryBaseData {
	StatsCategoryData[] Categories;
	string[] Members;
}

class StatsCategoryDifficultyData : StatsCategoryGuidData {
}

class StatsCategoryGuidData : StatsCategoryBaseData {
	guid[] ObjectInstanceGuids;
}

class StatsCategoryKitData : StatsCategoryGuidData {
}

class StatsCategoryLevelData : StatsCategoryGuidData {
}

class StatsCategoryPlayerRoleData : StatsCategoryBaseData {
	PlayerRole[] Roles;
}

class StatsCategoryScoreboardPositionData : StatsCategoryBaseData {
	ScoreboardPosition[] Positions;
}

class StatsCategoryScoringBucketData : StatsCategoryGuidData {
}

class StatsCategoryVehicleData : StatsCategoryGuidData {
	uint32 FirstVehicleId;
}

class StatsCategoryVehicleStateTypeData : StatsCategoryBaseData {
	VehicleStateType[] States;
}

class StatsCategoryVehicleWeaponData : StatsCategoryGuidData {
}

class StatsCategoryWeaponAccessoryData : StatsCategoryGuidData {
}

class StatsCategoryWeaponData : StatsCategoryGuidData {
	uint32 SoldierWeaponId;
	CriteriaGateList AccessoryUnlockGates;
	BasicUnlockInfo[] UnlocksInfo;
}

enum StatsMultiplicity {
	StatsMultiplicity_Invalid = 0,
	StatsMultiplicity_Solo = 1,
	StatsMultiplicity_Club = 2,
	StatsMultiplicity_LAST_ITEM = 3
}

struct StatSpamSetting {
	StatEvent Event;
	uint32 AmountLimit;
	float TimeLimit;
	bool PlayerToPlayer;
}

class StatSpamSettings : Asset {
	StatSpamSetting[] SpamList;
}

class StatSurveyEvent : MetricEvent {
	guid SurveyMetricLink;
}

enum StencilOperation {
	StencilOperation_Keep = 0,
	StencilOperation_Zero = 1,
	StencilOperation_Replace = 2,
	StencilOperation_IncrementSaturate = 3,
	StencilOperation_DecrementSaturate = 4,
	StencilOperation_Invert = 5,
	StencilOperation_IncrementWrap = 6,
	StencilOperation_DecrementWrap = 7
}

class StopWatchEntityData : EntityData {
	Realm Realm;
	UpdatePass UpdatePass;
	float Multiplier;
	float TriggerOnTime;
}

struct StreamGridCell {
	ReferenceObjectData ReferenceData;
	int32 X;
	int32 Z;
}

class StreamGridEntityData : SpatialEntityData {
	float CellSize;
	float ViewDistance;
	int32 MaxStreamInCountPerFrame;
	int32 MaxStreamOutCountPerFrame;
	StreamGridCell[] Cells;
}

class StreamGroupData : DataContainer {
	Asset[] Assets;
}

class StreamingGateEntityData : EntityData {
	float Timeout;
}

class StreamPoolAsset : Asset {
	uint32 StreamPoolId;
	uint32 StreamBufferSizeXenon;
	uint32 StreamBufferSizePs3;
	uint32 StreamBufferSizeWin32;
	uint32 StreamCountXenon;
	uint32 StreamCountPs3;
	uint32 StreamCountWin32;
	uint32 StreamReadBlockSizeXenon;
	uint32 StreamReadBlockSizePs3;
	uint32 StreamReadBlockSizeWin32;
	StreamStarveMode StreamStarveMode;
}

enum StreamRealm {
	StreamRealm_None = 0,
	StreamRealm_Client = 1,
	StreamRealm_Both = 2
}

enum StreamStarveMode {
	StreamStarveMode_Off = 0,
	StreamStarveMode_On = 1,
	StreamStarveMode_Dynamic = 2
}

struct Strengths {
	float Infantry;
	float LightArmour;
	float HeavyArmour;
	float Helicopter;
}

enum StrengthType {
	Infantry = 0,
	LightArmour = 1,
	HeavyArmour = 2,
	Helicopter = 3,
	NumberOfStrengthTypes = 4
}

struct StringOption {
	string Name;
	string Value;
}

enum SubRealm {
	SubRealm_All = 0,
	SubRealm_LocalPlayer = 1,
	SubRealm_RemotePlayer = 2
}

struct SubScreenData {
	Vec3 ScreenPosition;
	float ProjectionAngleY;
	float ProjectionAngleZ;
	float ProjectionAngleX;
	float ScreenSize;
	float IconSize;
	float ScaleIconSizeByDepthStrength;
	float RenderTargetApectRatio;
	int32 RenderTargetIndex;
	bool UseRenderTarget;
}

struct SubSkeleton {
	SkeletonAsset Skeleton;
	int32[] BoneMap;
	LinearTransform[] TransformMap;
}

struct SubsystemTimingConfigData {
	float Sensing;
	float Evaluation;
	float GoalUpdates;
	float IntentUpdates;
	float BehaviourSelection;
	float BehaviourExecution;
}

class SubtitleDataNode : TreeNodeBase {
	float Time;
	float DisplayTime;
	string SID1;
	string SID2;
}

class SubtitleDataTree : TreeBase {
	SubtitleMainDataNode[] Subtitles;
}

class SubtitleMainDataNode : TreeNodeBase {
	LanguageFormat Language;
	SubtitleDataNode[] Subtitles;
}

class SubViewData : DataContainer {
}

class SubWorldData : SpatialPrefabBlueprint {
	RegistryContainer RegistryContainer;
	bool IsWin32SubLevel;
	bool IsXenonSubLevel;
	bool IsPs3SubLevel;
	bool RememberStateOnStreamOut;
}

class SubWorldInclusion : Asset {
	SubWorldInclusionCriterion[] Criteria;
}

class SubWorldInclusionCriterion : DataContainer {
	string Name;
	string[] Options;
}

class SubWorldInclusionSetting : DataContainer {
	SubWorldInclusionCriterion Criterion;
	string[] EnabledOptions;
}

class SubWorldInclusionSettings : DataContainer {
	SubWorldInclusionSetting[] Settings;
}

class SubWorldReferenceObjectData : ReferenceObjectData {
	string BundleName;
	SubWorldInclusionSettings InclusionSettings;
	bool AutoLoad;
	bool IsWin32SubLevel;
	bool IsXenonSubLevel;
	bool IsPs3SubLevel;
}

class SunFlareComponentData : ComponentData {
	Vec4 Element5AlphaScreenPosCurve;
	Vec4 Element5AlphaOccluderCurve;
	Vec4 Element5SizeScreenPosCurve;
	Vec4 Element2SizeOccluderCurve;
	Vec4 Element5SizeOccluderCurve;
	Vec4 Element2AlphaOccluderCurve;
	Vec4 Element2AlphaScreenPosCurve;
	Vec2 Element1Size;
	Vec4 Element1SizeOccluderCurve;
	Vec4 Element1SizeScreenPosCurve;
	Vec4 Element1AlphaOccluderCurve;
	Vec4 Element1AlphaScreenPosCurve;
	Vec2 Element5Size;
	Vec4 Element4SizeOccluderCurve;
	Vec2 Element3Size;
	Vec2 Element2Size;
	Vec4 Element4AlphaScreenPosCurve;
	Vec4 Element2SizeScreenPosCurve;
	Vec4 Element4SizeScreenPosCurve;
	Vec2 Element4Size;
	Vec4 Element3AlphaScreenPosCurve;
	Vec4 Element4AlphaOccluderCurve;
	Vec4 Element3SizeOccluderCurve;
	Vec4 Element3SizeScreenPosCurve;
	Vec4 Element3AlphaOccluderCurve;
	SurfaceShaderBaseAsset Element1Shader;
	float OccluderSize;
	SurfaceShaderBaseAsset Element2Shader;
	float Element3RayDistance;
	SurfaceShaderBaseAsset Element4Shader;
	float Element4RayDistance;
	float Element2RayDistance;
	float Element1RayDistance;
	float Element5RayDistance;
	SurfaceShaderBaseAsset Element3Shader;
	Realm Realm;
	SurfaceShaderBaseAsset Element5Shader;
	bool Element5Enable;
	bool Element3Enable;
	bool Element2Enable;
	bool Element1Enable;
	bool DebugDrawOccluder;
	bool Enable;
	bool Element4Enable;
}

class SunFlareEffectState : DataContainer {
	Vec4 Element5AlphaScreenPosCurve;
	Vec4 Element5AlphaOccluderCurve;
	Vec4 Element2SizeScreenPosCurve;
	Vec4 Element5SizeScreenPosCurve;
	Vec4 Element2AlphaOccluderCurve;
	Vec4 Element2AlphaScreenPosCurve;
	Vec2 Element1Size;
	Vec4 Element1SizeOccluderCurve;
	Vec4 Element1SizeScreenPosCurve;
	Vec4 Element1AlphaOccluderCurve;
	Vec4 Element1AlphaScreenPosCurve;
	Vec4 Element5SizeOccluderCurve;
	Vec4 Element4SizeScreenPosCurve;
	Vec2 Element3Size;
	Vec2 Element2Size;
	Vec4 Element2SizeOccluderCurve;
	Vec4 Element4AlphaScreenPosCurve;
	Vec4 Element3SizeOccluderCurve;
	Vec2 Element4Size;
	Vec2 Element5Size;
	Vec4 Element3SizeScreenPosCurve;
	Vec4 Element3AlphaOccluderCurve;
	Vec4 Element4SizeOccluderCurve;
	Vec4 Element3AlphaScreenPosCurve;
	Vec4 Element4AlphaOccluderCurve;
	SurfaceShaderBaseAsset Element3Shader;
	SurfaceShaderBaseAsset Element2Shader;
	float OccluderSize;
	SurfaceShaderBaseAsset Element4Shader;
	float Element4RayDistance;
	SurfaceShaderBaseAsset Element1Shader;
	float Element2RayDistance;
	float Element1RayDistance;
	float Element5RayDistance;
	float Element3RayDistance;
	SurfaceShaderBaseAsset Element5Shader;
	bool Element5Enable;
	bool Element4Enable;
	bool Element3Enable;
	bool Element2Enable;
	bool Element1Enable;
	bool DebugDrawOccluder;
	bool Enable;
}

struct SupplyData {
	SupplyUnitSphereData Healing;
	SupplyUnitSphereData Ammo;
	bool SupplyVehicles;
	bool SupplySoldiers;
	bool TeamSpecific;
	bool ExcludeSelf;
}

class SupplySphereComponentData : ComponentData {
	SupplyData SupplyData;
}

class SupplySphereEntityData : ExplosionPackEntityData {
	SupplyData SupplyData;
}

class SupplySphereWeaponData : WeaponData {
	SupplyData SupplyData;
}

struct SupplyUnitSphereData {
	float Radius;
	float SupplyIncSpeed;
	float SupplyPointsCapacity;
	float SupplyPointsRefillSpeed;
	bool InfiniteCapacity;
}

struct SupportedShootingBinding {
	AntRef Supported;
	AntRef SupportedPos;
	AntRef ForwardVector;
	AntRef Yaw;
	AntRef Pitch;
	AntRef DistToObject;
	AntRef HeightOfObject;
	AntRef Undeploying;
	AntRef AnimatedCamera;
}

class SupportedShootingCommonData : Asset {
	AimingConstraintsData AimingConstraints;
	EntryInputActionEnum EnterSupportedShootingAction;
	SupportedShootingBinding Binding;
	SupportedShootingProximityChecking Stand;
	SupportedShootingProximityChecking Crouch;
}

class SupportedShootingComponentData : ComponentData {
	SupportedShootingCommonData CommonData;
}

struct SupportedShootingProximityChecking {
	float RayAboveGunHeightOffset;
	float RayAboveLength;
	float RayBelowGunHeightOffset;
	float RayBelowLength;
}

struct SuppressionReactionData {
	float SuppressionHighThreshold;
	float SuppressionLowThreshold;
	float SuppressionUIThreshold;
}

class SuppressionScoringHandlerData : ScoringHandlerData {
	float SuppressionAmountLimit;
	float TimeSinceSuppressionLimit;
}

class SuppressionSettings : DataContainer {
}

struct Surface2dDrawMethodData {
}

struct Surface2dDrawPassData {
}

struct Surface3dDrawMethodData {
}

class SurfaceShaderBaseAsset : Asset {
}

class SurfaceShaderInstanceData : DataContainer {
	SurfaceShaderBaseAsset Shader;
}

struct SurfaceShaderInstanceDataStruct {
	SurfaceShaderBaseAsset Shader;
	BoolShaderParameter[] BoolParameters;
	VectorShaderParameter[] VectorParameters;
	VectorArrayShaderParameter[] VectorArrayParameters;
	TextureShaderParameter[] TextureParameters;
}

enum SurfaceShaderType {
	SurfaceShaderType_Opaque = 0,
	SurfaceShaderType_OpaqueAlphaTest = 1,
	SurfaceShaderType_OpaqueAlphaTestSimple = 2,
	SurfaceShaderType_Transparent = 3,
	SurfaceShaderType_TransparentDecal = 4
}

class SurroundingGeometryEntityData : GameEntityData {
	AllowedVehiclesData AllowedVehicleList;
	CombatAreaTriggerEntityData CombatArea;
	uint32 CombatAreaIndex;
}

class SurveyEvent : MetricEvent {
	string SurveyName;
	int32 AnswerQuestion1;
	int32 AnswerQuestion2;
	int32 AnswerQuestion3;
	int32 AnswerQuestion4;
	int32 AnswerQuestion5;
	string FreeTextField;
	guid SurveyMetricLink;
}

class SurveySuppressedEvent : MetricEvent {
	string SuppressReason;
}

enum SweepSelectionType {
	SstTargetLost = 0,
	SstFirstTime = 1
}

class SwimmingStateData : CharacterStateData {
	float BodyUnderWater;
}

class SwitcherEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort CaseTrigger;
	float CaseValue;
}

class SwitcherNodeData : AudioGraphNodeData {
	SwitcherEntry[] Outputs;
	AudioGraphNodePort Trigger;
	AudioGraphNodePort Value;
	float DefaultCaseValue;
}

class SwitchPropertyStringEntityData : EntityData {
	string[] StringProperties;
	Realm Realm;
}

enum SwitchTeamsResult {
	SwitchTeamsResult_Success = -1,
	SwitchTeamsResult_FailedUnbalanced = 0,
	SwitchTeamsResult_FailedTooSoon = 1,
	SwitchTeamsResult_FailedTooFewTickets = 2,
	SwitchTeamsResult_FailedMustBeDead = 3,
	SwitchTeamsResult_FailedTeamFull = 4,
	SwitchTeamsResult_FailedDisabled = 5
}

class SyncAnimationsEntityData : EntityData {
	float ExternalTime;
	float NearEndEventTime;
	bool StartServerPaused;
}

enum SyncAnimationsState {
	Idle = 0,
	Play = 1,
	Skip = 2,
	Stop = 3
}

class SyncedBFSettings : SystemSettings {
	float GameModeCounterModifier;
	bool UnlicensedUnlocksUnlocked;
	bool NoMinimap;
	bool NoHud;
	bool NoMinimapSpotting;
	bool No3dSpotting;
	bool NoNameTag;
	bool OnlySquadLeaderSpawn;
	bool TeamSwitchingAllowed;
	bool MemoryDefragUI;
	bool MemoryGarbageCollectHavok;
	bool MemoryDefragGlobal;
	bool AllUnlocksUnlocked;
}

class SyncedBoolEntityData : EntityData {
	bool In;
}

class SyncedFloatEntityData : EntityData {
	float In;
}

class SyncedGameSettings : SystemSettings {
	float MaxAllowedLatency;
	float ManDownTimeModifier;
	float BulletDamageModifier;
	uint32 DifficultyIndex;
	bool DisableRegenerateHealth;
	bool EnableFriendlyFire;
	bool AllowClientSideDamageArbitration;
	bool DisableToggleEntryCamera;
}

class SyncedIntEntityData : EntityData {
	int32 In;
}

class SyncedSequenceEntityData : SequenceEntityData {
	bool InterpolateTime;
}

class SyncedTransformEntityData : EntityData {
	LinearTransform In;
	bool Interpolate;
}

class SystemSettings : DataContainer {
	string Name;
}

class TacticalObjectiveEntityData : GameEntityData {
	string MissionSid;
	string BriefingSidTeam1;
	string BriefingSidTeam2;
	float Team1Timer;
	float Team2Timer;
}

class TargetCameraData : CameraData {
	HudData Hud;
	UIPartData[] UIParts;
}

class TargetCameraEntityData : CameraEntityBaseData {
	TargetCameraData Camera;
}

class TargetEntityData : GamePhysicsEntityData {
}

class TargetEvaluationConstantData : Asset {
	float MaxBattleStrength;
	float DefaultHumanTargetPreference;
	float OtherSquadAttackerFactorUsage;
	float TargetFlipFactorUsage;
}

class TargetEvaluatorComponentData : ComponentData {
	float UpdateInterval;
}

enum TargetMode {
	TargetMode_FirstPerson = 0,
	TargetMode_ThirdPerson = 1,
	TargetMode_Index = 2
}

enum TargetPosKnowledgeType {
	TargetPosKnown = 0,
	TargetPosUnknown = 1,
	TargetPosFind = 2
}

class TeamAsset : Asset {
}

enum TeamAssignMode {
	TamEqualTeams = 0,
	TamFullTeams = 1,
	TamOneTeam = 2
}

class TeamData : TeamAsset {
	SoldierBlueprint Soldier;
	FactionId Faction;
	SoldierCustomizationAsset[] SoldierCustomization;
	VehicleCustomizationAsset[] VehicleCustomization;
}

class TeamEntityData : GameEntityData {
	TeamData Team;
	TeamId Id;
}

class TeamFilterEntityData : GameEntityData {
	Realm Realm;
	TeamId Team;
	bool InvertFilter;
	bool GenerateEventForEveryMatchingTeamMember;
}

enum TeamId {
	TeamNeutral = 0,
	Team1 = 1,
	Team2 = 2,
	Team3 = 3,
	Team4 = 4,
	Team5 = 5,
	Team6 = 6,
	Team7 = 7,
	Team8 = 8,
	Team9 = 9,
	Team10 = 10,
	Team11 = 11,
	Team12 = 12,
	Team13 = 13,
	Team14 = 14,
	Team15 = 15,
	Team16 = 16,
	TeamIdCount = 17
}

class TelemetryTriggerEntityData : EntityData {
	Realm Realm;
	string Value;
}

enum TerrainBrushDetailOperation {
	Lerp = 0,
	Add = 1,
	Multiply = 2
}

class TerrainColorTreeAsset : RasterTreeAsset {
}

class TerrainData : Asset {
}

class TerrainDecalsData : Asset {
}

enum TerrainDrawPassType {
	TerrainDrawPassType_SinglePass = 0,
	TerrainDrawPassType_MultipassFirst = 1,
	TerrainDrawPassType_MultipassConsecutive = 2
}

class TerrainEntityData : GamePhysicsEntityData {
	TerrainData TerrainAsset;
	MaterialContainerPair WaterMaterial;
	bool Visible;
}

class TerrainFillDecalData : VisualVectorShapeData {
	SurfaceShaderBaseAsset Shader2d;
	SurfaceShaderBaseAsset Shader3dZOnly;
}

struct TerrainGeoTexture {
}

class TerrainHeightfieldData : DataContainer {
}

struct TerrainLayerCombinationDrawData {
}

struct TerrainLayerCombinationDrawPassData {
}

class TerrainLayerData : DataContainer {
}

struct TerrainLayerProceduralMask {
	float AltitudeMin;
}

enum TerrainLayerType {
	TerrainLayerType_IgnoreMask = 0,
	TerrainLayerType_Masked = 1,
	TerrainLayerType_BinaryMasked = 2
}

class TerrainMaskTreeAsset : RasterTreeAsset {
}

class TerrainMaterialMapAsset : Asset {
}

class TerrainMaterialTreeAsset : RasterTreeAsset {
}

class TerrainMeshScatteringType : DataContainer {
}

struct TerrainQuadDecalAtlasTile {
	uint32 TileIndexX;
	uint32 TileIndexY;
	uint32 TileCountX;
	uint32 TileCountY;
	bool FlipX;
	bool FlipY;
}

class TerrainQuadDecalAtlasTileTemplateData : Asset {
	TerrainQuadDecalAtlasTile AtlasTile;
}

class TerrainQuadDecalData : VisualVectorShapeData {
	Vec4 UserMasks;
	SurfaceShaderBaseAsset Shader3dZOnly;
	SurfaceShaderBaseAsset Shader2d;
	TerrainQuadDecalAtlasTileTemplateData AtlasTileTemplate;
	TerrainQuadDecalAtlasTile AtlasTile;
}

enum TerrainRenderMode {
	TerrainRenderMode_Default = 0,
	TerrainRenderMode_DrawPassCount2d = 1,
	TerrainRenderMode_LayerCount2d = 2,
	TerrainRenderMode_LayerCount3d = 3,
	TerrainRenderMode_MaskedLayerCount2d = 4,
	TerrainRenderMode_MaskedLayerCount3d = 5
}

class TerrainSettings : DataContainer {
	uint32 HeightQueryCacheSize;
	uint32 ModifiersCapacity;
	uint32 IntersectingModifiersMax;
	float ModifierDepthFactor;
	float ModifierSlopeMax;
	bool ModifiersEnable;
}

class TerrainStreamingSettings : DataContainer {
	uint32 DataLoadJobCount;
	uint32 ActiveFreeStreamingDataLoadJobCount;
	uint32 HeightfieldAtlasSampleCountXFactor;
	uint32 AdditionalBlurriness;
	float InvisibleDetailReductionFactor;
	float OccludedDetailReductionFactor;
	uint32 HeightfieldAtlasSampleCountYFactor;
	uint32 MaskAtlasSampleCountYFactor;
	uint32 ColorAdditionalBlurriness;
	uint32 MaskAtlasSampleCountXFactor;
	uint32 MaskAdditionalBlurriness;
	uint32 ColorAtlasSampleCountXFactor;
	uint32 ColorAtlasSampleCountYFactor;
	bool KeepPoolFullEnable;
	bool LoadOccluderDataEnable;
}

class TerrainStreamingTreeAsset : Asset {
}

class TerrainSubLayerData : DataContainer {
}

class TerrainUndergrowthType : DataContainer {
}

class TestCaseEntityData : EntityData {
	float TimeOut;
	string TestGroup;
	string TestCaseName;
	bool Stable;
	bool Enabled;
}

class TestPointEntityData : GameEntityData {
	string OutputName;
}

class TextUnlockPartData : DataContainer {
	string ShaderNodeName;
	ObjectBlueprint MeshBlueprint;
}

enum TextureAddress {
	TaWrap = 0,
	TaMirror = 1,
	TaClamp = 2,
	TaBorder = 4,
	TaMirrorOnce = 5
}

class TextureArrayAsset : TextureAsset {
}

class TextureAsset : TextureBaseAsset {
}

class TextureAssetUnlockPartData : DataContainer {
	TextureAsset Texture;
}

class TextureAtlasAsset : Asset {
}

class TextureBaseAsset : Asset {
}

enum TextureCompressQualityMode {
	TextureCompressQualityMode_Default = 0,
	TextureCompressQualityMode_Simple = 1,
	TextureCompressQualityMode_HighQuality = 2
}

class TextureCompressSettings : DataContainer {
	TextureCompressQualityMode ViewMode;
	uint32 TextureCompressJobPoolSize;
	float DebugDrawAlphaOverlayScale;
	bool DebugDrawEnable;
}

enum TextureFilter {
	TfNone = 0,
	TfPoint = 1,
	TfLinear = 2,
	TfAnisotropic = 3,
	TfDefault = 4
}

enum TextureFormat {
	TextureFormat_DXT1 = 0,
	TextureFormat_DXT3 = 1,
	TextureFormat_DXT5 = 2,
	TextureFormat_DXT5A = 3,
	TextureFormat_DXN = 4,
	TextureFormat_RGB565 = 5,
	TextureFormat_RGB888 = 6,
	TextureFormat_ARGB1555 = 7,
	TextureFormat_ARGB4444 = 8,
	TextureFormat_ARGB8888 = 9,
	TextureFormat_L8 = 10,
	TextureFormat_L16 = 11,
	TextureFormat_ABGR16 = 12,
	TextureFormat_ABGR16F = 13,
	TextureFormat_ABGR32F = 14,
	TextureFormat_R16F = 15,
	TextureFormat_R32F = 16,
	TextureFormat_NormalDXN = 17,
	TextureFormat_NormalDXT1 = 18,
	TextureFormat_NormalDXT5 = 19,
	TextureFormat_NormalDXT5RGA = 20,
	TextureFormat_RG8 = 21,
	TextureFormat_GR16 = 22,
	TextureFormat_GR16F = 23,
	TextureFormat_D16 = 24,
	TextureFormat_D24S8 = 25,
	TextureFormat_D24FS8 = 26,
	TextureFormat_D32F = 27,
	TextureFormat_ABGR32 = 28,
	TextureFormat_GR32F = 29,
	TextureFormat_A2R10G10B10 = 30,
	TextureFormat_Unknown = 31
}

class TextureGroup : Asset {
}

class TextureReference : Asset {
	TextureAsset Texture;
}

class TextureSettings : DataContainer {
	uint32 SkipMipmapCount;
	bool LoadingEnabled;
	bool RenderTexturesEnabled;
}

struct TextureShaderParameter {
	string ParameterName;
	TextureBaseAsset Value;
}

class TextureSliceUnlockPartData : DataContainer {
	int32 SliceIndex;
}

class TextureStreamingSettings : DataContainer {
	float FadeMipmapTime;
	float MipmapBias;
	uint32 MaxTextureSizeKb;
	uint32 MaxFrameTextureCreateCount;
	uint32 MaxPendingLoadCount;
	uint32 MinMipmapCount;
	uint32 MaxMipmapCount;
	uint32 XenonFinalPoolSizeAdjustment;
	uint32 XenonRetailPoolSizeAdjustment;
	uint32 PoolHeadroomSize;
	uint32 OnDemandPoolSize;
	uint32 ListViewPageIndex;
	uint32 PoolSize;
	int32 ForceMipmap;
	float PriorityThreshold;
	uint32 DefragFrameTransferLimit;
	uint32 MinTextureSize;
	uint32 MaxFrameTextureCreateSize;
	bool OnlyWantedInPool;
	bool DxImmutableUsageEnable;
	bool MipmapsEnable;
	bool UploadMipmapsEnable;
	bool TextureUpdateEnable;
	bool AsyncCreatesEnable;
	bool LoadMipmapsEnable;
	bool ForceWantedEnable;
	bool UpdateEnable;
	bool PoolEnable;
	bool DefragEnable;
	bool DefragTransfersEnable;
	bool ChunkLoadEnable;
	bool InstantUnloadingEnable;
	bool FadeMipmapsEnable;
	bool DynamicLoadingEnable;
	bool Enable;
	bool DrawStatsEnable;
	bool DrawTextureGroupStatsEnable;
	bool DrawTextureFormatStatsEnable;
	bool DrawLoadingListEnable;
	bool DrawPriorityListEnable;
	bool OverridePoolSize;
	bool DumpLoadedList;
	bool UseConditionalStreaming;
}

enum TextureType {
	TextureType_2d = 0,
	TextureType_Cube = 1,
	TextureType_3d = 2,
	TextureType_2dArray = 3,
	TextureType_1dArray = 4,
	TextureType_1d = 5
}

class TextureUnlockPartData : DataContainer {
	TextureReference TextureReference;
}

class TicketCounterEntityData : GameEntityData {
	TicketCountPercentage[] TicketPercentages;
	int32 TicketLossPerMin;
	TicketDecreaseType DecreaseTickets;
	TeamId TeamId;
	int32 TicketLossWhenLostAll;
	int32 TicketLossWhenLostAllControlsPoint;
	int32 InitialTicketCount;
	int32 TicketLossStart;
	bool SetBestSquadSpawner;
	bool HaltTicketLossOnEqualPointCount;
	bool ResetCapturePointsOnReset;
	bool SpawnAlwaysAllowed;
}

struct TicketCountPercentage {
	int32 MaxPercentOfTicketsLeft;
	int32 TicketLossPerMin;
}

enum TicketDecreaseType {
	TDTOnKilled = 0,
	TDTOnRespawned = 1,
	TDTNoDecreaseOnSoldierDeath = 2
}

class TickEvent : MetricEvent {
	Vec3 Position;
	float Time;
}

enum TimerMode {
	TimerMode_Repeating = 0,
	TimerMode_SingleShot = 1
}

class TimerNodeData : AudioGraphNodeData {
	AudioGraphNodePort Start;
	AudioGraphNodePort Stop;
	AudioGraphNodePort Period;
	AudioGraphNodePort Tick;
	AudioGraphNodePort Progress;
	TimerMode Mode;
}

class TimingConstantData : Asset {
	float UpdateTimePerFrame;
	SubsystemTimingConfigData SubsystemTimeParts;
	BotPriorityConfigData[] PriorityClasses;
}

class TimingViewCategories : Asset {
	TimingViewCategory[] TimingCategories;
}

class TimingViewCategory : DataContainer {
	string CategoryName;
	string[] Keywords;
	float SpuBudget;
	float CpuBudget;
	float GpuBudget;
}

class TimingViewSettings : DataContainer {
	uint32 MaxFrameEventCount;
	uint32 FrameCount;
	uint32 FrameDelayCount;
	float TimeRange;
	float TimeOffset;
	float AutolockThreshold;
	string AutolockNameFilter;
	int32 LegendScreenOffset;
	int32 LegendColumnWidth;
	int32 LegendDisplayMode;
	int32 AverageFrameCount;
	int32 MaxGpuLegendColumnCount;
	string SnoopEventName;
	int32 GpuBarFrameOffset;
	int32 MaxCpuLegendColumnCount;
	uint32 BarPad;
	int32 MaxSpuLegendColumnCount;
	int32 BarSyncProcessor;
	double BarMinTime;
	uint32 BarHeight;
	string FilterEventName;
	bool SnoopOnly;
	bool DrawEnable;
	bool DrawSpuLegendEnable;
	bool SnoopEnable;
	bool FilterEnable;
	bool DrawBarsEnable;
	bool DrawLegendEnable;
	bool DrawOnlySummaryEnable;
	bool SortByTime;
	bool DrawCpuLegendEnable;
	bool DrawGpuLegendEnable;
	bool Enable;
}

enum TinyEvent {
	TinyEvent_AckTimeSyncDone = 1,
	TinyEvent_AckLevelLinked = 2,
	TinyEvent_AckLevelRestarted = 3,
	TinyEvent_AckEnterPatchRecvState = 4,
	TinyEvent_AckAuthentication = 5,
	TinyEvent_NackAuthentication = 6,
	TinyEvent_AckExitLevel = 7,
	TinyEvent_CmdLinkLevel = 8,
	TinyEvent_CmdEnterPatchRecvState = 9,
	TinyEvent_CmdExitLevel = 10,
	TinyEvent_CmdContinueLevel = 11
}

class TonemapComponentData : ComponentData {
	Vec3 BloomScale;
	Realm Realm;
	TonemapMethod TonemapMethod;
	float MinExposure;
	float MiddleGray;
	float ExposureAdjustTime;
	float MaxExposure;
	float ChromostereopsisOffset;
	float ChromostereopsisScale;
	bool ChromostereopsisEnable;
}

enum TonemapMethod {
	TonemapMethod_Linear = 0,
	TonemapMethod_Filmic = 1,
	TonemapMethod_FilmicNeutral = 2,
	TonemapMethod_None = 3,
	TonemapMethodCount = 3
}

class ToolData : DataContainer {
	bool IsAlwaysActive;
}

enum ToolTipType {
	AimAtTeamMateToolTip = 1,
	AimAtEnemyToolTip = 2
}

class TopPlayersEntityData : EntityData {
}

class ToWorldSpaceTransformEntityData : EntityData {
	LinearTransform In1;
	Realm Realm;
}

class TrackComponentData : MeshComponentData {
	float ScrollFactor;
}

class TrackPlayerEntityData : GameEntityData {
	float SnapHeightOffsetY;
	bool RandomizeTracker;
	bool SnapHeightOnKilledDestroyed;
	bool CheckPlayerAlive;
	bool EnforceSharedCombatArea;
	bool UpdateFlagComponent;
	bool TrackMultiplePlayers;
	bool Reseted;
}

class TrackWheelComponentData : WheelComponentData {
	string BoneName;
}

class TrajectoryEntityData : EntityData {
	LinearTransform OutTransform;
}

class TransformBlendEntityData : EntityData {
	LinearTransform In2;
	LinearTransform In1;
	float BlendValue;
	float BlendValue2;
	Realm Realm;
}

class TransformEntityData : EntityData {
	LinearTransform DefaultTransform;
	Realm Realm;
}

class TransformHubEntityData : EntityData {
	LinearTransform In4;
	LinearTransform In1;
	LinearTransform In2;
	LinearTransform In3;
	LinearTransform In8;
	LinearTransform In5;
	LinearTransform In6;
	LinearTransform In7;
	Realm Realm;
}

class TransformModifierEntityData : EntityData {
	LinearTransform In;
	Realm Realm;
	ModifierAxis Left;
	ModifierAxis Up;
	ModifierAxis Forward;
	bool InvertLeft;
	bool InvertUp;
	bool InvertForward;
}

class TransformMultiplierEntityData : EntityData {
	LinearTransform In1;
	LinearTransform In2;
	Realm Realm;
}

enum TransformPart {
	TransformPart_TranslationX = 0,
	TransformPart_TranslationY = 1,
	TransformPart_TranslationZ = 2,
	TransformPart_RotationX = 3,
	TransformPart_RotationY = 4,
	TransformPart_RotationZ = 5
}

class TransformPartPropertyTrackData : PropertyTrackData {
	TransformPart TransformPart;
	CurveInfinityType PreInfinity;
	CurveInfinityType PostInfinity;
	uint32 KeyStartIndex;
	string ResourceName;
	uint32 KeyCount;
	bool Weighted;
	bool IsStatic;
}

class TransformPropertyTrackData : SimplePropertyTrackData {
	LinearTransform[] Values;
}

class TransformSelectorEntityData : EntityData {
	LinearTransform In1;
	LinearTransform In2;
	Realm Realm;
	bool Selection;
}

class TransformSnapToGroundEntityData : EntityData {
	LinearTransform In;
	Realm Realm;
	float DistanceToGround;
	float RayCastLength;
	float RayCastUpOffset;
	bool AlignWithGroundNormal;
}

class TransformSplitterEntityData : EntityData {
	LinearTransform Transform;
	Realm Realm;
}

class TreeBase : Asset {
}

class TreeNodeBase : DataContainer {
	string NodeName;
}

class TriggerEntityData : GameEntityData {
	float Delay;
	bool RunOnce;
}

class TriggerEventEntityData : TriggerEntityData {
}

class TurbulanceData : ProcessorData {
	float Intensity;
}

struct TurnEffectData {
	float MaxRollAngle;
	float MaxPitchAngle;
	float YawVelocityThreshhold;
	float VelocityThreshhold;
	float SafeTime;
	float BeginTime;
	float HoldTime;
	float EndTime;
}

class TurretControlConstantData : Asset {
	float SearchLookSpeed;
	float SlowLookSpeed;
	float NormalLookSpeed;
	float FastLookSpeed;
}

class TurretData : DataContainer {
	float PitchP;
	float YawP;
	float FakeShootSpaceMinDistance;
	float FakeShootSpaceMaxDistance;
	AIAimingConstraintsData AimingConstraints;
}

struct TurretRotationInfo {
	RotationAxis RotationAxis;
	RotationChannel Channel;
	float MaxRotation;
	float MinRotation;
	float PhaseOffset;
	bool NormalizeRotation;
	bool InvertRotation;
}

class UavCameraData : TargetCameraData {
	float ViewDistance;
	CameraSineCurveData[] ViewDistanceCurve;
	float ViewAngle;
	CameraSineCurveData[] ViewAngleCurve;
	float RotationSpeed;
	CameraSineCurveData[] RotationSpeedCurve;
	float ZoomFov;
	float ZoomDelay;
	float ZoomTransitionTime;
	float Fov;
	UavCameraPointData FocusPoint;
	UavCameraPointData CenterPoint;
	float UpWeightDistance;
}

struct UavCameraPointData {
	float MinTime;
	float MaxTime;
	float Speed;
	float AccelerationTime;
}

class UI3dIconCompData : UIComponentData {
	Vec2 PixelOffset;
	float IconSize;
	float MaxFarFade;
	float MaxCloseFade;
	float SnapSafeZone;
	float SnapCenterYOffset;
	float ShrinkSnapAnimationTime;
	float TrackerHudRadiusX;
	float TrackerHudRadiusY;
	float MaxLookAtThreshold;
	float MinLookAtThreshold;
	float MinLookAtThresholdDistance;
	float DrawDistance;
	float FadeDistance;
	float FadeEndDistance;
	float MinimumDrawDistance;
	float MinimumFadeDistance;
	int32 MaxTagUpdatesPerFrame;
	float VerticalOffset;
	float ShowLabelRange;
	float TeamRadioDistance;
	float ScaleDistance;
	float MaxScaleMod;
	float MaxXRotation;
	float MaxYRotation;
	float HorisontalOffset;
	float ShowSupportAmmoThreshold;
	float VerticalOffsetMaxOffset;
	float VerticalOffsetScaleFactor;
	float ShowEngineerArmorThreshold;
	float ShowMedicHealthThreshold;
	bool SnapIcons;
	bool CircularSnap;
	bool OnlyShowSnapped;
}

enum UI3dIconQuery {
	UI3dIconQuery_Active3dIconsData = 0
}

class UI3dLaserTagCompData : UI3dIconCompData {
}

class UIActionData : Asset {
	string[] ActionKeys;
}

class UIAlerttagCompData : UI3dIconCompData {
}

class UIAnimatedTextureAsset : Asset {
	float FrameRate;
	TextureAsset TextureAtlas;
	UITextureAtlasInfo[] TextureInfos;
}

class UIAsset : Asset {
}

class UIAssignmentsCompData : UIComponentData {
}

class UIAudioEventAsset : Asset {
	UIAudioEventMapping[] AudioEventMappings;
}

struct UIAudioEventMapping {
	string EventName;
	SoundAsset SoundAsset;
}

class UIAwardDescription : UIItemDescription {
	bool IgnoreBuild;
}

class UIAwardsScreenCompData : UIComponentData {
	StatsCategoryBaseData[] TrackableAwardRow;
	StatsCategoryBaseData[] TrackableAwardCol;
}

class UIAwardsTrackingCompData : UIComponentData {
}

class UIBarDataBinding : UIDataBinding {
	UIDataSourceInfo Visibility;
	UIDataSourceInfo Value;
	UIDataSourceInfo Color;
	bool Refresh;
}

class UIBattleLogCompData : UIComponentData {
}

struct UIBundleAssetState {
	string StateName;
	UIState UIState;
	string ResourceBundleName;
}

class UIBundlesAsset : Asset {
	UIBundleAssetState[] UIBundleAssetStateList;
}

struct UIButton {
	string ButtonLabel;
	string ButtonId;
	bool IsPremium;
}

class UIButtonDataBinding : UIDataBinding {
	UIDataSourceInfo ButtonsDatasource;
	UIButtonSet DefaultButtonSet;
	UIDataSourceInfo Visibility;
	bool InvertVisible;
	bool Visible;
	bool InputOnRelease;
}

struct UIButtonSet {
	UIButton[] Buttons;
}

class UICameraCompData : UIComponentData {
}

class UICampaignCompData : UIComponentData {
}

class UICapturepointCompData : UIComponentData {
}

class UICapturepointtagCompData : UI3dIconCompData {
}

class UIChatCompData : UIComponentData {
	ChatSettings Settings;
}

class UIColor : DataContainer {
	Vec4 Color;
	UIColorType ColorType;
}

class UIColorTemplate : Asset {
	UIColor[] Colors;
	bool Active;
}

enum UIColorType {
	UIColorType_Unselected = 0,
	UIColorType_Selected = 1,
	UIColorType_SelectInside = 2,
	UIColorType_UnselectedInside = 3,
	UIColorType_Locked = 4,
	UIColorType_IconBg = 5,
	UIColorType_FrameSoft = 6,
	UIColorType_FrameHard = 7,
	UIColorType_HudYellow = 8,
	UIColorType_CriticalColor = 9,
	UIColorType_Friendly = 10,
	UIColorType_Enemy = 11,
	UIColorType_SquadColor = 12,
	UIColorType_NormalTextColor = 13,
	UIColorType_HeaderTextColor = 14,
	UIColorType_StaticHUDColor = 15,
	UIColorType_DynamicHUDColor = 16,
	UIColorType_MouseOver = 17,
	UIColorType_MouseOut = 18
}

class UICombatAreaAsset : Asset {
	string Prefix;
}

class UICombatAreaCompData : UIComponentData {
	string OutOfAreaSidPrefix;
}

class UICombatAreaEntityData : GameObjectData {
	UICombatAreaAsset Asset;
}

class UICompassDataBinding : UIDataBinding {
	UIDataSourceInfo Heading;
	UIDataSourceInfo Objectives;
	UIDataSourceInfo Visibility;
	UIDataSourceInfo ShowAirRadar;
	UIDataSourceInfo RadarSweepDegree;
}

class UIComponentData : Asset {
	string ShortName;
	string[] DataSources;
	UIUpdateType UpdateType;
	int32 UpdatesPerSecond;
}

class UIConnectionCompData : UIComponentData {
}

enum UIConsoleKeyboardStatus {
	UIConsoleKeyboardStatus_Success = 0,
	UIConsoleKeyboardStatus_Failed = 1,
	UIConsoleKeyboardStatus_Cancelled = 2,
	UIConsoleKeyboardStatus_Active = 3,
	UIConsoleKeyboardStatus_Inactive = 4,
	UIConsoleKeyboardStatus_Count = 5
}

enum UIConstants {
	UIConstants_MaxCaptureAreas = 16
}

class UICoopCompData : UIComponentData {
}

class UICoopEndOfRoundCompData : UIComponentData {
}

class UICoopLevelDescription : LevelDescriptionComponent {
	string Debriefing;
	int32 DevTime;
	string[] UnlockedByLevels;
}

class UICreditsAsset : Asset {
	UICreditsPage[] Pages;
}

class UICreditsCompData : UIComponentData {
}

struct UICreditsLine {
	UICreditsTextType TextType;
	string Text;
}

struct UICreditsPage {
	string Header1;
	string Header2;
	UICreditsLine[] Lines;
}

enum UICreditsTextType {
	SingleLine = 0,
	MultiLine = 1
}

class UICrosshairDataBinding : UIDataBinding {
	UIDataSourceInfo Dispersion;
	UIDataSourceInfo Zoomed;
	UIDataSourceInfo Visibility;
	float DispersionBaseOffset;
}

class UICustomizationCompData : UIComponentData {
	Vec3 SoldierOffset;
	Vec3 SoldierRotation;
	Vec3 VehicleRotation;
	float NetworkThrottleTimer;
}

class UIDamageIndicatorCompData : UIComponentData {
	float MaxUpdateTime;
}

class UIDataBinding : DataContainer {
}

class UIDataInterfaceCompData : UIComponentData {
}

struct UIDataSourceInfo {
	string DataName;
	UIComponentData DataCategory;
	int32 DataKey;
	bool UseDirectAccess;
	bool UpdateOnInitialize;
}

class UIDelayedCommandsCompData : UIComponentData {
}

class UIDetailedServerInfoCompData : UIComponentData {
	ServerInfoSetting[] Settings;
}

class UIDirectAccessCompData : UIComponentData {
}

class UIDistanceFieldAsset : Asset {
	TextureAsset DistanceFieldTexture;
}

class UIDogTagDescription : UIItemDescription {
	bool IgnoreBuild;
}

class UIDynamicDataBinding : UIDataBinding {
	UIDataSourceInfo[] Bindings;
	bool Refresh;
}

class UIDynamicTextureCompData : UIComponentData {
}

class UIEndOfRoundCompData : UIComponentData {
}

class UIEndOfRoundEntityData : GameEntityData {
	float PreEorTime;
	float EorTime;
}

class UIEventAsset : Asset {
	string Category;
	string[] EventList;
}

class UIFlagCounterCompData : UIComponentData {
}

class UIFontAsset : Asset {
	string SourceFile;
	UITextDatabase TextDatabase;
	string[] ScaleformFontName;
	bool NumericsOnly;
	bool CompleteKorean;
	bool CompleteJapanese;
	bool CompleteTraditionalChinese;
}

class UIFontCollection : Asset {
	LanguageFormat Language;
	UITextDatabase TextDatabase;
	UIFontAsset[] Fonts;
	ResourceBundleKind BundleKind;
}

struct UIFontMapping {
	string[] ScaleformFontName;
	string FontLongName;
}

class UIFontMappingCollection : Asset {
	UIFontMapping[] Fonts;
	UITextDatabase[] TextDatabase;
}

class UIFriendsCompData : UIComponentData {
}

class UIGameModeDescription : UIItemDescription {
	string Identifier;
	string Name;
	string Abbreviation;
	string Desc;
	int32 BattlelogId;
	string TexturePath;
	GameModeVariation[] Variations;
}

class UIGameQueueCompData : UIComponentData {
}

class UIGeneralCompData : UIComponentData {
}

class UIGenericItemDescription : UIItemDescription {
	string Identifier;
	string ImagePath;
}

struct UIGeoLatitude {
	int32 Degrees;
	int32 Minuites;
	int32 Seconds;
}

struct UIGeoLongitude {
	int32 Degrees;
	int32 Minuites;
	int32 Seconds;
}

struct UIGPSPosition {
	double Latitude;
	double Longitude;
	double SeaLevelOffset;
}

class UIGraphAsset : Asset {
	UINodeData[] Nodes;
	GlobalNode GlobalNode;
	UINodeConnection[] Connections;
	UIAudioEventAsset AudioEventMappings;
	string BundleAssetName;
	UIEventAsset[] EventList;
	bool Modal;
	bool ProtectScreens;
	bool IsWin32UIGraphAsset;
	bool IsXenonUIGraphAsset;
	bool IsPs3UIGraphAsset;
}

class UIGraphEntityData : EntityData {
	EventSpec[] Events;
	UIGraphAsset GraphAsset;
	UIGraphPriority GraphPriority;
	UIState State;
	bool PopPreviousGraph;
}

class UIGraphPipelineSettings : DataContainer {
	bool OneBundlePerGraph;
}

enum UIGraphPriority {
	UIGraphPriority_Low = 0,
	UIGraphPriority_Normal = 1,
	UIGraphPriority_High = 2,
	UIGraphPriority_OverlayScreens = 3,
	UIGraphPriority_Critical = 4
}

class UIGunMasterCompData : UIComponentData {
}

class UIHardcoreCompData : UIComponentData {
}

enum UIHudIcon {
	UIHudIcon_Unused = 0,
	UIHudIcon_LocalPlayer = 1,
	UIHudIcon_LocalDirection = 2,
	UIHudIcon_FriendlyPlayer = 3,
	UIHudIcon_EnemyPlayer = 4,
	UIHudIcon_NeutralPlayer = 5,
	UIHudIcon_SquadMember = 6,
	UIHudIcon_SquadLeader = 7,
	UIHudIcon_SquadLeaderTargeted = 8,
	UIHudIcon_Vehicle = 9,
	UIHudIcon_PrimaryObjective = 10,
	UIHudIcon_PrimaryObjectiveBlink = 11,
	UIHudIcon_SecondaryObjective = 12,
	UIHudIcon_AreaMapMarker = 13,
	UIHudIcon_ObjectiveDestroy = 14,
	UIHudIcon_ObjectiveScout = 15,
	UIHudIcon_ObjectiveDefend = 16,
	UIHudIcon_ObjectiveMoveTo = 17,
	UIHudIcon_ObjectiveAttack = 18,
	UIHudIcon_ObjectiveFollow = 19,
	UIHudIcon_ObjectiveGeneral = 20,
	UIHudICon_UAV = 21,
	UIHudIcon_AmmoCrate = 22,
	UIHudIcon_MedicBag = 23,
	UIHudIcon_C4 = 24,
	UIHudIcon_ATMine = 25,
	UIHudIcon_StationaryWeapon = 26,
	UIHudIcon_North = 27,
	UIHudIcon_South = 28,
	UIHudIcon_West = 29,
	UIHudIcon_East = 30,
	UIHudIcon_NeutralFlag = 31,
	UIHudIcon_FriendlyFlag = 32,
	UIHudIcon_EnemyFlag = 33,
	UIHudIcon_FriendlyBase = 34,
	UIHudIcon_EnemyBase = 35,
	UIHudIcon_Team1Flag = 36,
	UIHudIcon_Team2Flag = 37,
	UIHudIcon_NeutralFlagLit = 38,
	UIHudIcon_FriendlyFlagLit = 39,
	UIHudIcon_EnemyFlagLit = 40,
	UIHudIcon_SelectableSpawnPoint = 41,
	UIHudIcon_SelectedSpawnPoint = 42,
	UIHudIcon_NonSelectableSpawnPoint = 43,
	UIHudIcon_FriendlyFlagUnderAttack = 44,
	UIHudIcon_EnemyFlagUnderAttack = 45,
	UIHudIcon_OrderAttack = 46,
	UIHudIcon_OrderDefend = 47,
	UIHudIcon_OrderAttackObserved = 48,
	UIHudIcon_OrderDefendObserved = 49,
	UIHudIcon_Boat = 50,
	UIHudIcon_Car = 51,
	UIHudIcon_Jeep = 52,
	UIHudIcon_HeliAttack = 53,
	UIHudIcon_HeliScout = 54,
	UIHudIcon_Tank = 55,
	UIHudIcon_TankIFV = 56,
	UIHudIcon_TankArty = 57,
	UIHudIcon_TankAA = 58,
	UIHudIcon_TankAT = 59,
	UIHudIcon_Jet = 60,
	UIHudIcon_JetBomber = 61,
	UIHudIcon_Stationary = 62,
	UIHudIcon_Strategic = 63,
	UIHudIcon_MotionRadarSweep = 64,
	UIHudIcon_NeedBackup = 65,
	UIHudIcon_NeedAmmo = 66,
	UIHudIcon_NeedMedic = 67,
	UIHudIcon_NeedPickup = 68,
	UIHudIcon_NeedRepair = 69,
	UIHudIcon_KitAssault = 70,
	UIHudIcon_KitDemolition = 71,
	UIHudIcon_KitRecon = 72,
	UIHudIcon_KitSpecialist = 73,
	UIHudIcon_KitSupport = 74,
	UIHudIcon_KitMedic = 75,
	UIHudIcon_KitEngineer = 76,
	UIHudIcon_KitPickupAssault = 77,
	UIHudIcon_KitPickupDemolition = 78,
	UIHudIcon_KitPickupRecon = 79,
	UIHudIcon_KitPickupSpecialist = 80,
	UIHudIcon_KitPickupSupport = 81,
	UIHudIcon_KitPickupMedic = 82,
	UIHudIcon_KitPickupEngineer = 83,
	UIHudIcon_Pickup = 84,
	UIHudIcon_TaggedVehicle = 85,
	UIHudIcon_LaserPaintedVehicle = 86,
	UIHudIcon_HeliTargetEnemy = 87,
	UIHudIcon_HeliTargetFriendly = 88,
	UIHudIcon_ArtilleryTarget = 89,
	UIHudIcon_NeutralFlagAttacker = 90,
	UIHudIcon_FriendlyFlagAttacker = 91,
	UIHudIcon_EnemyFlagAttacker = 92,
	UIHudIcon_LaserTarget = 93,
	UIHudIcon_ObjectiveAttacker = 94,
	UIHudIcon_ObjectiveDefender = 95,
	UIHudIcon_HealthbarBackground = 96,
	UIHudIcon_Healthbar = 97,
	UIHudIcon_RadarSweepComponent = 98,
	UIHudIcon_Blank = 99,
	UIHudIcon_LocalPlayerBigIcon = 100,
	UIHudIcon_LocalPlayerOutOfMap = 101,
	UIHudIcon_PrimaryObjectiveLarge = 102,
	UIHudIcon_TargetUnlocked = 103,
	UIHudIcon_TargetLocked = 104,
	UIHudIcon_TargetLocking = 105,
	UIHudIcon_ArtilleryStrikeNametag = 106,
	UIHudIcon_ArtilleryStrikeMinimap = 107,
	UIHudIcon_CapturePointContested = 108,
	UIHudIcon_CapturePointDefended = 109,
	UIHudIcon_RoundBar = 110,
	UIHudIcon_RoundBarBg = 111,
	UIHudIcon_RoundBarBgPlate = 112,
	UIHudIcon_SnapOvalArrow = 113,
	UIHudIcon_SquadleaderBg = 114,
	UIHudIcon_VehicleBg = 115,
	UIHudIcon_NonTakeableControlPoint = 116,
	UIHudIcon_SpottedPosition = 117,
	UIHudIcon_Grenade = 118,
	UIHudIcon_Revive = 119,
	UIHudIcon_Repair = 120,
	UIHudIcon_Interact = 121,
	UIHudIcon_Voip = 122,
	UIHudIcon_Claymore = 123,
	UIHudIcon_EodBot = 124,
	UIHudIcon_Explosive = 125,
	UIHudIcon_LaserDesignator = 126,
	UIHudIcon_Mav = 127,
	UIHudIcon_Mortar = 128,
	UIHudIcon_RadioBeacon = 129,
	UIHudIcon_Ugs = 130,
	UIHudIcon_PercetageBarMiddle = 131,
	UIHudIcon_PercetageBarEdge = 132,
	UIHudIcon_PercentageBarBackground = 133,
	UIHudIcon_TankLC = 134,
	UIHudIcon_HeliTrans = 135,
	UIHudIcon_StaticAT = 136,
	UIHudIcon_StaticAA = 137,
	UIHudIcon_SprintBoost = 138,
	UIHudIcon_AmmoBoost = 139,
	UIHudIcon_ExplosiveBoost = 140,
	UIHudIcon_ExplosiveResistBoost = 141,
	UIHudIcon_SuppressionBoost = 142,
	UIHudIcon_SuppressionResistBoost = 143,
	UIHudIcon_GrenadeBoost = 144,
	UIHudIcon_HealSpeedBoost = 145,
	UIHudIcon_NeedAmmoHighlight = 146,
	UIHudIcon_NeedMedicHighlight = 147,
	UIHudIcon_NeedRepairHighlight = 148,
	UIHudIcon_NeedPickupHighlight = 149,
	UIHudIcon_PlayerDead = 150,
	UIHudIcon_Player = 151,
	UIHudIcon_Flag = 152,
	UIHudIcon_Base = 153,
	UIHudIcon_TankDestroyer = 154,
	UIHudIcon_Gunship = 155,
	UIHudIcon_ATV = 156,
	UIHudIcon_WeaponPickupTier1 = 157,
	UIHudIcon_WeaponPickupTier2 = 158,
	UIHudIcon_WeaponPickupTier3 = 159,
	UIHudIcon_VehicleParachuted = 160,
	UIHudIcon_CTFFlagFriendlyHome = 161,
	UIHudIcon_CTFFlagFriendlyPicked = 162,
	UIHudIcon_CTFFlagFriendlyDropped = 163,
	UIHudIcon_CTFFlagEnemyHome = 164,
	UIHudIcon_CTFFlagEnemyPicked = 165,
	UIHudIcon_CTFFlagEnemyDropped = 166,
	UIHudIcon_FriendlyRedFlag = 167,
	UIHudIcon_EnemyGreenFlag = 168,
	UIHudIcon_DirtBike = 169,
	UIHudIcon_Count = 170
}

class UIHUDMessageBinding : UIDataBinding {
	UIDataSourceInfo MessageQuery;
	UIDataSourceInfo VisibilityQuery;
	int32 NumberOfRows;
}

enum UIIconState {
	UIIconState_Default = 0,
	UIIconState_Enemy = 1,
	UIIconState_Friendly = 2,
	UIIconState_Neutral = 3,
	UIIconState_Squad = 4,
	UIIconState_Blink = 5,
	UIIconState_BlinkEnemy = 6,
	UIIconState_Count = 7
}

class UIImageDataBinding : UIDataBinding {
	string StaticImageUrl;
	UIDataSourceInfo ImageData;
	UIDataSourceInfo Visibility;
	bool Visible;
}

class UIIngameMenuCompData : UIComponentData {
}

enum UIInputAction {
	UIInputAction_NavigateUp = 0,
	UIInputAction_NavigateDown = 1,
	UIInputAction_NavigateLeft = 2,
	UIInputAction_NavigateRight = 3,
	UIInputAction_TabLeft = 4,
	UIInputAction_TabRight = 5,
	UIInputAction_Activate = 6,
	UIInputAction_Deactivate = 7,
	UIInputAction_Menu = 8,
	UIInputAction_Cancel = 9,
	UIInputAction_OK = 10,
	UIInputAction_Back = 11,
	UIInputAction_Tab = 12,
	UIInputAction_Edit = 13,
	UIInputAction_View = 14,
	UIInputAction_LThumb = 15,
	UIInputAction_RThumb = 16,
	UIInputAction_MapZoom = 17,
	UIInputAction_MapSize = 18,
	UIInputAction_SayAllChat = 19,
	UIInputAction_TeamChat = 20,
	UIInputAction_SquadChat = 21,
	UIInputAction_CommoRose = 22,
	UIInputAction_ToggleChat = 23,
	UIInputAction_ToggleMinimapType = 24,
	UIInputAction_Size = 25,
	UIInputAction_None = 26
}

enum UIInputActionEventType {
	UIInputActionEventType_Pressed = 1,
	UIInputActionEventType_Released = 2
}

class UIInputCompData : UIComponentData {
}

enum UIInputEvent {
	UIInputEvent_None = 0,
	UIInputEvent_OnButtonA = 1,
	UIInputEvent_OnButtonB = 2,
	UIInputEvent_OnButtonBack = 3,
	UIInputEvent_OnButtonDPad_Down = 4,
	UIInputEvent_OnButtonDPad_Left = 5,
	UIInputEvent_OnButtonDPad_Right = 6,
	UIInputEvent_OnButtonDPad_Up = 7,
	UIInputEvent_OnButtonLB = 8,
	UIInputEvent_OnButtonRB = 9,
	UIInputEvent_OnButtonStart = 10,
	UIInputEvent_OnButtonX = 11,
	UIInputEvent_OnButtonY = 12
}

class UIInputEventNodePort : UINodePort {
	UIInputAction InputEventType;
}

class UIInstallHDContentCompData : UIComponentData {
}

class UIInteractionCompData : UI3dIconCompData {
	float RepairSnapDistance;
	bool RepairSnapCircle;
	bool PickupShrinkSnap;
}

class UIInterruptFlow : Asset {
	InterruptFlow[] interruptFlow;
}

enum UIInterruptID {
	UIInterruptID_None = 0,
	UIInterruptID_ControllerPull = 1
}

class UIInventoryCompData : UIComponentData {
}

class UIItemDescription : DataContainer {
	uint32[] ItemIds;
	bool IgnoreBuild;
}

class UIItemDescriptionAsset : Asset {
	UIItemDescriptionAsset[] Children;
	UIItemDescription[] Items;
}

enum UIKeyboardEventType {
	UIKeyboardEventType_KeyDown = 0,
	UIKeyboardEventType_KeyUp = 1,
	UIKeyboardEventType_Char = 2
}

class UIKillCardCompData : UIComponentData {
}

class UIKillCounterCompData : UIComponentData {
}

class UIKitCompData : UIComponentData {
}

class UIKitItemDescription : UIItemDescription {
	string Name;
	string UnlockName;
	string Description;
	string Category;
	string TexturePath;
	string IconTexturePath;
	string UnlockTexturePath;
	UIHudIcon HudIcon;
	bool NotExplicitelySelectable;
	bool HiddenInProgression;
}

class UILeaderboardCompData : UIComponentData {
}

struct UILeaderboardData {
	string Name;
	string Description;
}

class UILevelCompData : UIComponentData {
}

class UILevelDescription : UIItemDescription {
	string LevelName;
	string TexturePath;
	string ThumbnailTexturePath;
}

class UILevelDescriptionComponent : LevelDescriptionComponent {
	string MPLoadingAssetPath;
	SoundAsset LoadingMusic;
	string LoadingMusicPath;
	string LevelImagePath;
	string LoadingImagePath;
	string SPLoadingAssetPath;
	UIGPSPosition GPSPosition;
	GameTipAsset HintAsset;
	UICreditsAsset[] CreditsAssets;
	UIMinimapData MinimapData;
	UILevelStatData LevelCompledStatData;
	UILevelStatData LevelScoreStatData;
	int32 SortIndex;
	bool IsMenuLevel;
}

struct UILevelLocation {
}

class UILevelLocationDescription : UIItemDescription {
	string Name;
	string Description;
	string TexturePath;
}

struct UILevelSpecificPageHeader {
	string LevelNameSID;
	string Header;
	string SubHeader;
}

struct UILevelStatData {
	string StatEasy;
	string StatMedium;
	string StatHard;
	string StatHardcore;
}

class UILicenseDescription : UIItemDescription {
	string LicenseId;
	string PopupText;
}

class UILifeCounterCompData : UIComponentData {
}

class UILightExposureComponentData : UIComponentData {
}

class UIListDataBinding : UIDataBinding {
	int32 ListIndex;
	UIDataSourceInfo ListQuery;
	StaticListItem[] StaticItems;
	UIListEmptyRowType EmptyRowType;
	DefaultSelectionItem DefaultHighlightedRow;
	UIListRowType RowType;
	UIListNavigationType NavigationType;
	UIDataSourceInfo NavigationTypeSource;
	int32 RowSpacing;
	UIListUnFocusMode UnFocusMode;
	string DisabledRows;
	bool ClearListAtNavigationEvent;
	bool SendIndexWithEvent;
	bool ScreenRotationEnabled;
	bool Use3DSelection;
	bool FireHighlightOnMouseOut;
	bool DataIncludesButtonLayout;
	bool Visible;
	bool SpinnerEnabled;
	bool UseScrollBar;
	bool HighLightOnUpdate;
	bool KeepScrollOffset;
}

enum UIListEmptyRowType {
	emptyRow_28px = 0,
	emptyRow_20px = 1,
	emptyRowNone = 2
}

struct UIListItem {
	string Label;
	UIDataSourceInfo IsEnabled;
	UIDataSourceInfo IsVisible;
	UIDataSourceInfo ToggleItems;
	UIDataSourceInfo DataUpdate;
	bool DefaultIsVisible;
	bool DefaultIsEnabled;
}

enum UIListNavigationType {
	loop = 0,
	noLoop = 1,
	sendEventTopBottom = 2,
	sendEventTop = 3,
	sendEventBottom = 4,
	none = 5
}

enum UIListRowType {
	MixedRows = 0,
	basicRow = 1,
	baseSpawn = 2,
	squadSpawn = 3,
	MenuRow_34px = 4,
	MenuRow_64px = 5,
	ScoreboardRow = 6,
	ScoreboardRow64Players = 7,
	TextSelectorRow = 8,
	TextSelectorRow_28px = 9,
	BarSelectorRow = 10,
	SquadRow = 11,
	ServerListRow = 12,
	StoreRow = 13,
	ComCenterStandardDelimiter = 14,
	ComCenterSquadDelimiter = 15,
	ComCenterStandardFriendRow = 16,
	ComCenterSquadFriendRow = 17,
	ComCenterSquadButtonRow = 18,
	ComCenterLivePartyDelimiter = 19,
	ComCenterLivePartyFriendRow = 20,
	SquadDetailedRow = 21,
	ComCenterLivePartyButtonRow = 22,
	CoopMissionTeamRow = 23,
	LeaderBoardRow = 24,
	CoopLeaderBoardRow = 25,
	BattleLogStandardRow = 26,
	BattleLogNewsRow = 27,
	ServerLocationsRow = 28,
	ServerExtendRow = 29,
	ServerInfoSettingsRow = 30,
	ServerInfoPlayersRow = 31,
	CheckBoxRow = 32,
	BarSelectorRow_28px = 33,
	BasicRow_34px = 34,
	KeyBindingRow = 35,
	SquadListRow = 36,
	teamSpawn = 37,
	MatchListRow = 38,
	MatchPlayerListRow = 39,
	ManageServerPlayerRow = 40,
	ServerSettingsRow = 41,
	ServerPlayersRow = 42,
	TopPlayersRow = 43,
	MenuRowPremium_34px = 44,
	MenuRowPremium_64px = 45
}

enum UIListUnFocusMode {
	DeSelect = 0,
	ChangeState = 1,
	None = 2
}

class UILoadLevelCompData : UIComponentData {
}

class UILocalizeCompData : UIComponentData {
}

enum UILogicOperator {
	UILogicOperator_None = 0,
	UILogicOperator_Equal = 1,
	UILogicOperator_GreaterThan = 2,
	UILogicOperator_GreaterThanOrEqual = 3,
	UILogicOperator_LessThan = 4,
	UILogicOperator_LessThanOrEqual = 5
}

class UIManageMapsCompData : UIComponentData {
}

class UIManagePlayersCompData : UIComponentData {
}

class UIManageServerPresetsCompData : UIComponentData {
}

class UIManDownCompData : UIComponentData {
	float DelayManDownTextTime;
}

class UIManualCompData : UIComponentData {
}

class UIMapmarkerCompData : UIComponentData {
	int32[] ProximityIntervals;
}

class UIMapmarkertagCompData : UI3dIconCompData {
}

class UIMatchCompData : UIComponentData {
}

class UIMatchesListCompData : UIComponentData {
}

class UIMemCardCompData : UIComponentData {
}

class UIMessageCompData : UIComponentData {
	float ScoreAggregateTime;
	MessageInfo ChatMessageInfo;
	MessageInfo KillMessageInfo;
	MessageInfo ScoreMessageInfo;
	MessageInfo ScoreMinorMessageInfo;
	MessageInfo ScoreMajorMessageInfo;
	MessageInfo GameMessageInfo;
	MessageInfo StaticMessageInfo;
	MessageInfo OutOfBoundsMessageInfo;
	MessageInfo KillScoreMessageInfo;
	MessageInfo LogLinesMessageInfo;
	MessageInfo TooltipMessageInfo;
	MessageInfo SubtitleMessageInfo;
	MessageInfo RewardMessageInfo;
	MessageInfo LocalKillMessageInfo;
	MessageInfo ServerAdminYellMessageInfo;
	MessageInfo GunMasterMessageInfo;
	string[] ForceSubtitlesForTheseLevels;
	string[] ForceSubtitlesOffForTheseLevels;
}

enum UIMessageEntityType {
	UIMessageEntityType_Message = 0,
	UIMessageEntityType_Tooltip = 1,
	UIMessageEntityType_LogLines = 2,
	UIMessageEntityType_Subtitle = 3,
	UIMessageEntityType_FailState = 4,
	UIMessageEntityType_OutOfBounds = 5
}

class UIMessageTriggerData : EntityData {
	Realm Realm;
}

enum UIMessageType {
	UIMessageType_Text = 0,
	UIMessageType_EnemyTank = 1,
	UIMessageType_EnemyCar = 2,
	UIMessageType_EnemyBoat = 3,
	UIMessageType_EnemyHelicopter = 4,
	UIMessageType_EnemyInfantry = 5,
	UIMessageType_EnemyActivity = 6,
	UIMessageType_EnemyC4 = 7,
	UIMessageType_EnemyATMine = 8,
	UIMessageType_ChatGo = 9,
	UIMessageType_ChatFollowMe = 10,
	UIMessageType_ChatNeedBackup = 11,
	UIMessageType_ChatNeedPickup = 12,
	UIMessageType_ChatNeedAmmo = 13,
	UIMessageType_ChatNeedMedic = 14,
	UIMessageType_ChatYes = 15,
	UIMessageType_ChatNo = 16,
	UIMessageType_ChatThanks = 17,
	UIMessageType_ChatSorry = 18,
	UIMessageType_ChatNeedRepair = 19,
	UIMessageType_ChatGetIn = 20,
	UIMessageType_ChatGetOut = 21,
	UIMessageType_ChatDropMeOff = 22,
	UIMessageType_OrderDefendBase = 23,
	UIMessageType_OrderAttackBase = 24,
	UIMessageType_OrderMoveToPos = 25,
	UIMessageType_JoinedSquad = 26,
	UIMessageType_LeftSquad = 27,
	UIMessageType_RequestSquad = 28,
	UIMessageType_InviteSquad = 29,
	UIMessageType_KickSquad = 30,
	UIMessageType_LeaderPromoted = 31,
	UIMessageType_Connected = 32,
	UIMessageType_Disconnected = 33,
	UIMessageType_Killed = 34,
	UIMessageType_Died = 35
}

class UIMinimapCompData : UIComponentData {
}

struct UIMinimapConfig {
	float CombatAreaCameraDelay;
	float CameraInterpolationTime;
	float CombatAreaFadeSpeed;
	UIMinimapZoomConfig[] ZoomStates;
	float CameraPanSensitivity;
	float MinVelocity;
	float MaxVelocity;
	float VelocityModifier;
	bool DisableDefaultState;
}

struct UIMinimapData {
	Vec2 WorldCenter;
	Vec4 CombatAreaColor;
	Vec4 DetailTextureTint;
	Vec2 CombatAreaMultiplyWrapAmount;
	UIMinimapDistanceFieldParams Vegetation;
	TextureAsset FadeTexture;
	float StreamingMinimapDelay;
	TextureAsset AirRadarFadeTexture;
	TextureAsset DetailTexture;
	UIMinimapDistanceFieldParams Detail;
	float StreamingMinimapTransitionSpeed;
	float WorldRotation;
	float WorldRange;
	float CombatAreaDistanceScale;
	float CombatAreaFadeSpeed;
	float CombatAreaAlphaThreshold;
	TextureAsset CombatAreaMultiplyTexture;
	float WorldSize;
	float AirRadarRange;
	float CombatAreaScale;
	bool UseStreamingMinimap;
	bool UseCombatAreaTexture;
}

struct UIMinimapDistanceFieldParams {
	Vec4 ColorTint;
	Vec4 OutlineColor;
	float DistanceScale;
	float AlphaThreshold;
	float OutlineInner;
	float OutlineOuter;
	UIDistanceFieldAsset DistanceField;
}

struct UIMinimapIconTexture {
	UIHudIcon IconType;
	UIMinimapIconTextureState[] States;
}

class UIMinimapIconTextureAtlasAsset : Asset {
	UIMinimapIconTexture[] Icons;
	TextureAsset TextureAtlas;
}

struct UIMinimapIconTextureState {
	UIIconState State;
	float FrameRate;
	UIMinimapIconUv[] TextureInfos;
	bool ShouldRotate;
}

struct UIMinimapIconUv {
	Vec2 MinUv;
	Vec2 MaxUv;
}

class UIMinimapVolumeEntityData : GameEntityData {
	Asset Asset;
	bool IsDefault;
}

struct UIMinimapZoomConfig {
	UIMinimapZoomState State;
	MinimapData Data;
}

enum UIMinimapZoomState {
	UIMinimapZoomState_Default = 0,
	UIMinimapZoomState_Overview = 1,
	UIMinimapZoomState_CombatArea = 2,
	UIMinimapZoomState_Mission = 3,
	UIMinimapZoomState_Artillery = 4,
	UIMinimapZoomState_Spawn = 5,
	UIMinimapZoomState_ManDown = 6,
	UIMinimapZoomState_Count = 7
}

class UIModDescription : UIItemDescription {
	string Identifier;
	string ShortName;
	string FullName;
	string Desc;
}

enum UIMouseButton {
	UIMouseButton_Left = 0,
	UIMouseButton_Right = 1,
	UIMouseButton_Middle = 2
}

enum UIMouseEventType {
	UIMouseEventType_MouseMove = 0,
	UIMouseEventType_MouseWheel = 1,
	UIMouseEventType_ButtonDown = 2,
	UIMouseEventType_ButtonUp = 3
}

class UINametag : DataContainer {
	Vec3 TextColor;
	float IconFadeDistance;
	float IconMaxDistance;
	UIHudIcon Icon;
	float TextFadeDistance;
	float HealthFadeDistance;
	float HealthMaxDistance;
	float TextMaxDistance;
	float TargetInTimer;
	float TargetOutTimer;
}

class UINametagCompData : UI3dIconCompData {
	Vec4 SquadTint;
	Vec4 EnemyTint;
	Vec4 FriendlyTint;
	int32 OrderCooldown;
	int32 TooltipCooldown;
	float HealthBarSize;
	float NameFontSize;
	float NameGlowSize;
}

class UINametagCoopCompData : UINametagCompData {
}

class UINametagSPCompData : UINametagCompData {
}

class UINavigationCompData : UIComponentData {
}

class UINestedListDataBinding : UIDataBinding {
	int32 ListIndex;
	NestedList[] NestedLists;
	int32 RowSpacing;
	DefaultSelectionItem DefaultHighlightedRow;
	UIListNavigationType NavigationType;
	UIListRowType RowType;
	UIListEmptyRowType EmptyRowType;
	int32 SelectorWidth;
	UIDataSourceInfo Visibility;
	bool SendIndexWithEvent;
	bool UseScrollBar;
	bool DataIncludesButtonLayout;
	bool ClearListAtNavigationEvent;
	bool Use3DSelection;
	bool InvertVisible;
	bool Visible;
	bool ScreenRotationEnabled;
	bool HighLightOnUpdate;
	bool KeepScrollOffset;
}

struct UINetworkTextInfo {
	string StringId;
	float DisplayTime;
}

class UINodeConnection : DataContainer {
	UINodeData SourceNode;
	UINodeData TargetNode;
	UINodePort SourcePort;
	UINodePort TargetPort;
	int32 NumScreensToPop;
}

class UINodeData : DataContainer {
	string Name;
	UIGraphAsset ParentGraph;
	bool IsRootNode;
	bool ParentIsScreen;
}

class UINodePort : DataContainer {
	string Name;
	string InstanceName;
	UIWidgetEventID Query;
	bool AllowManualRemove;
}

struct UIntRange {
	uint32 Min;
	uint32 Max;
}

class UINumberDataBinding : UIDataBinding {
	UIDataSourceInfo Value;
	int32 NumValue;
	bool Refresh;
}

class UIObjectivesCompData : UIComponentData {
}

class UIOnDemandFontComponentData : UIComponentData {
	UIFontCollection[] FontCollections;
}

class UIPageHeaderBinding : UIDataBinding {
	UIDataSourceInfo Header;
	UIDataSourceInfo SubHeader;
	UIDataSourceInfo Icon;
	string StaticHeader;
	string StaticSubHeader;
	string StaticIcon;
	UILevelSpecificPageHeader[] LevelSpecificHeaders;
}

class UIPartData : DataContainer {
}

enum UIPartIdentifier {
	HCI_None = 0,
	HCI_RangeMeter = 1,
	HCI_PredictedSight = 2,
	HCI_VelocityVector = 3,
	HCI_RadioAltitude = 4
}

struct UIPartProperties {
	UIPartIdentifier Identifier;
	float Range;
	float Frequency;
	bool CompensateFreelook;
}

class UIPartPropertyList : DataContainer {
	UIPartProperties[] HudPropertyList;
}

class UIPersistenceCompData : UIComponentData {
}

class UIPlaygroupCompData : UIComponentData {
}

struct UIPopupButton {
	UIInputAction InputConcept;
	string Label;
}

class UIPopupCompData : UIComponentData {
}

struct UIPopupTextInput {
	string Id;
	string Label;
	string DefaultValue;
	bool IsPassword;
}

enum UIPopupType {
	PopupType_MemCard = 0,
	PopupType_ControllerDisconnected = 1,
	PopupType_Login = 2,
	PopupType_TermsOfService = 3,
	PopupType_PrivacyPolicy = 4,
	PopupType_RevivePrompt = 5,
	PopupType_Generic = 6,
	PopupType_ServerReminder = 7,
	PopupType_Error = 8,
	PopupType_ManagePlayer = 9,
	PopupType_Invalid = 10,
	PopupType_IngamePlayer = 11,
	PopupType_OnlinePass = 12,
	PopupType_Origin = 13,
	PopupType_UpdateAvailable = 14,
	PopupType_Dynamic = 15,
	PopupType_GameQueue = 16,
	PopupType_COOPMatchmaking = 17,
	PopupType_PromoInfo = 18
}

class UIPostProcessComponentData : UIComponentData {
	float HighlightThreshold;
	float XPower;
	float YPower;
	float Distort;
	float TimeScale;
	TextureAsset NoiseTexture;
	float Highlight;
	float RShift;
	float GShift;
	float BShift;
	bool TweakMode;
	bool Enabled;
}

class UIPremiumCompData : UIComponentData {
}

class UIPreRoundCompData : UIComponentData {
}

class UIPresenceCompData : UIComponentData {
}

class UIQueuedEventsCompData : UIComponentData {
	float InitialQueueDelay;
	bool ShowUnlocksBecomingAvailable;
}

class UIRankDescription : UIItemDescription {
	bool IgnoreBuild;
}

class UIRenderCompData : UIComponentData {
	Vec4 BackgroundRect1;
	Vec4 BackgroundRect0;
	TextureAsset BgTexture2;
	TextureAsset BgTexture1;
	float AlphaMin;
	float AlphaAnimationSpeed;
	float AlphaOffset;
	float AlphaMax;
}

class UIRightClickCompData : UIComponentData {
}

class UIScoreboardCompData : UIComponentData {
	float MaxUpdateInterval;
}

class UIScreenAsset : UIGraphAsset {
}

class UIScreenEventCompData : UIComponentData {
}

class UIScreenshotCompData : UIComponentData {
	uint32 ResizeImageWidth;
	ScreenshotInfo[] ScreenshotInfos;
	uint32 ResizeImageHeight;
	bool AutoResizeImage;
}

class UIServerBrowserCompData : UIComponentData {
}

class UIServerListCompData : UIComponentData {
}

class UIServerListFilterBarCompData : UIComponentData {
}

class UISessionDataComponentData : UIComponentData {
}

class UISettings : SystemSettings {
	UISystemType System;
	UIBundlesAsset Bundles;
	ProfileOptionsAsset ProfileOptions;
	LanguageFormat Language;
	DataCopSettings DataCop;
	bool OneBundlePerGraph;
	bool DrawEnable;
}

class UISettingsCompData : UIComponentData {
	UISettingsPage[] SettingsPages;
}

struct UISettingsGroup {
	string NameSid;
	int32 ScreenColumn;
	UISettingsItem[] SettingsItems;
}

struct UISettingsItem {
	string NameSid;
	UISettingSymbols StartEndSymbols;
	ProfileOptionData Setting;
}

struct UISettingsPage {
	string NameSid;
	UISettingsGroup[] SettingsGroups;
}

enum UISettingSymbols {
	UISettingSymbols_Pluses = 0,
	UISettingSymbols_Values = 1,
	UISettingSymbols_None = 2
}

enum UISettingType {
	UISettingType_Slider = 0,
	UISettingType_TickerUpDown = 1,
	UISettingType_Droplist = 2,
	UISettingType_Checkbox = 3,
	UISettingType_Text = 4,
	UISettingType_NotSet = 5
}

class UISetupServerWizardCompData : UIComponentData {
	int32 PasswdMinLen;
}

class UISetValueData : EntityData {
	UIDataSourceInfo DataSource;
	int32 IntValue;
	float FloatValue;
	string StringValue;
	bool BoolValue;
}

class UISoldierCompData : UIComponentData {
	float CriticalHealthThreshold;
	float HitShaderDamageMultiplier;
	float HitShaderMinDamage;
	float EKGLineThickness;
	int32 ShockTraumaAbilityIndex;
	int32 RangerPTProgramAbilityIndex;
	int32 FocusAbilityIndex;
	float EKGLineAlpha;
	float HitShaderGradientDurationMultiplier;
	float HitShaderMaxDamage;
	float HitShaderIndicatorDurationMultiplier;
	bool UseVehicleTeamSpawn;
	bool UseSquadSpawn;
	bool SpawnOnSquadLeaders;
}

class UISoundCompData : UIComponentData {
}

class UISpawnLogicCompData : UIComponentData {
}

class UISpawnPointCompData : UIComponentData {
}

class UISpectatorCompData : UIComponentData {
}

class UISquadCompData : UIComponentData {
	string Squad15;
	string Squad32;
	string Squad1;
	string Squad2;
	string Squad3;
	string Squad4;
	string Squad5;
	string Squad6;
	string Squad7;
	string Squad8;
	string Squad9;
	string Squad10;
	string Squad11;
	string Squad12;
	string Squad13;
	string Squad14;
	string Squad16;
	string Squad24;
	string Squad17;
	string Squad18;
	string Squad19;
	string Squad20;
	string Squad21;
	string Squad22;
	string Squad23;
	string Squad31;
	string Squad25;
	string Squad26;
	string Squad27;
	string Squad28;
	string Squad29;
	string Squad30;
	bool HideLocalSquadBoostData;
}

enum UIState {
	UIState_Menu = 0,
	UIState_LoadingSP = 1,
	UIState_LoadingMP = 2,
	UIState_Playing = 3,
	UIState_Unload = 4,
	UIState_Embedded = 5,
	UIState_Static = 6,
	UIState_StaticGenerated = 7,
	UIState_PreEndOfRound = 8,
	UIState_EndOfRound = 9,
	UIState_PlayingSP = 10,
	UIState_PlayingMP = 11,
	UIState_None = 12
}

class UIStateAsset : Asset {
	UIComponentData[] UIComponents;
	UIAsset[] ActionscriptLibraries;
	string[] ActionscriptNames;
	string StateName;
	string StatePath;
}

class UIStatsCompData : UIComponentData {
}

class UIStoreCompData : UIComponentData {
}

enum UISystemType {
	UISystem_None = 0,
	UISystem_Standard = 1
}

struct UITaggedVehicleCrosshair {
	float MinDistance;
	float MaxDistance;
	int32 MinSize;
	int32 MaxSize;
}

class UITeamCompData : UIComponentData {
}

class UITeamSupportTagCompData : UI3dIconCompData {
}

class UITextDatabase : Asset {
	LanguageFormat Language;
	guid BinaryChunk;
	uint32 BinaryChunkSize;
	guid HistogramChunk;
	uint32 HistogramChunkSize;
}

class UITextDataBinding : UIDataBinding {
	string StaticText;
	UIDataSourceInfo TextData;
	UIDataSourceInfo Visibility;
	bool Refresh;
	bool OverrideDirectAccess;
}

struct UITextureAtlasInfo {
	Vec2 MinUv;
	Vec2 MaxUv;
}

class UITextureStreamingComponentData : UIComponentData {
}

class UITicketCounterCompData : UIComponentData {
}

class UITrackingtagCompData : UI3dIconCompData {
	bool ShowUnlockedLockAlways;
	bool ShowUnlockedLockOnRadar;
	bool ShowUnlockedLockOnHeat;
	bool ShowUnlockedLockOnLaserPainted;
}

class UITrainingCompData : UIComponentData {
}

class UIUnlocksCompData : UIComponentData {
}

enum UIUpdateType {
	UIUpdateType_Always = 0,
	UIUpdateType_Odd = 1,
	UIUpdateType_Even = 2,
	UIUpdateType_Never = 3
}

class UIVehicleCompData : UIComponentData {
	int32 RangeMeterUpdatesPerSecond;
}

class UIVehicleDescription : UIItemDescription {
	string Name;
	string Description;
	string TexturePath;
}

class UIVehicleUnlockDescription : UIItemDescription {
	string Name;
	string Description;
	string Category;
	string TexturePath;
	string IconTexturePath;
	string UnlockTexturePath;
	bool HiddenInProgression;
	bool NotExplicitelySelectable;
}

class UIVehicleWeaponDescription : UIItemDescription {
	string Name;
}

class UIVoiceCompData : UIComponentData {
	uint32 HudMaxSpeakers;
}

class UIWeaponAccessoryDescription : UIItemDescription {
	string Name;
	string Description;
	string Category;
	string TexturePath;
	string IconTexturePath;
	string UnlockTexturePath;
	string MiscTexturePath;
	bool CoreAccessory;
	bool HiddenInProgression;
}

class UIWeaponCompData : UIComponentData {
	float MinHitIndicatorLimit;
	float MaxHitIndicatorLimit;
	float NormalHitIndicatorLimit;
}

class UIWeaponDescription : UIItemDescription {
	string Name;
	string UnlockName;
	string Description;
	string Category;
	string TexturePath;
	string IconTexturePath;
	string UnlockTexturePath;
	string Ammo;
	string RateOfFire;
	string Range;
	bool FireModeSingle;
	bool FireModeBurst;
	bool FireModeAuto;
	bool HiddenInProgression;
}

class UIWidgetAsset : UIAsset {
	WidgetEventQueryPair[] WidgetEvents;
}

class UIWidgetEventCompData : UIComponentData {
}

enum UIWidgetEventID {
	UIWidgetEventID_None = 0,
	UIWidgetEventID_OnItemSelected = 1,
	UIWidgetEventID_OnItemHighlighted = 2,
	UIWidgetEventID_OnItemReleased = 3,
	UIWidgetEventID_OnItemUnhighlighted = 4,
	UIWidgetEventID_OnItemPressed = 5,
	UIWidgetEventID_OnItemOver = 6,
	UIWidgetEventID_OnItemOut = 7,
	UIWidgetEventID_OnToggle = 8,
	UIWidgetEventID_OnChanged = 9,
	UIWidgetEventID_OnButtonBarChanged = 10,
	UIWidgetEventID_EnterTop = 11,
	UIWidgetEventID_EnterBottom = 12,
	UIWidgetEventID_EnterAny = 13,
	UIWidgetEventID_SetIndex = 14,
	UIWidgetEventID_SetPercentage = 15,
	UIWidgetEventID_OnReachedTop = 16,
	UIWidgetEventID_OnReachedBottom = 17,
	UIWidgetEventID_OnNavigateLeft = 18,
	UIWidgetEventID_OnNavigateRight = 19,
	UIWidgetEventID_Show = 20,
	UIWidgetEventID_Hide = 21,
	UIWidgetEventID_OnShow = 22,
	UIWidgetEventID_OnHide = 23,
	UIWidgetEventID_Toggle = 24,
	UIWidgetEventID_ToggleOn = 25,
	UIWidgetEventID_ToggleOff = 26,
	UIWidgetEventID_ToggledOn = 27,
	UIWidgetEventID_ToggledOff = 28,
	UIWidgetEventID_Update = 29,
	UIWidgetEventID_OnComplete = 30,
	UIWidgetEventID_Focus = 31,
	UIWidgetEventID_OnHeaderChanged = 32,
	UIWidgetEventID_OnDescriptionChanged = 33,
	UIWidgetEventID_OnMapChanged = 34,
	UIWidgetEventID_Clear = 35,
	UIWidgetEventID_Delete = 36,
	UIWidgetEventID_LThumb = 37,
	UIWidgetEventID_RThumb = 38,
	UIWidgetEventID_LTAB = 39,
	UIWidgetEventID_RTAB = 40,
	UIWidgetEventID_OnLarge = 41,
	UIWidgetEventID_OnSmall = 42,
	UIWidgetEventID_TextEntered = 43,
	UIWidgetEventID_PlaySoundNavigate = 44,
	UIWidgetEventID_PlaySoundSelect = 45,
	UIWidgetEventID_PlaySoundPageSwap = 46,
	UIWidgetEventID_OnComPressed = 47,
	UIWidgetEventID_OnComReleased = 48,
	UIWidgetEventID_NumItems = 49
}

enum UIWidgetEventQuery {
	UIWidgetEventQuery_FireEvent = 0
}

class UIWidgetMovieCompData : UIComponentData {
}

class UIWidgetPathBinding : UIDataBinding {
	UIDataSourceInfo WidgetPathQuery;
	UIDataSourceInfo Visibility;
}

struct UIWidgetProperty {
	string Name;
	string Value;
}

class UnderFireTriggerEntityData : TriggerEntityData {
	float Radius;
	float CoolDownTime;
	MaterialContainerPair TriggerOnMaterialOnly;
	AreaTriggerInclude TriggeredBy;
	bool DisableIfTrackEntityIsLost;
	bool RandomYaw;
	bool IndicateHit;
}

enum UndergrowthOrientationMode {
	UndergrowthOrientationMode_Horizontal = 0,
	UndergrowthOrientationMode_LeanToTerrain = 1,
	UndergrowthOrientationMode_SkewToTerrain = 2
}

enum UndergrowthRotationMode {
	UndergrowthRotationMode_Random = 0,
	UndergrowthRotationMode_TowardsSlope = 1,
	UndergrowthRotationMode_Fixed = 2
}

class UnlockableColorCollection : DataContainer {
	ColorReference DefaultValue;
	ColorUnlockPartData[] PossibleValues;
}

struct UnlockableProjectile {
	Vec3 InitialSpeed;
	ProjectileEntityData ProjectileData;
	ProjectileBlueprint Projectile;
	UnlockAssetBase Unlock;
}

class UnlockableShaderParameterValueCollection : DataContainer {
	string ShaderParameterName;
}

class UnlockableTextureCollection : DataContainer {
	TextureAsset DefaultValue;
}

class UnlockableTextureSliceCollection : DataContainer {
	int32 DefaultValue;
	TextureSliceUnlockPartData[] PossibleValues;
}

class UnlockAsset : UnlockAssetBase {
	Asset[] LinkedTo;
}

class UnlockAssetBase : Asset {
	uint32 UnlockScore;
	UnlockUserDataBase UnlockUserData;
	string DebugUnlockId;
	uint32 Identifier;
	UnlockAvailability AvailableForPlayer;
	UnlockAssetBase NextLevelUnlockAsset;
	bool AutoAvailable;
	bool HiddenInProgression;
}

struct UnlockAssetPair {
	UnlockAssetBase Second;
	UnlockAssetBase Result;
}

enum UnlockAvailability {
	UnlockAvailability_All = 0,
	UnlockAvailability_HumanPlayerOnly = 1,
	UnlockAvailability_AIOnly = 2
}

class UnlockComponentData : ComponentData {
	UnlockAssetBase UnlockAsset;
	uint32 UnlockDataKey;
	bool UnlockableFromAllEntries;
	bool InvertUnlockTest;
}

class UnlockUserDataBase : Asset {
}

class UnlockValuePair : DataContainer {
	string Id;
}

struct UnlockWeaponAndSlot {
	SoldierWeaponUnlockAsset Weapon;
	WeaponSlot Slot;
	UnlockAssetBase[] UnlockAssets;
}

class UpdateAgeData : ProcessorData {
	float Lifetime;
}

class UpdateAlphaLevelMaxData : ProcessorData {
	float MaxLevel;
}

class UpdateAlphaLevelMinData : ProcessorData {
	float MinLevel;
}

class UpdateAlphaLevelScaleData : ProcessorData {
	float Exponent;
}

class UpdateCameraProximityData : ProcessorData {
	Vec3 Size;
	float ForwardOffset;
}

class UpdateClipScaleData : ProcessorData {
	int16[] Lookup;
}

class UpdateColorData : ProcessorData {
	Vec3 Color;
}

class UpdateLinearVelocityData : ProcessorData {
}

class UpdateOrientationData : ProcessorData {
}

enum UpdatePass {
	UpdatePass_PreSim = 0,
	UpdatePass_PostSim = 1,
	UpdatePass_PostFrame = 2,
	UpdatePass_FrameInterpolation = 3,
	UpdatePass_PreInput = 4,
	UpdatePass_PreFrame = 5,
	UpdatePass_Count = 6
}

class UpdateRotationData : ProcessorData {
}

class UpdateSizeData : ProcessorData {
	Vec2 Pivot;
}

class UpdateSizeXData : ProcessorData {
}

class UpdateSizeYData : ProcessorData {
}

class UpdateSizeZData : ProcessorData {
}

class UpdateTextureCoordsData : ProcessorData {
	EmitterTextureInfo TextureInfo1;
	float TextureBlendValue;
}

class UpdateTransparencyData : ProcessorData {
	float CullThreshold;
}

struct UrgencyModifierData {
	string Name;
	float Modifier;
}

class UrgencySetData : DataContainer {
	string Name;
	UrgencyModifierData[] UrgencyModifiers;
}

class UrgencyUserData : DataContainer {
	UrgencyUserData Base;
	UrgencyModifierData[] UrgencyModifiers;
	UrgencySetData[] ModifierSets;
}

class UserComponentData : UIComponentData {
}

class UserMusicArbiterNodeData : AudioGraphNodeData {
	AudioGraphNodePort In;
	AudioGraphNodePort Out;
	SoundGraphPluginRef Plugin;
}

class UserMusicControllerNodeData : AudioGraphNodeData {
	AudioGraphNodePort Override;
	AudioGraphNodePort Restore;
	bool RestoreOnDeactivated;
}

struct ValueAtX {
	float X;
	float Value;
}

class ValueDebugNodeData : AudioGraphNodeData {
	DebugValueInput[] Values;
}

class ValueSelectorEntry : AudioGraphNodePortGroup {
	AudioGraphNodePort Input;
	float CaseValue;
}

class ValueSelectorNodeData : AudioGraphNodeData {
	ValueSelectorEntry[] Inputs;
	AudioGraphNodePort Value;
	AudioGraphNodePort Out;
	float DefaultCaseValue;
}

class ValueUnlockAsset : UnlockAssetBase {
	UnlockValuePair[] UnlockValues;
}

class VaultWaypointData : AbstractLocoWaypointData {
	AILocoVaultTaskData VaultTask;
}

class Vec2PropertyTrackData : SimplePropertyTrackData {
	Vec2[] Values;
}

class Vec2RecordingData : PropertyRecordingData {
	Vec2[] Values;
}

class Vec3EntityData : EntityData {
	Vec3 DefaultValue;
	Realm Realm;
}

enum Vec3MathOp {
	Vec3MathOp_Add = 0,
	Vec3MathOp_Subtract = 1,
	Vec3MathOp_Multiply = 2,
	Vec3MathOp_Divide = 3,
	Vec3MathOp_Min = 4,
	Vec3MathOp_Max = 5,
	Vec3MathOp_Dot = 6,
	Vec3MathOp_Len = 7,
	Vec3MathOp_LenSq = 8,
	Vec3MathOp_Cross = 9,
	Vec3MathOp_Norm = 10
}

class Vec3MathOpEntityData : EntityData {
	Realm Realm;
	Vec3MathOp[] Operators;
}

class Vec3PropertyTrackData : SimplePropertyTrackData {
	Vec3[] Values;
}

class Vec3RecordingData : PropertyRecordingData {
	Vec3[] Values;
}

class Vec4PropertyTrackData : SimplePropertyTrackData {
	Vec4[] Values;
}

class Vec4RecordingData : PropertyRecordingData {
	Vec4[] Values;
}

class VecSplitterEntityData : EntityData {
	Vec3 Vec3;
	Vec4 Vec4;
	Realm Realm;
}

struct VectorArrayShaderParameter {
	string ParameterName;
	ShaderParameterType ParameterType;
	Vec4[] Values;
}

struct VectorShaderParameter {
	Vec4 Value;
	ShaderParameterType ParameterType;
	string ParameterName;
}

class VectorShapeData : BaseShapeData {
	Vec3[] Points;
	Vec3[] Normals;
	float Tension;
	bool IsClosed;
	bool AllowRoll;
}

class VegetationBaseEntityData : GameEntityData {
	LinearTransform[] BasePoseTransforms;
	Vec3[] BasePoseTranslations;
	int32[] Hierarchy;
	SkinnedMeshAsset Mesh;
	SkinnedMeshAsset ShadowMesh;
	PhysicsEntityData PhysicsData;
}

class VegetationSystemSettings : DataContainer {
	float WindVariation;
	float WindVariationRate;
	float WindStrength;
	float JointTensionLimit;
	int32 ForceShadowLod;
	uint32 MaxPreSimsPerJob;
	uint32 SimulationMemKbClient;
	float MaxActiveDistance;
	uint32 SimulationMemKbServer;
	uint32 JobCount;
	int32 JointTensionLimitIndex;
	float TimeScale;
	bool LocalInfluencesEnabled;
	bool SubDestructionEnabled;
	bool DissolveEnable;
	bool Enable;
	bool SimulateServerSide;
	bool EnableJobs;
	bool ShadowMeshEnable;
	bool DrawNodes;
	bool DrawEnable;
	bool BatchDrawEnable;
	bool DestructionEnabled;
	bool UseShadowLodOffset;
}

class VegetationTreeEntityData : VegetationBaseEntityData {
	EffectBlueprint GroundImpactEffect;
	EffectBlueprint StemRipEffect;
	float StemPhysicsWidth;
	float ColiPlaneDepth;
	float StemHitpoints;
	float BranchHitpoints;
	float BranchL2Hitpoints;
	float StemStiffness;
	float StemStiffnessSpread;
	float BranchStiffness;
	float BranchStiffnessL2;
	int32 StemBoneCount;
	float WindStem;
	float WindBranch;
	float WindBranchL2;
	EffectBlueprint TreeFallEffect;
	float BreakableJointThreshold;
	float FallDirectionEnd;
	EffectBlueprint LocalWindEffect;
	float ImpactThreshold;
	float CollisionImpactMultiplier;
	float FallDirectionStart;
	EffectBlueprint SplashDistantEffect;
	EffectBlueprint BulletImpactEffect;
	float PartsTimeToLive;
	uint32 ShadowLODOffset;
	EffectBlueprint SplashNearEffect;
	EffectBlueprint CollisionEffect;
	bool ForceFullSim;
	bool UseImpactThreshold;
	bool UsePhysicsShapes;
	bool ConstraintStemB1;
	bool ConstraintStemB2;
	bool ClientSideOnly;
}

class VehicleAsset : VehicleBlueprint {
}

class VehicleBlueprint : ObjectBlueprint {
}

struct VehicleCameraControlBinding {
	AntRef EnableAnimatedVehicleCamera;
}

class VehicleCameraData : TargetCameraData {
	Vec3 MoveToPosition;
	Vec3 MoveToPositionSlopeFactor;
	Vec3 TargetOffset;
	Vec3 TargetOffsetSlopeFactor;
	Vec3 RotationFactor;
	float PositionFactor;
	float ResetDistance;
	bool FixedPosition;
	bool FixedAngleZ;
	bool UseTerrainAdjustment;
}

enum VehicleCategory {
	VehicleCategory_Land = 0,
	VehicleCategory_Air = 1
}

class VehicleComponentData : ChassisComponentData {
}

class VehicleConfigData : DataContainer {
	Vec3 CenterOfMass;
	Vec3 CenterOfMassHandlingOffset;
	Vec3 InertiaModifier;
	AeroDynamicPhysicsData AeroDynamicPhysics;
	VehicleParachuteData ParachutePhysics;
	MotorbikeData MotorbikePhysics;
	MotionDampingData MotionDamping;
	VehicleInputData Input;
	FloatPhysicsData FloatPhysics;
	StabilizerData Stabilizer;
	StabilizerSettings[] Stabilizers;
	ConstantForceData[] ConstantForce;
	VehicleMode VehicleModeAtReset;
	float BodyMass;
	float GravityModifier;
	float YawMin;
	float YawMax;
	float DownForceBaseFactor;
	float DownForceWheelFactor;
	float VehicleModeChangeEnteringTime;
	float VehicleModeChangeStartingTime;
	float VehicleModeChangeStoppingTime;
	float VehicleModeChangeLeavingTime;
	float StandStillLowSpeedTimeLimit;
	float StaticFrictionBreakCollisionMod;
	float StaticFrictionBreakVelocityMod;
	float CoefficientOfAirFriction;
	float AirDensity;
	float AirDragArea;
	float WindResistanceBaseFactor;
	float WindResistanceVelocityFactor;
	float WindResistanceVelocityFactorMin;
	float WindResistanceVelocityFactorMax;
	AntiRollBars AntiRollBars;
	bool UseDownForceWheelFactor;
	bool UseGearbox;
	bool UseStandStillBrake;
	bool UseStandStillSleep;
	bool UseTurnAroundForce;
	bool UseMotorcycleControl;
	bool InvertPitchAllowed;
	bool UseWindResistance;
	bool UseDownForce;
}

class VehicleCustomizationAsset : Asset {
	CustomizationTable Customization;
}

class VehicleDeployWeaponData : WeaponData {
	float DeployAreaRadius;
	ObjectBlueprint PreviewObject;
	float DeployAreaGroundRayLength;
	float DeployAreaGroundFlatness;
	bool UsePreview;
	bool CheckClearSky;
	bool CanRemoteEnterVehicle;
}

class VehicleEntityData : ControllableEntityData {
	Vec3 CriticallyDamagedEffectPosition;
	Vec3 FLIRKeyColor;
	Vec3 PreExplosionEffectPosition;
	Vec3 InteractionOffset;
	float DisabledDamageThreshold;
	string ControllableType;
	float PreDestructionDamageThreshold;
	VehicleHealthZoneData RearHealthZone;
	VehicleHealthZoneData LeftHealthZone;
	VehicleHealthZoneData RightHealthZone;
	float MinSpeedForMineActivation;
	VehicleHealthZoneData FrontHealthZone;
	float UpsideDownDamage;
	float WaterDamageOffset;
	float ArmorMultiplier;
	float RegenerationDelayMultiplier;
	float RegenerationRateMultiplier;
	float EmergencyRepairHealth;
	float DecayDelay;
	float DecayRate;
	float BelowWaterDamageDelay;
	EffectBlueprint CriticallyDamagedEffect;
	float RegenerationRate;
	float CriticalDamageTime;
	EffectBlueprint PreExplosionEffect;
	float RegenerationDelay;
	float PreExplosionTime;
	ExplosionEntityData Explosion;
	CompositeMeshAsset Mesh;
	ObjectBlueprint CockpitMesh;
	float VelocityDamageMagnifier;
	float ExitSpeedThreshold;
	VehicleHudData HudData;
	string NameSid;
	int32 MaxPlayersInVehicle;
	float NametagHeightScale;
	VehicleSoundData Sound;
	float UpsideDownDamageDelay;
	float UpsideDownAngle;
	float WaterDamage;
	float LockingTimeMultiplier;
	float NametagHeightOffset;
	float HighAltitudeLockHeight;
	float VelocityDamageThreshold;
	EntityVoiceOverInfo VoiceOverInfo;
	float ExitCameraSwitchDelay;
	float KillSoldierCollisionSpeedThreshold;
	float ExitDirectionSpeedThreshold;
	AngleOfImpactData AngleOfImpact;
	VehicleLockableInfoData VehicleLockableInfo;
	float FLIRValue;
	MPModeData MPMode;
	bool IgnoreSoldierCollisionNormal;
	bool ShowPlayerHealth;
	bool ForegroundRenderCockpitMesh;
	bool RenderVehicleMesh;
	bool IsAffectedByEMP;
	bool ThrowOutSoldierInsideOnWaterDamage;
	bool UseAsTeamSpawner;
	bool IsLockable;
	bool ChoseExitPointByDirection;
	bool HealthZonesShareDamage;
	bool NeverReportVehicleAsEmpty;
	bool ExitAllowed;
	bool UseLowAltitudeHeatSignature;
	bool AllowVehicleOutsideCombatAreas;
	bool EnableGroundmapLighting;
	bool MotionBlurMask;
	bool UseProtectedShields;
	bool UseDriverEyePosForNametagPos;
	bool EquipmentFakeVehicle;
	bool ExplosionPacksAttachable;
}

struct VehicleEntryListenerBinding {
	AntRef InVehicle;
	AntRef InOpenEntry;
	AntRef VehicleEntryFire;
	AntRef VehicleEntryYaw;
	AntRef VehicleEntryPitch;
	AntRef VehicleEntryRoll;
	AntRef VehicleEntryRotation;
	AntRef VehicleEntryForceX;
	AntRef VehicleEntryForceY;
	AntRef VehicleEntryForceZ;
	AntRef VehicleEntryIndex;
	AntRef VehicleEntryIndexUpdated;
	AntRef VehicleOpenEntryIndex;
	AntRef InVehicleRetrigger;
	AntRef VehicleEntryChooserIndex;
}

class VehicleEntryListenerComponentData : ComponentData {
	VehicleEntryListenerBinding VehicleEntryListener;
	VehicleCameraControlBinding VehicleCameraControl;
	int32 AnimationEntitySpacePriority;
	float AnimationWheelTransformDelay;
}

class VehicleExitPointComponentData : ComponentData {
	Vec3 Impulse;
	float TerrainHeight;
	int32 Ordinal;
	float Velocity;
	bool InheritCameraDirection;
	bool CheckForVehicleOverrun;
}

struct VehicleHealthZoneData {
	float MaxHealth;
	float MaxShieldHealth;
	float DamageAngleMultiplier;
	float MinDamageAngle;
	bool UseDamageAngleCalculation;
}

struct VehicleHudData {
	Vec3 CustomizationOffset;
	VehicleCustomizationAsset Customization;
	UIHudIcon MinimapIcon;
	TextureAsset Texture;
	uint32 VehicleItemHash;
}

enum VehicleHudType {
	VehicleHudType_Car = 0,
	VehicleHudType_Tank = 1,
	VehicleHudType_Boat = 2,
	VehicleHudType_Helicopter = 3,
	VehicleHudType_Stationary = 4,
	VehicleHudType_Strategic = 5,
	VehicleHudType_Dummy = 6,
	VehicleHudType_Count = 7
}

struct VehicleInputData {
	float ThrottleDeadzone;
	float BrakeDeadzone;
	float YawDeadzone;
	float PitchDeadzone;
	float RollDeadzone;
	float ThrottleInertiaOutDuration;
	float ThrottleInertiaInDuration;
	float ThrottleInertiaMinRatio;
	float BrakeInertiaOutDuration;
	float BrakeInertiaInDuration;
	float BrakeInertiaMinRatio;
	float YawInertiaOutDuration;
	float YawInertiaInDuration;
	float YawInertiaMinRatio;
	float PitchInertiaOutDuration;
	float PitchInertiaInDuration;
	float PitchInertiaMinRatio;
	float RollInertiaOutDuration;
	float RollInertiaInDuration;
	float RollInertiaMinRatio;
}

class VehicleInputTweakData : DataContainer {
	VehicleInputTweakType InputTweakType;
	float MinSpeed;
	float MaxSpeed;
	float MinSpeedScale;
	float MaxSpeedScale;
}

enum VehicleInputTweakType {
	CombinedTimedSpeedTweakType = 0,
	CombinedSpeedTweakType = 1,
	SpeedTweakType = 2,
	ScaledSpeedTweakType = 3
}

struct VehicleLockableInfoData {
	float HeatSignature;
	float RadarSignature;
	float LowAltitudeHeight;
	float LowAltitudeHeatSignature;
}

enum VehicleMode {
	VmIdle = 0,
	VmEntering = 1,
	VmEntered = 2,
	VmStarting = 3,
	VmStarted = 4,
	VmStopping = 5,
	VmLeaving = 6
}

struct VehicleParachuteBinding {
	AntRef Enabled;
	AntRef VehicleType;
}

class VehicleParachuteComponentData : ComponentData {
	VehicleParachuteBinding Binding;
	float UndeployTime;
	float TimeInvisibleAfterSpawn;
	int32 VehicleType;
	bool DropParachuteOnUndeploy;
}

class VehicleParachuteData : DataContainer {
	float TerminalVelocity;
	float FreefallGravityMultiplier;
	float DragCoefficient;
	float MaxRollVelocity;
	float MaxPitchVelocity;
	float MaxYawVelocity;
	float DeployTime;
	float UndeployGroundHeight;
	float AngularDescentDamping;
	float AngularDeployDamping;
	float DeployPhysicsStart;
	float DeployInitialDragStart;
	float InitialDragStartVelocityScale;
	float InitialDragAngularVelocityPitch;
	float InitialDragRandomAngularVelocityRollMax;
	float RampLength;
}

class VehicleProjectileEntityData : ProjectileEntityData {
	VehicleBlueprint Vehicle;
	float EnterDelay;
	float NoVehicleCollisionTime;
	float AlignWithGroundRayLength;
	bool AutoEnter;
	bool AlignWithGround;
	bool CheckGroundWhenSpawned;
	bool DeployInsideNeutralCombatAreaOnly;
}

class VehicleSoundData : DataContainer {
	SoundAsset BulletImpact;
}

class VehicleSpawnReferenceObjectData : SpawnReferenceObjectData {
	LinearTransform AirDropCarrierTransform;
	float TimeUntilAbandoned;
	float TimeUntilAbandonedIsDestroyed;
	EntryEnterRestriction EnterRestriction;
	float BotBailWhenHealthBelow;
	float BotBailOutDelay;
	float WreckDuration;
	float RespawnRange;
	int32 ActiveStanceEntryIndex;
	int32 ActiveStance;
	float KeepAliveRadius;
	float VehicleIsNearDistance;
	bool SetTeamOnSpawn;
	bool ApplyDamageToAbandonedVehicles;
	bool EnableAvailableSeatOutput;
	bool DisregardSpawnAllowedSetting;
	bool AffectedByImpulse;
}

class VehicleSpawnStateEntityData : EntityData {
	Vec3 InitialVelocity;
	float StartupDelayModifier;
	float InitialThrottle;
	uint32 EngineIndex;
	float InitialRpmModifier;
	float HeightOffset;
	float Radius;
}

class VehicleState : MetricState {
	string VehicleName;
}

class VehicleStateTriggerEntityData : TriggerEntityData {
	float LockAmount;
	uint32 BulletCount;
	uint32 HealthToSet;
	uint32 SeatSpecificIndexForHuman;
	uint32 SeatSpecificIndexForAi;
	float DestructionRadius;
	uint32 HealthToCheck;
	bool AllowHumanToEnterAllSeats;
	bool AllowAiToEnterAllSeats;
	bool BanAiFromSpecificSeat;
	bool TriggerCriticalOnHealthSet;
	bool CheckHealthGreaterOrEqual;
	bool RestrictHumanToSpecificSeat;
	bool ShouldDestroyVehicles;
	bool ShouldDestroyBangers;
}

enum VehicleStateType {
	VehicleStateType_Normal = 0,
	VehicleStateType_LowHealth = 1,
	VehicleStateType_CriticalState = 2,
	VehicleStateType_LAST_ITEM = 3
}

struct VehicleTrackerRenderTargetData {
	Vec2 PositionOffset;
	int32 RenderTargetIndex;
	float RenderTargetApectRatio;
	float ScaleSize;
	bool UseRenderTarget;
}

class VehicleVisualCustomizationAsset : Asset {
	ShaderTextureUnlockPartCollection[] TextureUnlockPartCollections;
	TextUnlockPartData[] TextUnlockParts;
}

class VehicleWaterEffectData : DataContainer {
	Vec3 Position;
	EffectBlueprint Effect;
}

class VehicleWaypointData : WaypointData {
	float Speed;
	float SpeedOverrideMovingTowards;
	float Angleoffset;
	float StopHereRadius;
	float StoppingDeceleration;
	float MinSlowdownSpeed;
	bool StopHere;
}

class VeniceCombatAreaCamera : DataContainer {
}

class VeniceExplosionEntityData : ExplosionEntityData {
	float UnspottableTime;
	bool UnspotsOnExplode;
	bool SpotsOnExplode;
	bool IsCausingSuppression;
}

class VeniceFPSCameraData : FPSCameraData {
	float SuppressionBlurAmountMultiplier;
	float SuppressionBlurSizeMultiplier;
}

class VeniceGameplayLevelDescriptionComponent : LevelDescriptionComponent {
	bool AllowParachuteFromMobileSpawnpoint;
}

class VeniceHudConfigAsset : DataContainer {
	SoundWaveAsset AmmoPickupSound;
	SoundWaveAsset WeaponPickupSound;
	SoundWaveAsset NewObjectiveSound;
	SoundWaveAsset ObjectiveCompletedSound;
	SoundWaveAsset ObjectiveUpdatedSound;
	SoundWaveAsset MPVictorySoundMec;
	SoundWaveAsset MPVictorySoundUs;
	SoundWaveAsset MPVictorySoundRu;
	SoundWaveAsset MPDefeatSoundMec;
	SoundWaveAsset MPDefeatSoundUs;
	SoundWaveAsset MPDefeatSoundRu;
	SoundWaveAsset ArtilleryAiming;
	SoundWaveAsset ArtilleryAimingOOA;
	SoundWaveAsset MortarStrikeLocking;
	SoundWaveAsset LaserDesignatorLocked;
	SoundWaveAsset LaserDesignatorLocking;
	UINametag[] Nametags;
	SpawnScreenWeaponData[] SpawnScreenWeapons;
	float MaxOrderIconDistance;
	float InnerNametagRadius;
	float OuterNametagRadius;
	float CriticalHealthThreshold;
	UITaggedVehicleCrosshair TaggedVehicleCrosshair;
	UIMinimapConfig Minimap;
	bool ShowSpawnPointsOnMinimap;
	bool NametagHealthVisibleForAll;
}

class VeniceMapMarkerHudData : DataContainer {
	UIHudIcon Icon;
}

class VeniceMatchmakingLevelDescriptionComponent : LevelDescriptionComponent {
	string Mod;
	string[] Licenses;
}

class VeniceMissionObjectiveHudData : MissionObjectiveHudData {
}

enum VeniceNetworkUnlockGainedType {
	VeniceNetworkUnlockGainedType_Bucket = 0,
	VeniceNetworkUnlockGainedType_Rank = 1,
	VeniceNetworkUnlockGainedType_Weapon = 2,
	VeniceNetworkUnlockGainedType_Award = 3
}

class VeniceOnlineConfiguration : OnlineConfiguration {
	OnlinePlatformConfiguration[] Platforms;
	EntitlementQuery[] EntitlementQueries;
	bool UseFallback;
}

class VeniceOnlineSettings : SystemSettings {
	uint32 WebFeedMaxFetchAttempts;
	OnlinePlatformConfiguration[] Platforms;
	string ServiceNameOverride;
	string ClientGameConfigurationOverride;
	int32 BlazeLogLevel;
	int32 DirtySockLogLevel;
	string BattlelogReportURL;
	EntitlementQuery[] EntitlementQueries;
	string WebFeedUrlPrefix;
	float SnowrollerOrphanTimeout;
	int32 QueueCapacityOverride;
	string WebFeedCountUrlPrefix;
	uint32 MatchFeedMaxFetchAttempts;
	DTagUploadPolicy DogTagUploadPolicy;
	uint32 WebFeedUnreadCountFetchPeriod;
	string MatchImagesUrlPrefix;
	uint32 WebFeedMaxItems;
	uint32 WebFeedMinimumMillisecondsBetweenRequests;
	uint32 WebFeedMillisecondsBetweenNewRequestAttempt;
	uint32 MatchFeedMinimumMillisecondsBetweenRequests;
	uint32 MatchFeedMinimumMillisecondsBetweenMatchRequests;
	uint32 PingPeriod;
	uint32 MatchFeedMinimumMillisecondsBetweenNewRequestAttempt;
	string MatchFeedDetailsUrlPrefix;
	string MatchFeedListUrlPrefix;
	uint32 MatchFeedMinimumMillisecondsBetweenMatchReloads;
	bool EnableSnowroller;
	bool EnableQoS;
	bool PunkBusterActivateClient;
	bool PunkBusterActivateServer;
	bool BattlelogReport;
	bool UseFallback;
}

class VeniceRichPresenceLevelDescriptionComponent : LevelDescriptionComponent {
	RichPresencePresenceString PresenceMode;
	RichPresenceContextSetting[] ContextValues;
}

class VeniceSoldierCustomizationAsset : SoldierCustomizationAsset {
}

class VeniceSoldierHealthModuleData : SoldierHealthModuleData {
	float TimeForCorpse;
	float PostReviveResponseTime;
	float InteractiveManDownThreshold;
	PoseConstraintsData InteractiveManDownPoseConstraints;
	float ManDownStateTime;
	float ManDownStateHealthPoints;
	float ImmortalTimeAfterSpawn;
	EntryInputActionEnum[] AbortSpawnImmortalityInputs;
	float PostReviveHealth;
	float CriticalFakeImmortalTime;
	float RegenerationDelay;
	float RegenerationRate;
	SoldierHealthModuleBinding Binding;
	float SprintDisabledWhenDamagedTime;
	float SprintDisabledDamageThreshold;
	RotateToHitData ManDownRotate;
	bool InteractiveManDown;
}

class VeniceSoldierWeaponCustomizationAsset : SoldierWeaponCustomizationAsset {
}

class VeniceUICombatAreaAsset : UICombatAreaAsset {
	UIDistanceFieldAsset DistanceField;
	UIDistanceFieldAsset SurroundingDistanceField;
}

class VeniceUIConfiguration : Asset {
	string MetaDataAssetPath;
}

class VeniceUISettings : SystemSettings {
	string MetaDataAssetPath;
	bool GetStatsInOnlineFlow;
}

class VeniceUnlockUserData : UnlockUserDataBase {
	bool CheckSquad;
}

class VeniceVehicleCustomizationAsset : VehicleCustomizationAsset {
	VehicleCategory Category;
	string NameSid;
}

class VersionData : Asset {
	string disclaimer;
	int32 Version;
	string DateTime;
	string BranchId;
	string GameName;
}

enum VertexElementClassification {
	VertexElementClassification_PerVertex = 0,
	VertexElementClassification_PerInstance = 1,
	VertexElementClassification_Index = 2
}

enum VertexElementFormat {
	VertexElementFormat_None = 0,
	VertexElementFormat_Float = 1,
	VertexElementFormat_Float2 = 2,
	VertexElementFormat_Float3 = 3,
	VertexElementFormat_Float4 = 4,
	VertexElementFormat_Half = 5,
	VertexElementFormat_Half2 = 6,
	VertexElementFormat_Half3 = 7,
	VertexElementFormat_Half4 = 8,
	VertexElementFormat_Byte4 = 10,
	VertexElementFormat_Byte4N = 11,
	VertexElementFormat_UByte4 = 12,
	VertexElementFormat_UByte4N = 13,
	VertexElementFormat_Short = 14,
	VertexElementFormat_Short2 = 15,
	VertexElementFormat_Short3 = 16,
	VertexElementFormat_Short4 = 17,
	VertexElementFormat_ShortN = 18,
	VertexElementFormat_Short2N = 19,
	VertexElementFormat_Short3N = 20,
	VertexElementFormat_Short4N = 21,
	VertexElementFormat_UShort2 = 22,
	VertexElementFormat_UShort4 = 23,
	VertexElementFormat_UShort2N = 24,
	VertexElementFormat_UShort4N = 25,
	VertexElementFormat_Int = 26,
	VertexElementFormat_Int2 = 27,
	VertexElementFormat_Int4 = 28,
	VertexElementFormat_IntN = 29,
	VertexElementFormat_Int2N = 30,
	VertexElementFormat_Int4N = 31,
	VertexElementFormat_UInt = 32,
	VertexElementFormat_UInt2 = 33,
	VertexElementFormat_UInt4 = 34,
	VertexElementFormat_UIntN = 35,
	VertexElementFormat_UInt2N = 36,
	VertexElementFormat_UInt4N = 37,
	VertexElementFormat_Comp3_10_10_10 = 38,
	VertexElementFormat_Comp3N_10_10_10 = 39,
	VertexElementFormat_UComp3_10_10_10 = 40,
	VertexElementFormat_UComp3N_10_10_10 = 41,
	VertexElementFormat_Comp3_11_11_10 = 42,
	VertexElementFormat_Comp3N_11_11_10 = 43,
	VertexElementFormat_UComp3_11_11_10 = 44,
	VertexElementFormat_UComp3N_11_11_10 = 45,
	VertexElementFormat_Comp4_10_10_10_2 = 46,
	VertexElementFormat_Comp4N_10_10_10_2 = 47,
	VertexElementFormat_UComp4_10_10_10_2 = 48,
	VertexElementFormat_UComp4N_10_10_10_2 = 49,
	VertexElementFormat_UByteN = 50,
	VertexElementFormat_Int3 = 51,
	VertexElementFormat_UInt3 = 52
}

enum VertexElementUsage {
	VertexElementUsage_Unknown = 0,
	VertexElementUsage_Pos = 1,
	VertexElementUsage_BoneIndices = 2,
	VertexElementUsage_BoneIndices2 = 3,
	VertexElementUsage_BoneWeights = 4,
	VertexElementUsage_BoneWeights2 = 5,
	VertexElementUsage_Normal = 6,
	VertexElementUsage_Tangent = 7,
	VertexElementUsage_Binormal = 8,
	VertexElementUsage_BinormalSign = 9,
	VertexElementUsage_WorldTrans1 = 10,
	VertexElementUsage_WorldTrans2 = 11,
	VertexElementUsage_WorldTrans3 = 12,
	VertexElementUsage_InstanceId = 13,
	VertexElementUsage_InstanceUserData0 = 14,
	VertexElementUsage_InstanceUserData1 = 15,
	VertexElementUsage_XenonIndex = 16,
	VertexElementUsage_XenonBarycentric = 17,
	VertexElementUsage_XenonQuadID = 18,
	VertexElementUsage_Index = 19,
	VertexElementUsage_ViewIndex = 20,
	VertexElementUsage_Color0 = 30,
	VertexElementUsage_Color1 = 31,
	VertexElementUsage_TexCoord0 = 33,
	VertexElementUsage_TexCoord1 = 34,
	VertexElementUsage_TexCoord2 = 35,
	VertexElementUsage_TexCoord3 = 36,
	VertexElementUsage_TexCoord4 = 37,
	VertexElementUsage_TexCoord5 = 38,
	VertexElementUsage_TexCoord6 = 39,
	VertexElementUsage_TexCoord7 = 40,
	VertexElementUsage_RadiosityTexCoord = 41,
	VertexElementUsage_VisInfo = 42,
	VertexElementUsage_SpriteSize = 43,
	VertexElementUsage_PackedTexCoord0 = 44,
	VertexElementUsage_PackedTexCoord1 = 45,
	VertexElementUsage_PackedTexCoord2 = 46,
	VertexElementUsage_PackedTexCoord3 = 47,
	VertexElementUsage_ClipDistance0 = 48,
	VertexElementUsage_ClipDistance1 = 49,
	VertexElementUsage_SubMaterialIndex = 50,
	VertexElementUsage_BranchInfo = 60,
	VertexElementUsage_PosAndScale = 61,
	VertexElementUsage_Rotation = 62,
	VertexElementUsage_SpriteSizeAndUv = 63,
	VertexElementUsage_FadePos = 90,
	VertexElementUsage_SpawnTime = 91,
	VertexElementUsage_PosAndSoftMul = 150,
	VertexElementUsage_Alpha = 151,
	VertexElementUsage_Misc0 = 152,
	VertexElementUsage_Misc1 = 153,
	VertexElementUsage_LeftAndRotation = 154,
	VertexElementUsage_UpAndNormalBlend = 155,
	VertexElementUsage_SH_R = 156,
	VertexElementUsage_SH_G = 157,
	VertexElementUsage_SH_B = 158,
	VertexElementUsage_PosAndRejectCulling = 159,
	VertexElementUsage_Shadow = 160,
	VertexElementUsage_PatchUv = 180,
	VertexElementUsage_Height = 181,
	VertexElementUsage_MaskUVs0 = 182,
	VertexElementUsage_MaskUVs1 = 183,
	VertexElementUsage_MaskUVs2 = 184,
	VertexElementUsage_MaskUVs3 = 185,
	VertexElementUsage_UserMasks = 186,
	VertexElementUsage_HeightfieldUv = 187,
	VertexElementUsage_MaskUv = 188,
	VertexElementUsage_GlobalColorUv = 189,
	VertexElementUsage_HeightfieldPixelSizeAndAspect = 190,
	VertexElementUsage_WorldPositionXz = 191,
	VertexElementUsage_TerrainTextureNodeUv = 192,
	VertexElementUsage_ParentTerrainTextureNodeUv = 193,
	VertexElementUsage_Uv01 = 210,
	VertexElementUsage_WorldPos = 211,
	VertexElementUsage_EyeVector = 212,
	VertexElementUsage_LightParams1 = 220,
	VertexElementUsage_LightParams2 = 221,
	VertexElementUsage_LightSubParams = 222,
	VertexElementUsage_LightSideVector = 223,
	VertexElementUsage_LightInnerAndOuterAngle = 224,
	VertexElementUsage_LightDir = 225,
	VertexElementUsage_LightMatrix1 = 226,
	VertexElementUsage_LightMatrix2 = 227,
	VertexElementUsage_LightMatrix3 = 228,
	VertexElementUsage_LightMatrix4 = 229,
	VertexElementUsage_Custom = 230
}

enum VertexNormalSpace {
	VnsObject = 0,
	VnsInstance = 1,
	VnsWorld = 2
}

class ViewFxData : DataContainer {
	PoissonRadialBlurData PoissonRadialBlur;
	ColorTintData ColorTint;
	float BlurAdd;
	bool ColorTintEnable;
	bool PoissonRadialBlurEnable;
}

class VignetteComponentData : ComponentData {
	Vec2 Scale;
	Vec3 Color;
	Realm Realm;
	float Exponent;
	float Opacity;
	bool Enable;
}

enum VirtualGameState {
	VirtualGameState_Inactive = 0,
	VirtualGameState_Active = 1,
	VirtualGameState_Expired = 2,
	VirtualGameState_Recreate = 3,
	VirtualGameState_Updated = 4
}

class VirtualRasterQuadtreeData : RasterQuadtreeData {
}

struct VisionBoxSettings {
	float DecreaseXz;
	float LowerTop;
	float RaiseBottom;
	float RaiseBottomHuman;
}

class VisualEnvironmentBlueprint : ObjectBlueprint {
}

class VisualEnvironmentEffectEntityData : EffectEntityData {
	Vec4 LifetimeCurve;
	Vec4 CullDistanceCurve;
	Vec4 CullAngleCurve;
	float Lifetime;
	VisualEnvironmentBlueprint VisualEnvironment;
	bool SampleOnStartOnly;
}

class VisualEnvironmentEntityData : GameEntityData {
	float Visibility;
	int32 Priority;
}

class VisualEnvironmentReferenceObjectData : ReferenceObjectData {
	int32 Priority;
	bool OverrideVisibility;
}

class VisualEnvironmentSettings : DataContainer {
	float SunRotationX;
	float SunRotationY;
	bool DrawStats;
}

class VisualTerrainEntityData : EntityData {
	TerrainData Terrain;
	VisualTerrainSettings Settings;
}

class VisualTerrainSettings : DataContainer {
	Vec2 DebugOverlayBrushCoverageMin;
	TerrainRenderMode RenderMode;
	uint32 MeshScatteringInstanceCullJobCount;
	float PatchErrorFov;
	float TriangleSizeMin;
	float LodScale;
	float LodCenterExtrapolationDistanceMax;
	float LodCenterExtrapolationTime;
	float MeshScatteringDensityScaleFactor;
	float DxTessellatedTriWidth;
	float DxTessellationPatchShrink;
	uint32 DxTessellationPatchFacesPerSide;
	float ZPassDistance;
	float DebugOverlayGridSize;
	uint32 TextureAtlasSampleCountXFactor;
	uint32 TextureAtlasSampleCountYFactor;
	float TextureSamplesPerMeterMax;
	float TextureDetailFalloffFactor;
	float TextureDetailFalloffDistance;
	float TextureDetailFalloffCurve;
	float TextureInvisibleDetailReductionFactor;
	float TextureOccludedDetailReductionFactor;
	uint32 TextureRenderJobCount;
	float MeshScatteringDistanceScaleFactor;
	float DebugOverlayIsolineSpacing;
	uint32 TextureRenderJobsLaunchedPerFrameCountMax;
	uint32 TextureTileSamplesPerSide;
	uint32 TextureTileBorderWidth;
	int32 TextureLevelOffset;
	uint32 TextureClodFrameCount;
	float MeshScatteringDensityMarginFactor;
	float TextureClodCutoffPriority;
	float MeshScatteringWindSpeed;
	uint32 TextureCompressJobCount;
	uint32 MeshScatteringInstancesPerCellMax;
	int32 TextureCompressionQuality;
	float TextureDetailSlopeBoost;
	float TextureGenerationMipBias;
	float DebugOverlayBrushSize;
	uint32 MeshScatteringBuildChannelCount;
	uint32 MeshScatteringTreeNodePoolCapacity;
	float MeshScatteringInvisibleCellFovFactor;
	uint32 MeshScatteringInstanceCullListCount;
	float MeshScatteringPregenerationDistanceRatio;
	uint32 TessellationFacesPerSideMin;
	uint32 MaxNonVisibleTextureUpdateCount;
	uint32 TextureQuadsPerTileLevel;
	float WaterDepthMetersPerSample;
	float DynamicMaskDecalWidthScale;
	int32 DrawQuadtreeZoomIndex;
	uint32 MeshScatteringClodFrameCount;
	uint32 MeshScatteringBuildChannelsLaunchedPerFrameCountMax;
	uint32 SlotReuseWaitCount;
	uint32 MeshScatteringCellPoolCapacity;
	uint32 MeshScatteringCullRecordCount;
	uint32 PatchSlotCount;
	uint32 BuildJobCount;
	uint32 OccluderLodBoostLevelCount;
	float DecalZPassDrawDistance;
	float DecalOffsetY;
	float Decal3dFarDrawDistanceScaleFactor;
	float OccludedMinDistance;
	uint32 PatchFacesPerSide;
	bool DrawOnlyDecalZPassEnable;
	bool DrawDecal3dEnable;
	bool DrawTextureTileBoxesEnable;
	bool DrawEnable;
	bool DrawPatchBoxesEnable;
	bool DrawDebugTextEnable;
	bool DrawWaterEnable;
	bool PrioritizationSpuJobEnable;
	bool DrawDecalZPassEnable;
	bool DrawQuadtreesEnable;
	bool TextureVtIndirectionJobEnable;
	bool VertexBufferHeightsEnable;
	bool DrawDebugTexturesEnable;
	bool ForceDecalReducedQuality;
	bool DebugOverlayIsolinesEnable;
	bool TextureClodEnable;
	bool DebugOverlayWireframeEnable;
	bool DebugOverlaySketchTextureEnable;
	bool DrawDecal2dEnable;
	bool DetailOverlayEnable;
	bool DecalEnable;
	bool DrawPatchesEnable;
	bool DrawQuadtreeStatsEnable;
	bool DestroyAll;
	bool DrawQuadtreeAtlasTexturesEnable;
	bool SlotDebugOutputEnable;
	bool UpdateJobsEnable;
	bool PrioritizationOcclusionEnable;
	bool CullSpuJobEnable;
	bool PrepareBuildSpuJobEnable;
	bool BuildSpuJobEnable;
	bool RegenerateTexturesEnable;
	bool DynamicMaskEnable;
	bool GpuTextureCompressionEnable;
	bool TextureBlockOnStreamingEnable;
	bool PatchErrorFovEnable;
	bool DxDisplacementMappingEnable;
	bool TextureKeepPoolFullEnable;
	bool PatchLodTransitionsEnable;
	bool PatchMaterialSortingEnable;
	bool CullSampleBoundingBoxHeightEnable;
	bool CastShadowsEnable;
	bool GlobalColormapEnable;
	bool OccluderEnable;
	bool OccluderJobEnable;
	bool OccluderSpuJobEnable;
	bool TextureLayerCullingEnable;
	bool OccludedEnable;
	bool DrawTextureDebugDepthComplexity;
	bool MeshScatteringEnable;
	bool MeshScatteringJobsEnable;
	bool MeshScatteringCastShadowsEnable;
	bool DrawMeshScatteringEnable;
	bool DrawMeshScatteringCellBoxesEnable;
	bool DrawMeshScatteringNodeBoxesEnable;
	bool DrawMeshScatteringCulledCellBoxesEnable;
	bool DrawMeshScatteringDebugMaskScaleTexturesEnable;
	bool DrawMeshScatteringStatsEnable;
	bool DrawMeshScatteringQuadtreeEnable;
	bool TextureDrawTerrainLayersEnable;
	bool TextureForceUpdateEnable;
	bool TextureCompressFastAlgorithmEnable;
	bool MeshScatteringForceUpdateEnable;
	bool TextureCompressSpuJobsEnable;
	bool DrawTextureDebugColors;
	bool ForceGraphicsDriverCrash;
	bool MeshScatteringBuildVisibleFirst;
	bool ForcePatchRebuildEnable;
	bool DebugOverlayBrushEnable;
	bool WireframeEnable;
	bool TextureVtIndirectionSpuJobEnable;
	bool DrawVertexYTextureEnable;
	bool MeshScatteringInstanceCountLodEnable;
	bool MeshScatteringCullSpuJobEnable;
	bool MeshScatteringInstanceCullSpuJobEnable;
	bool MeshScatteringPrioritizationSpuJobEnable;
	bool MeshScatteringSpuJobEnable;
	bool Enable;
	bool EditServiceEnable;
	bool MeshScatteringInstanceCullEnable;
	bool ZeroViewportEnable;
	bool DebugOverlayGridEnable;
	bool MeshScatteringInstanceCullBoxTestEnable;
	bool MeshScatteringInstanceFrustumCullEnable;
	bool MeshScatteringInstanceOcclusionCullEnable;
	bool MeshScatteringInstanceAdditionalCullEnable;
	bool DrawMeshScatteringInstanceBoxesEnable;
	bool MeshScatteringInstanceCullDynamicAllocEnable;
	bool Ps3MeshScatteringInstanceCellMemoryEnable;
}

class VisualVectorShapeData : VectorShapeData {
	float ErrorTolerance;
	SurfaceShaderBaseAsset Shader3d;
	uint32 DrawOrderIndex;
	float TessellationTriangleSize;
}

enum VoiceChannel {
	VoiceChannel_Off = 0,
	VoiceChannel_Team = 1,
	VoiceChannel_Squad = 2,
	VoiceChannel_Loopback = 3,
	VoiceChannel_Count = 4
}

enum VoiceOverArithmeticExpressionType {
	VoiceOverArithmeticExpressionType_Addition = 0,
	VoiceOverArithmeticExpressionType_Subtraction = 1,
	VoiceOverArithmeticExpressionType_Multiplication = 2,
	VoiceOverArithmeticExpressionType_Division = 3,
	VoiceOverArithmeticExpressionType_Difference = 4
}

class VoiceOverArithmeticNode : VoiceOverExpressionNode {
	VoiceOverValueConnection A;
	VoiceOverValueConnection B;
	VoiceOverValue Result;
	VoiceOverArithmeticExpressionType Operation;
}

class VoiceOverCharacterAsset : Asset {
}

enum VoiceOverCompareExpressionType {
	VoiceOverCompareExpressionType_Equals = 0,
	VoiceOverCompareExpressionType_Differs = 1,
	VoiceOverCompareExpressionType_Greater = 2,
	VoiceOverCompareExpressionType_Less = 3,
	VoiceOverCompareExpressionType_GreaterOrEquals = 4,
	VoiceOverCompareExpressionType_LessOrEquals = 5
}

class VoiceOverCompareNode : VoiceOverExpressionNode {
	VoiceOverValueConnection A;
	VoiceOverValueConnection B;
	VoiceOverValue False;
	VoiceOverValue True;
	VoiceOverCompareExpressionType Operation;
}

class VoiceOverConstantBooleanValue : VoiceOverConstantValue {
	bool Value;
}

class VoiceOverConstantFloatValue : VoiceOverConstantValue {
	float Value;
}

class VoiceOverConstantGlobalValue : VoiceOverConstantValue {
	VoiceOverGlobalConstantValue Source;
}

class VoiceOverConstantIntegerValue : VoiceOverConstantValue {
	int32 Value;
}

class VoiceOverConstantNode : VoiceOverExpressionNode {
	VoiceOverValue Value;
	VoiceOverConstantValue Source;
}

class VoiceOverConstantValue : DataContainer {
}

class VoiceOverConstantVectorValue : VoiceOverConstantValue {
	Vec4 Value;
}

enum VoiceOverContainerConditionMode {
	VoiceOverContainerConditionMode_All = 0,
	VoiceOverContainerConditionMode_Any = 1
}

class VoiceOverContainerNode : VoiceOverStructureNode {
	VoiceOverValueConnection[] Condition;
	VoiceOverIntervalNode Interval;
	VoiceOverStructureNode[] TrueRelationship;
	VoiceOverStructureNode[] FalseRelationship;
	VoiceOverContainerConditionMode ConditionMode;
	float Probability;
}

class VoiceOverConversationGroupEntityData : EntityData {
	VoiceOverConversationQueueGroup QueueGroup;
}

enum VoiceOverConversationInterruptMode {
	VoiceOverConversationInterruptMode_Disallow = 0,
	VoiceOverConversationInterruptMode_Allow = 1,
	VoiceOverConversationInterruptMode_AllowSame = 2
}

class VoiceOverConversationNode : VoiceOverStructureNode {
	VoiceOverDialogGroup[] Groups;
	VoiceOverValueConnection[] Condition;
	VoiceOverIntervalNode Interval;
	VoiceOverStructureNode[] FinishedRelationship;
	VoiceOverStructureNode[] BlockedRelationship;
	VoiceOverContainerConditionMode ConditionMode;
	float Probability;
	VoiceOverPronunciation Pronunciation;
	VoiceOverConversationInterruptMode InterruptMode;
	int32 Priority;
	VoiceOverConversationQueueMode QueueMode;
	float Relevancy;
	int8 TrackCount;
	int8 LastSequenceIndex;
}

class VoiceOverConversationQueueGroup : DataContainer {
	string Name;
	VoiceOverConversationQueueGroupPolyphony PolyphonyMode;
	uint32 Polyphony;
}

enum VoiceOverConversationQueueGroupPolyphony {
	VoiceOverConversationQueueGroupPolyphony_Sources = 0,
	VoiceOverConversationQueueGroupPolyphony_Conversations = 1
}

enum VoiceOverConversationQueueMode {
	VoiceOverConversationQueueMode_Always = 0,
	VoiceOverConversationQueueMode_Never = 1,
	VoiceOverConversationQueueMode_SamePriority = 2
}

class VoiceOverDialogClip : DataContainer {
	float Offset;
	VoiceOverDialogTake[] Takes;
	VoiceOverDialogClip[] OffsetReferences;
	VoiceOverDialogClipEvents Events;
	int8 SequenceIndex;
}

class VoiceOverDialogClipEvents : DataContainer {
	uint32 StartedNameHash;
	uint32 FinishedNameHash;
}

class VoiceOverDialogGroup : DataContainer {
	SoundAsset Sound;
	VoiceOverDialogTrack[] Tracks;
}

struct VoiceOverDialogTake {
	SoundWaveAsset Wave;
}

enum VoiceOverDialogTakeBehavior {
	VoiceOverDialogTakeBehavior_Start = 0,
	VoiceOverDialogTakeBehavior_Clip = 1,
	VoiceOverDialogTakeBehavior_Continuous = 2
}

struct VoiceOverDialogTakeMapping {
	float TakeControlMin;
	float TakeControlMax;
	int8 TakeIndex;
}

class VoiceOverDialogTrack : DataContainer {
	VoiceOverValueConnection Source;
	VoiceOverValueConnection TakeControl;
	VoiceOverDialogTakeMapping[] TakeIndexMapping;
	VoiceOverDialogTakeBehavior TakeSwitching;
	VoiceOverDialogClip[] Clips;
	AudioGraphNodeData SamplerNode;
	AudioGraphNodeData Output;
	VoiceOverConversationQueueGroup QueueGroup;
	int8 ParentTrackIndex;
	bool TakeSwitchingOnResume;
}

class VoiceOverDistanceNode : VoiceOverExpressionNode {
	VoiceOverValueConnection A;
	VoiceOverValueConnection B;
	VoiceOverValueConnection Threshold;
	VoiceOverValue Distance;
	VoiceOverValue False;
	VoiceOverValue True;
	VoiceOverCompareExpressionType Operation;
}

class VoiceOverEvent : DataContainer {
	string Name;
	VoiceOverNamedValue[] Parameters;
	VoiceOverLogicAsset Owner;
}

class VoiceOverEventEntityData : EntityData {
	VoiceOverNamedValue EventPlayer;
	VoiceOverEvent VoEvent;
	float FinishedDelay;
	VoiceOverNamedValue ExtraEventPlayer;
	float TriggerDelay;
	bool RunOnce;
}

class VoiceOverEventNode : VoiceOverStructureNode {
	VoiceOverIntervalNode Interval;
	VoiceOverStructureNode[] Relationship;
	VoiceOverValueRedirect[] Redirects;
	VoiceOverEvent Event;
}

class VoiceOverExpressionNode : VoiceOverNode {
}

class VoiceOverGlobalConstantValue : DataContainer {
	string Name;
	VoiceOverConstantValue Source;
}

class VoiceOverGlobalNode : VoiceOverExpressionNode {
	VoiceOverValue Value;
	VoiceOverNamedValue Field;
	VoiceOverObject Object;
}

class VoiceOverGroup : DataContainer {
	string Name;
	int32 Priority;
}

class VoiceOverInfoNode : VoiceOverExpressionNode {
	VoiceOverValueConnection Object;
	VoiceOverValue Value;
	VoiceOverNamedValue Field;
	VoiceOverObject ExpectedType;
}

class VoiceOverInterval : DataContainer {
	string Name;
}

class VoiceOverIntervalNode : VoiceOverExpressionNode {
	VoiceOverValueConnection Threshold;
	VoiceOverValue Time;
	VoiceOverValue False;
	VoiceOverValue True;
	VoiceOverInterval Interval;
}

class VoiceOverLabel : DataContainer {
	string Name;
}

enum VoiceOverLabelCompareMode {
	VoiceOverLabelCompareMode_Any = 0,
	VoiceOverLabelCompareMode_All = 1,
	VoiceOverLabelCompareMode_One = 2
}

class VoiceOverLabelNode : VoiceOverExpressionNode {
	VoiceOverLabelSource[] Sources;
	VoiceOverValue False;
	VoiceOverValue True;
	VoiceOverLabel[] WantedLabels;
	VoiceOverLabel[] UnwantedLabels;
	VoiceOverLabelSourceMode SourceMode;
	VoiceOverLabelCompareMode WantedCompareMode;
	VoiceOverLabelCompareMode UnwantedCompareMode;
}

class VoiceOverLabelSource : DataContainer {
	VoiceOverValueConnection Source;
}

enum VoiceOverLabelSourceMode {
	VoiceOverLabelSourceMode_Combined = 0,
	VoiceOverLabelSourceMode_Shared = 1
}

class VoiceOverLanguageRoot : DataContainer {
	AudioLanguage Language;
	string Path;
}

class VoiceOverLogicAsset : Asset {
	VoiceOverEvent[] Events;
	VoiceOverGroup[] Groups;
	VoiceOverLogicFlow[] Flows;
	VoiceOverSystemAsset System;
}

class VoiceOverLogicFlow : DataContainer {
	string Name;
	VoiceOverGroup Group;
	VoiceOverValue[] Locals;
	VoiceOverEventNode[] Roots;
}

enum VoiceOverLogicFlowMode {
	VoiceOverLogicFlowMode_All = 0,
	VoiceOverLogicFlowMode_One = 1
}

class VoiceOverManuscriptAsset : Asset {
	AudioLanguage MasterLanguage;
	VoiceOverLanguageRoot[] Languages;
	VoiceOverWaveNameTranslation NameTranslation;
	string SheetName;
	string StringIdColumn;
	string FileNameColumn;
	string PathColumn;
	string WaveAssetStatusColumn;
	string CharacterColumn;
	string VoiceColumn;
	string StringIdPrefix;
	VoiceOverManuscriptLanguageColumns[] LanguageColumns;
	int32 FirstContentRow;
	string OutputPath;
	StreamPoolAsset StreamPool;
	bool KeepPath;
	bool StringIdUpperCase;
	bool AllowDelete;
}

struct VoiceOverManuscriptLanguageColumns {
	AudioLanguage Language;
	string TextColumn;
	string SubtitleOffsetColumn;
}

class VoiceOverNamedValue : VoiceOverValue {
	string Name;
}

class VoiceOverNode : DataContainer {
}

class VoiceOverObject : VoiceOverNamedValue {
	VoiceOverNamedValue[] Properties;
}

class VoiceOverProbabilityNode : VoiceOverExpressionNode {
	VoiceOverValue False;
	VoiceOverValue True;
	float Probability;
}

class VoiceOverPronunciation : DataContainer {
	string Name;
	AudioLanguage PrimaryLanguage;
	AudioLanguage SecondaryLanguage;
	VoiceOverPronunciationFallback SecondaryFallback;
}

enum VoiceOverPronunciationFallback {
	VoiceOverPronunciationFallback_None = 0,
	VoiceOverPronunciationFallback_Master = 1
}

class VoiceOverRelationshipInput : DataContainer {
}

class VoiceOverStructureConnection : DataContainer {
	VoiceOverStructureNode TargetNode;
	VoiceOverRelationshipInput TargetInput;
}

class VoiceOverStructureNode : VoiceOverNode {
	VoiceOverLogicFlowMode FlowMode;
}

class VoiceOverSystemAsset : Asset {
	VoiceOverInterval[] Intervals;
	VoiceOverLabel[] Labels;
	VoiceOverObject[] Types;
	VoiceOverObject[] Objects;
	VoiceOverGlobalConstantValue[] Constants;
	AudioLanguage MasterLanguage;
	VoiceOverPronunciation DefaultPronunciation;
	VoiceOverPronunciation[] Pronunciations;
	VoiceOverConversationQueueGroup[] QueueGroups;
	VoiceOverConversationQueueGroup DefaultPositionedQueueGroup;
	VoiceOverConversationQueueGroup DefaultUnpositionedQueueGroup;
}

class VoiceOverTriggerNode : VoiceOverStructureNode {
	VoiceOverTriggerParameter[] Parameters;
	float Delay;
	VoiceOverEvent Event;
}

class VoiceOverTriggerParameter : DataContainer {
	VoiceOverValueConnection Source;
	VoiceOverNamedValue EventParameter;
}

class VoiceOverValue : DataContainer {
	VoiceOverValueType ValueType;
}

class VoiceOverValueConnection : DataContainer {
	VoiceOverExpressionNode TargetNode;
	VoiceOverValue TargetValue;
}

class VoiceOverValueRedirect : DataContainer {
	VoiceOverValue Source;
	VoiceOverValue Target;
}

enum VoiceOverValueType {
	VoiceOverValueType_Boolean = 0,
	VoiceOverValueType_Integer = 1,
	VoiceOverValueType_Float = 2,
	VoiceOverValueType_Vector = 3,
	VoiceOverValueType_Object = 4,
	VoiceOverValueTypeCount = 5
}

class VoiceOverVariableNode : VoiceOverExpressionNode {
	VoiceOverValue Value;
	VoiceOverNamedValue Source;
}

enum VoiceOverWaveNameTranslation {
	VoiceOverWaveNameTranslation_FullName = 0,
	VoiceOverWaveNameTranslation_PathOnly = 1,
	VoiceOverWaveNameTranslation_NameOnly = 2
}

class VolumeVectorShapeData : VectorShapeData {
	float Height;
}

enum VotingType {
	VotingMap = 0,
	VotingGameMode = 1,
	VotingFriendlyFire = 2
}

enum WarningPlayerType {
	WPTInflictor = 0,
	WPTVictim = 1
}

class WarningSystemComponentData : ComponentData {
	SoundAsset AimWarnSoundEffect;
	SoundAsset MissileWarnSoundEffect;
	SoundAsset LowHealthWarnSoundEffect;
	SoundAsset LockingWarnSoundEffect;
	SoundAsset LockedWarnSoundEffect;
	WarningPlayerType PlayerType;
}

enum WarnTarget {
	wtWarnSoldierAndVehicle = 0,
	wtWarnSoldier = 1,
	wtWarnVehicle = 2,
	wtWarnNone = 3
}

struct WarpAnimationBinding {
	AntRef ConnectJointGroup;
	AntRef ConnectJointWeight;
	AntRef EnableAlign;
	AntRef DisableCulling;
	AntRef TranslationYWarpTolerance;
}

class WarpAnimationComponentData : ComponentData {
	LinearTransform ConnectTransform;
	CannedAnimationBinding CannedAnimBinding;
	int32 AnimationEntitySpacePriority;
	WarpAnimationBinding WarpBinding;
	GameplayBones BoneToAlign;
	bool RequireAnimationWeight;
	bool ForceAnimationTransform;
	bool ExternalConnectTransform;
}

class WarpAnimationEntityData : EntityData {
	LinearTransform ConnectTransform;
	int32 AnimationEntitySpacePriority;
	WarpAnimationBinding WarpBinding;
	GameplayBones BoneToAlign;
	bool ForceAnimationTransform;
	bool RequireAnimationWeight;
	bool ExternalConnectTransform;
}

class WaterAsset : Asset {
}

class WaterData : Asset {
}

class WaterEntityData : GamePhysicsEntityData {
	WaterAsset Asset;
}

enum WaveCodec {
	WaveCodec_EaLayer3 = 0,
	WaveCodec_EaXma = 1,
	WaveCodec_Xas = 2,
	WaveCodec_EaSpeex = 3,
	WaveCodec_Pcm = 4,
	WaveCodec_Count = 5
}

enum WavePriority {
	WpNone = 0,
	WpLow = 1,
	WpNormal = 2,
	WpHigh = 3,
	WpPermanent = 4
}

class WaveSwitcherNodeData : AudioGraphNodeData {
	AudioGraphNodePort Index;
	AudioGraphNodePort Advance;
	AudioGraphNodePort Wave;
	AudioGraphNodePort IndexChanged;
	SoundWaveAsset[] Waves;
	float DefaultIndex;
	bool IsRandom;
	bool RandomStartIndex;
}

class WaypointComponentData : ComponentData {
	bool Looping;
}

class WaypointData : DataContainer {
	int32 SchematicsNameHash;
	uint16 WaypointId;
	bool UseClientsPosition;
}

class WaypointsShapeData : VectorShapeData {
	WaypointData[] Waypoints;
}

enum WaypointsSnappingSettings {
	UseShapeSettings = 0,
	SnapToTerrain = 1,
	NoSnap = 2
}

class WaypointTriggerEntityData : EntityData {
	Realm Realm;
}

enum WaypointVaultType {
	WaypointVaultType_VaultOverHigh = 0,
	WaypointVaultType_VaultOntoLow = 1,
	WaypointVaultType_VaultDownLow = 2,
	WaypointVaultType_VaultDownHigh = 3,
	WaypointVaultType_ClimbUpHigh = 4,
	WaypointVaultType_ClimbOverHigh = 5,
	WaypointVaultType_JumpAcross = 6,
	WaypointVaultType_Count = 7
}

class WeaponAimingSimulationModifier : WeaponModifierBase {
	SoldierAimingSimulationData AimingController;
}

class WeaponAnimatedFireTypeModifier : WeaponModifierBase {
	AnimatedFireEnum AnimatedFireType;
}

class WeaponAnimationConfigurationModifier : WeaponModifierBase {
	float[] ZoomInOutMeshTransitionFactors;
	AnimationConfigurationData AnimationConfiguration;
	AnimatedFireEnum AnimatedFireType;
}

enum WeaponAnimBaseSetEnum {
	wabsRif = 0,
	wabsPstl = 1,
	wabsHgr = 2,
	wabsAT = 3,
	wabsShg = 4,
	wabsLMG = 5,
	wabsBag = 6,
	wabsSnp = 7,
	wabsCount = 8,
	wabsNone = 9
}

enum WeaponAnimType {
	WeaponAnimType_NoAddon = 0,
	WeaponAnimType_Bipod = 1,
	WeaponAnimType_Foregrip = 2,
	WeaponAnimType_40mm_GL = 3,
	WeaponAnimType_40mm_GL_Fire = 4,
	WeaponAnimType_Underslung_Shotgun = 5,
	WeaponAnimType_Underslung_Shotgun_Fire = 6,
	WeaponAnimType_Straight_Pull_Bolt = 7,
	WeaponAnimType_Extended_Mag = 8
}

class WeaponAnimTypeModifier : WeaponModifierBase {
	WeaponAnimType WeaponAnimType;
}

enum WeaponClassEnum {
	wc12gauge = 0,
	wc338Magnum = 1,
	wc357Magnum = 2,
	wc44Magnum = 3,
	wc45cal = 4,
	wc46x30mm = 5,
	wc50cal = 6,
	wc545x45mmWP = 7,
	wc556x45mmNATO = 8,
	wc57x28mm = 9,
	wc58x42mm = 10,
	wc762x39mmWP = 11,
	wc762x51mmNATO = 12,
	wc762x54mmR = 13,
	wc9x19mm = 14,
	wc9x39mm = 15,
	wcAssault = 16,
	wcShotgun = 17,
	wcSmg = 18,
	wcLmg = 19,
	wcSniper = 20,
	wcUgl = 21,
	wcHgr = 22,
	wcAt = 23,
	wcATMine = 24,
	wcC4 = 25,
	wcAutoInjector = 26,
	wcKnife = 27,
	wcLaserDesignator = 28,
	wcLaserPainter = 29,
	wcMedKit = 30,
	wcMortarStrike = 31,
	wcPowerTool = 32,
	wcTracerDart = 33,
	wcRadioBeacon = 34,
	wcEodBot = 35,
	wcReconMav = 36,
	wcUGS = 37,
	wcCount = 38,
	wcNone = 39
}

enum WeaponClassification {
	WCNone = 0,
	WCPrimary = 1,
	WCSecondary = 2
}

class WeaponClassModifier : WeaponModifierBase {
	WeaponClassEnum WeaponClass;
}

class WeaponComponentData : PartComponentData {
	Vec3 ProjectileSpawnOffset;
	float ImpulseStrength;
	MeshAsset WeaponMesh;
	WeaponFiringData WeaponFiring;
	string DamageGiverName;
	GameAIWeaponData AIData;
	WeaponData CustomWeaponType;
	WeaponClassification Classification;
	float ExplosionDamageMultiplier;
	float ReloadTimeMultiplier;
	float DamageMultiplier;
	uint32 WeaponItemHash;
	float OverheatDropPerSecondMultiplier;
	float LockTimeMultiplier;
	float LockingAcceptanceAngleMultiplier;
	bool SequentialFiring;
}

class WeaponData : ToolData {
	bool ShowLaserPaintedVehicles;
}

class WeaponDeployTimeModifier : WeaponModifierBase {
	float DeployTime;
	float DisableZoomOnDeployTime;
	float AltDeployTime;
	int32 AltDeployId;
}

class WeaponEntityData : GameEntityData {
	WeaponStateData[] WeaponStates;
	WeaponClassEnum WeaponClass;
	GameAIWeaponData AIData;
	WeaponFiringData WeaponFiring;
	WeaponData CustomWeaponType;
}

class WeaponFiringData : GameDataContainer {
	FiringFunctionData PrimaryFire;
	float DeployTime;
	float ReactivateCooldownTime;
	float DisableZoomOnDeployTime;
	float AltDeployTime;
	int32 AltDeployId;
	WeaponSwayData WeaponSway;
	float SupportDelayProne;
	float SupportDelayStand;
	RumbleFiringData Rumble;
	bool InflictSelfDamage;
	bool UseAutoAiming;
	bool ShowEnemyNametagOnAim;
	bool ReloadWholeMags;
	bool DisableReloadWhileSprinting;
	bool AbortReloadOnSprint;
}

class WeaponFiringDataAsset : GameDataContainerAsset {
}

class WeaponFiringDataModifier : WeaponModifierBase {
	WeaponFiringData WeaponFiring;
}

class WeaponFiringEffectsModifier : WeaponModifierBase {
	FireEffectData[] FireEffects1p;
	FireEffectData[] FireEffects3p;
}

enum WeaponFiringEvent {
	WeaponFiringEvent_Push = 0,
	WeaponFiringEvent_Pop = 1,
	WeaponFiringEvent_PrimaryStartedFiringCallback = 2,
	WeaponFiringEvent_PrimaryFireCallback = 3,
	WeaponFiringEvent_PrimaryFireReleaseCallback = 4,
	WeaponFiringEvent_PrimaryFireShotSpawnedCallback = 5,
	WeaponFiringEvent_PrimaryFireAutomaticBeginCallback = 6,
	WeaponFiringEvent_PrimaryFireAutomaticEndCallback = 7,
	WeaponFiringEvent_PrimaryStoppedFiringCallback = 8,
	WeaponFiringEvent_ReloadPrimaryCallback = 9,
	WeaponFiringEvent_ReloadPrimaryEndCallback = 10,
	WeaponFiringEvent_BoltActionCallback = 11,
	WeaponFiringEvent_BoltActionEndCallback = 12,
	WeaponFiringEvent_DetonationSwitchCallback = 13,
	WeaponFiringEvent_HoldAndReleaseReleaseCallback = 14,
	WeaponFiringEvent_UpdateRequired = 15
}

class WeaponInputRouterComponentData : ComponentData {
	float MaxFireRate;
	uint32 RotationCount;
}

struct WeaponLagBinding {
	AntRef EntityPitch;
	AntRef EntityYaw;
	AntRef PitchResult;
	AntRef YawResult;
	AntRef RollResult;
}

struct WeaponLagEffectForceData {
	Vec3 OffsetForce;
	Vec3 RotationForce;
}

struct WeaponLagEffectSpringData {
	float Constant;
	float Damping;
}

struct WeaponLagEffectSpringVector {
	WeaponLagEffectSpringData SpringX;
	WeaponLagEffectSpringData SpringY;
	WeaponLagEffectSpringData SpringZ;
}

class WeaponLagEntityData : EntityData {
	WeaponLagBinding Binding;
}

class WeaponLagSpringEffectData : DataContainer {
	WeaponLagEffectSpringVector OffsetSprings;
	WeaponLagEffectSpringVector RotationSprings;
	WeaponLagEffectForceData JumpForces;
	WeaponLagEffectForceData LandForces;
	WeaponLagEffectForceData PoseUpForces;
	WeaponLagEffectForceData PoseDownForces;
	float ZoomForceModifier;
}

class WeaponMagazineModifier : WeaponModifierBase {
	int32 MagazineCapacity;
	int32 NumberOfMagazines;
}

class WeaponMiscModifier : WeaponModifierBase {
	bool EnableBreathControl;
	bool CanBeInSupportedShooting;
	bool UnZoomOnBoltAction;
	bool HoldBoltActionUntilZoomRelease;
	bool IsSilenced;
}

struct WeaponMiscModifierSettings {
	bool EnableBreathControl;
	bool CanBeInSupportedShooting;
	bool UnZoomOnBoltAction;
	bool HoldBoltActionUntilZoomRelease;
	bool IsSilenced;
}

struct WeaponModifier {
	int32 DummyToMakeFrostEDcompile;
}

class WeaponModifierBase : DataContainer {
}

struct WeaponModifierData {
	UnlockAssetBase UnlockAsset;
	WeaponModifierBase[] Modifiers;
}

class WeaponOffsetData : DataContainer {
	float WeaponOffsetX;
	float WeaponOffsetY;
	float WeaponOffsetZ;
	float WeaponZoomedOffsetX;
	float WeaponZoomedOffsetY;
	float WeaponZoomedOffsetZ;
}

class WeaponOverrideData : DataContainer {
	DataContainer Data;
	WeaponOverrideValue[] Values;
}

struct WeaponOverrideValue {
	WeaponOverrideValueType ValueType;
	float Value;
}

enum WeaponOverrideValueType {
	OverrideValue_BulletEntity_DistributeDamageOverTime = 0,
	OverrideValue_BulletEntity_StartDamage = 1,
	OverrideValue_BulletEntity_EndDamage = 2,
	OverrideValue_BulletEntity_DamageFalloffStartDistance = 3,
	OverrideValue_BulletEntity_DamageFalloffEndDistance = 4
}

struct WeaponPickupData {
	SoldierWeaponBlueprint Weapon;
	uint32 WeaponSlot;
	int32 AltWeaponSlot;
	int32 LinkedToWeaponSlot;
	uint32 MinAmmo;
	uint32 MaxAmmo;
}

class WeaponPickupEntityData : PickupEntityData {
	WeaponPickupData[] Weapons;
	bool UseForPersistence;
}

class WeaponProjectileModifier : WeaponModifierBase {
	ProjectileEntityData ProjectileData;
}

class WeaponRegularSocketObjectData : WeaponSocketObjectData {
	LinearTransform Transform;
	LinearTransform[] Mesh3pTransforms;
}

class WeaponShotModifier : WeaponModifierBase {
	Vec3 InitialSpeed;
	int32 NumberOfBulletsPerShell;
}

class WeaponSkinnedSocketObjectData : WeaponSocketObjectData {
}

enum WeaponSlot {
	WeaponSlot_0 = 0,
	WeaponSlot_1 = 1,
	WeaponSlot_2 = 2,
	WeaponSlot_3 = 3,
	WeaponSlot_4 = 4,
	WeaponSlot_5 = 5,
	WeaponSlot_6 = 6,
	WeaponSlot_7 = 7,
	WeaponSlot_8 = 8,
	WeaponSlot_9 = 9,
	WeaponSlot_NumSlots = 10,
	WeaponSlot_NotDefined = 11
}

class WeaponSocketObjectData : SocketObjectDataBase {
	uint32[] ReferencedAssetHashes;
	Asset Asset1p;
	Asset Asset1pzoom;
	Asset Asset3p;
}

class WeaponSoundModifier : WeaponModifierBase {
	SoundAsset Sound;
}

class WeaponSpeedData : DataContainer {
	float ZoomOutSpeed;
	float ZoomInSpeed;
	float UnDeploySpeed;
	float DeploySpeed;
}

struct WeaponStateData {
	uint32[] ReferencedAssetHashes;
	BoneFakePhysicsData[] BoneFakePhysics;
	SkinnedMeshAsset Mesh1p;
	SkinnedMeshAsset MeshZoom1p;
	SkinnedMeshAsset Mesh3p;
	AntRef Weapon;
	float ZoomMeshTransitionFactor;
	float ZoomScaleFactor;
	float[] ZoomInOutMeshTransitionFactors;
	ScopeFilterData ZoomedScopeFilter;
	ScopeFilterData NonZoomedScopeFilter;
	float KeepAimingTime;
	AnimationConfigurationData AnimationConfiguration;
	AnimatedFireEnum AnimatedFireType;
	AnimatedAimingEnum AnimatedAimingType;
	LinearTransform[] Mesh3pTransforms;
	RigidMeshSocketTransform[] Mesh3pRigidMeshSocketObjectTransforms;
	float HideProjectileAfterFireTime;
	string ProjectileBoneName;
	bool IsOneHanded;
	bool PlayDeployAfterFire;
	bool SkipFireAnimation;
	bool SkipDeployAnimation;
	bool SkipReloadAnimation;
	bool AlwaysAimHead;
}

class WeaponStateEntityData : EntityData {
	Realm Realm;
	int32 WeaponSlot;
}

class WeaponSuppressionData : DataContainer {
	float MaxMultiplier;
	float MinMultiplier;
	float MinDistance;
	float MaxDistance;
}

class WeaponSwayData : DataContainer {
}

enum WeaponSwitchingEnum {
	wsSlot0 = 0,
	wsSlot1 = 1,
	wsSlot2 = 2,
	wsSlot3 = 3,
	wsSlot4 = 4,
	wsSlot5 = 5,
	wsSlot6 = 6,
	wsSlot7 = 7,
	wsMeleeWeapon = 7,
	wsSlot8 = 8,
	wsSlot9 = 9,
	wsMaxSlots = 10,
	wsLastPrimary = 11,
	wsOtherPrimary = 12,
	wsNotUsed = 13
}

struct WeaponSwitchingMapData {
	WeaponSwitchingEnum FromWeapon;
	EntryInputActionEnum Action;
	WeaponSwitchingEnum[] ToWeapon;
	bool FireAndSwitchBackToPrev;
}

struct WeaponUnlockPickupData {
	UnlockWeaponAndSlot UnlockWeaponAndSlot;
	int32 AltWeaponSlot;
	int32 LinkedToWeaponSlot;
	uint32 MinAmmo;
	uint32 MaxAmmo;
	bool DefaultToFullAmmo;
}

class WeaponUnlockPickupEntityData : PickupEntityData {
	WeaponUnlockPickupData[] Weapons;
	bool UseForPersistence;
	bool RandomlySelectOneWeapon;
}

enum WeaponUnlocks {
	WeaponUnlocks_MaxAmount = 7
}

class WeaponZoomModifier : WeaponModifierBase {
	float ZoomRenderFov;
}

class WebPresenceBackendData : PresenceBackendData {
}

class WheelComponentData : PartComponentData {
	WheelConfigData Config;
	WheelPhysicsType PhysicsType;
	float EffectClampVelocity;
}

class WheelConfigData : DataContainer {
	Vec3 Offset;
	Vec3 Inertia;
	RotationBodyData RotationBody;
	SphereCollisionData SphereCollision;
	SpringData Spring;
	float Mass;
	float Radius;
	float Width;
	float RollingResistanceInternalBaseFactor;
	float RollingResistanceBaseFactor;
	float RollingResistanceVelocityFactor;
	float EngineBrakeVelocityFactor;
	float EngineBrakeMinFactor;
	float EngineBrakeMaxFactor;
	Vec2[] TransmissionLoss;
	float DiffGearRatio;
	float LowSpeedSteeringSensitivity;
	float MidSpeedSteeringSensitivity;
	float HighSpeedSteeringSensitivity;
	float SensitivityRangeScale;
	float LowSpeedSteeringSensitivityLimit;
	float MidSpeedSteeringSensitivityLimit;
	float HighSpeedSteeringSensitivityLimit;
	float TrackedTurnSpeedLimit;
	float TrackedForwardSpeedLimit;
	Curve2D SteerInertia;
	SensitivityAtVelocity[] SteeringSensitivity;
	float SlopeGripMinAngle;
	float SlopeGripMaxAngle;
	int32 SlopeGripExponent;
	float OffGroundGravityModifier;
	float SideSlipAngleMaxSlipCondition;
	float AngularVelocityMinSlipCondition;
	float WheelVelocityXMinSlipCondition;
	float WheelSlipRatioMaxSlipCondition;
	float LongitudinalFrictionForceMaxFactor;
	float LateralFrictionForceMaxFactor;
	FrictionScaleAtVelocity[] LongitudeFrictionScale;
	FrictionScaleAtVelocity[] LattitudeFrictionScale;
	float WheelFrictionLattitudeBrakeScale;
	float MaxSlipRatio;
	float Resistance;
	float FxTorqueRadiusMultiplier;
	float FrictionMomentVelocityMin;
	float FrictionMomentVelocityMax;
	float FrictionMomentMultiplier;
	float FrictionMomentMaxFactor;
	float BrakeFactor;
	float BrakeForce;
	float HandBrakeFactor;
	float HandBrakeForce;
	float LateralPosK;
	float LateralNegK;
	float LongitudinalPosK;
	float LongitudinalNegK;
	float AlignMomScale;
	float WheelBaseLateral;
	float WheelBaseLongitudinal;
	int32 DrivingType;
	int32 SteeringType;
	int32 FrictionMethod;
	int32 AckermanDeviceType;
	float CollisionYawDampeningDuration;
	float CollisionYawDampening;
	float ConstantSpringForceFrictionScale;
	int32 RotationDirectionIndex;
	int32 SteeringAngleIndex;
	int32 PacejkaConfigIndex;
	int32 EngineIndex;
	MaterialContainerPair CollisionMaterialPair;
	bool AlwaysGrip;
	bool UseRollingResistanceBaseFactor;
	bool UseEngineBrake;
	bool IsAllowedToSpin;
	bool HasSteeringInverted;
	bool UseFrictionMoment;
	bool UseLowSpeedAutoBrake;
	bool AdjustWheelRotation;
	bool UseRollingResistanceVelocityFactor;
}

enum WheelPhysicsType {
	wptNormal = 0,
	wptFollow = 1,
	wptStatic = 2
}

struct WidgetEventQueryPair {
	string Name;
	UIWidgetEventID Query;
	string InstanceName;
	bool IsOutput;
}

enum WidgetHorisontalAlignment {
	WHA_Left = 0,
	WHA_Center = 1,
	WHA_Right = 2
}

class WidgetNode : UINodeData {
	UIWidgetAsset WidgetAsset;
	int32 FocusIndex;
	int32 ZDepthLevel;
	WidgetVerticalAlignment VerticalAlign;
	WidgetHorisontalAlignment HorisontalAlign;
	UIDataBinding DataBinding;
	UIWidgetProperty[] WidgetProperties;
	string InstanceName;
	UINodePort[] Inputs;
	UINodePort[] Outputs;
	bool AlwaysInFocus;
}

enum WidgetVerticalAlignment {
	WVA_Top = 0,
	WVA_Center = 1,
	WVA_Bottom = 2
}

class WindComponentData : ComponentData {
	Realm Realm;
	float WindDirection;
	float WindStrength;
}

class WindowSettings : SystemSettings {
	int32 PosX;
	int32 PosY;
	uint32 Width;
	uint32 Height;
	bool BordersEnable;
	bool AutoSize;
	bool FullscreenAutoSize;
	bool FullscreenWhenJoiningServer;
	bool EnableEscape;
	bool EnableInputOnActivate;
	bool HibernateOnClose;
	bool Hidden;
	bool Minimized;
}

class WingComponentData : PartComponentData {
	WingPhysicsData Config;
}

class WingPhysicsData : DataContainer {
	float Lift;
	float FlapLift;
	Curve2D LiftCoefficient;
	float Drag;
	float FlapDrag;
	Curve2D DragCoefficient;
	float AngularVelocityLiftModifier;
	float DragRotationModifier;
	float BaseAngleOfAttack;
	int32 InputForFlap;
	float FlapTurnSpeed;
	float VisualFlapTurnSpeed;
	float VisualFlapAngleLimit;
	Curve2D MaxFlapAngleScaleFactor;
	float LandingFlapLift;
	LandingFlapData LandingFlapLogic;
}

class WorldData : SubWorldData {
	MaterialGridData RuntimeMaterialGrid;
}

class WorldObjectListData : DataContainer {
}

class WorldPartData : SpatialPrefabBlueprint {
	guid HackToSolveRealTimeTweakingIssue;
	bool UseDeferredEntityCreation;
	bool Enabled;
}

class WorldPartInclusion : SubWorldInclusion {
}

class WorldPartInclusionCriterion : SubWorldInclusionCriterion {
}

class WorldPartInclusionSetting : SubWorldInclusionSetting {
}

class WorldPartInclusionSettings : SubWorldInclusionSettings {
}

class WorldPartReferenceObjectData : ReferenceObjectData {
}

class WorldRenderSettings : DataContainer {
	Vec3 DynamicEnvmapDefaultPosition;
	Vec3 SubSurfaceColor;
	float ViewportScale;
	float ShadowMinScreenArea;
	float ShadowViewportScale;
	uint32 FxaaQuality;
	float CullScreenAreaScale;
	float PlanarReflectionCullFOV;
	uint32 GenericEntityMaxVisibleEntityCount;
	float ShadowmapSizeZScale;
	uint32 ShadowmapResolution;
	uint32 ShadowmapQuality;
	float ShadowmapPoissonFilterScale;
	uint32 ShadowmapSliceCount;
	float ShadowmapSliceSchemeWeight;
	float ShadowmapFirstSliceScale;
	float ShadowmapViewDistance;
	uint32 PlanarReflectionWidth;
	float ShadowmapExtrusionLength;
	float ShadowmapMinScreenArea;
	float TempPlanarReflectionY;
	float SubSurfaceRolloffKeyLight;
	int32 FxaaForceVendor;
	uint32 PlanarReflectionHeight;
	float LightIntensityScale;
	float LightLodSpecularFadeAreaEnd;
	float ShadowmapMinFov;
	float LightLodSpecularFadeAreaStart;
	float LightLodRadiusFactor;
	float LightForceIntensity;
	float LightLodFadeArea;
	float LightLodMinArea;
	int32 DrawDebugDynamicEnvmapMipLevel;
	uint32 MaxDecalVolumeCount;
	float MotionBlurScale;
	float MotionBlurMax;
	float MotionBlurNoiseScale;
	uint32 MotionBlurQuality;
	uint32 MaxSpotLightShadowCount;
	MipmapFilterMode DynamicEnvmapFilterMode;
	uint32 MotionBlurMaxSampleCount;
	uint32 MotionBlurFrameAverageCount;
	float MotionBlurMaxFrameTime;
	float ForceMotionBlurDepthCutoff;
	float ForceMotionBlurCutoffGradientScale;
	uint32 MultisampleCount;
	float MultisampleThreshold;
	uint32 MaxPointLightCount;
	uint32 ReflectionEnvmapSize;
	float SpotLightNearPlane;
	float SpotLightShadowmapPoissonFilterScale;
	int32 OnlyShadowmapSlice;
	WorldViewMode ViewMode;
	uint32 SpotLightShadowmapResolution;
	QualityLevel SpotLightShadomapLevel;
	uint32 SpotLightShadowmapQuality;
	int32 OnlyLightTileY;
	int32 OnlyLightTileX;
	float XenonHdrColorScale;
	float XenonHdrColorScaleFactor;
	uint32 Ps3LightTileJobMaxFbTileCount;
	int32 OnlyLightTileIndex;
	uint32 Ps3LightTileJobCount;
	uint32 Ps3LightTileJobPriority;
	uint32 XenonLightTileMaxLineLightCount;
	uint32 XenonLightTileMaxSpotLightCount;
	uint32 XenonLightTileConstantBufferSize;
	uint32 XenonLightTileMaxPointLightCount;
	uint32 MaxDestructionVolumeCount;
	float DynamicEnvmapFilterWidth;
	float LightTileMinArea;
	uint32 DynamicEnvmapResolution;
	ShaderGBufferLayout GBufferLayout;
	int32 DrawDebugSkyEnvmapMipLevel;
	float DecalVolumeScale;
	uint32 LightOverdrawMaxLayerCount;
	float LightRadiusScale;
	float LightAttenuationThreshold;
	uint32 Ps3LightTileMethod;
	float Ps3LightTileJobYieldGranularity;
	uint32 OutdoorLightTileBatchCount;
	uint32 XenonDrawDebugLightTileGridMode;
	float LightStencilMinArea;
	uint32 MaxSpotLightCount;
	MipmapFilterMode SkyEnvmapFilterMode;
	float SkyEnvmapFilterWidth;
	uint32 GBufferTestCount;
	uint32 SkyEnvmapResolution;
	uint32 SkyEnvmapSidesPerFrameCount;
	float SubSurfaceRolloffLocalLight;
	int32 OnlyTileIndex;
	bool OccluderMeshZPrepassEnable;
	bool OccluderMeshZPrepassDebugEnable;
	bool WireframeEnable;
	bool HalfResEnable;
	bool HalfResLensFlaresEnable;
	bool ZPassEnable;
	bool ForegroundEnable;
	bool TiledHalfResCompositeEnable;
	bool ForegroundZPassEnable;
	bool DrawDebugVelocityBuffer;
	bool ForegroundDepthClearEnable;
	bool ForegroundAsMainEnable;
	bool CustomEnvmapEnable;
	bool SkyEnvmapEnable;
	bool DrawDebugVisibleEntityTypes;
	bool DrawDebugHalfResEnvironment;
	bool DrawSolidBoundingBoxes;
	bool BilateralHalfResCompositeEnable;
	bool ForegroundTransparentEnable;
	bool TiledHalfResStencilOccludersEnable;
	bool SkyEnvmapUpdateEnable;
	bool SkyEnvmapForceUpdateEnable;
	bool SkyEnvmapUse8BitTexture;
	bool DynamicEnvmapEnable;
	bool ScreenEffectEnable;
	bool DrawDebugZBufferEnable;
	bool MotionBlurStencilPassEnable;
	bool FinalPostEnable;
	bool DrawDebugQuarterShadowmaps;
	bool DrawDebugSkyEnvmap;
	bool DxShadowmap16BitEnable;
	bool DrawDebugTransShadowmap;
	bool DrawDebugSpotLightShadowmaps;
	bool DrawShadowFrustums;
	bool DrawDebugShadowmaps;
	bool SkyEnable;
	bool DrawBoundingSpheres;
	bool DrawFrustums;
	bool StaticEnvmapEnable;
	bool SkyFogEnable;
	bool DrawLineBoundingBoxes;
	bool DrawDebugDestructionVolumes;
	bool LensFlaresEnable;
	bool DrawDebugLensFlareOccluders;
	bool DrawDebugLensFlares;
	bool LensFlareOcclusionEnable;
	bool DrawDebugWorldOcclusions;
	bool CloudShadowEnable;
	bool OverrideDynamicAO;
	bool DrawDebugDynamicAO;
	bool EmissiveEnable;
	bool UnlitEnable;
	bool SkyEnvmapMipmapGenEnable;
	bool DrawLightSources;
	bool GBufferClearEnable;
	bool DxGBufferLight16BitEnable;
	bool DxGBufferNormal16BitEnable;
	bool GBufferAlphaTestSimpleEnable;
	bool SpecularLightingEnable;
	bool SkinLightingEnable;
	bool TranslucencyLightingEnable;
	bool DynamicEnvmapLightingEnable;
	bool OutdoorLightEnable;
	bool PointLightsEnable;
	bool LineLightsEnable;
	bool ConeLightsEnable;
	bool SpotLightsEnable;
	bool LightProbesEnable;
	bool LightStencilMethodEnable;
	bool LightVolumeMethodEnable;
	bool LightVolumeDepthTestEnable;
	bool OutputGammaCorrectionEnable;
	bool DrawDebugMultisampleClassify;
	bool OutdoorKeyLightEnable;
	bool OutdoorSkyLightEnable;
	bool OutdoorLightSpecularEnable;
	bool OutdoorLightTilingEnable;
	bool OutdoorLightTileRenderEnable;
	bool OutdoorLightTileBlendEnable;
	bool OutdoorLightTileSimpleShaderEnable;
	bool Ps3TiledHalfTargetEnable;
	bool XenonOutdoorLightTilingEnable;
	bool XenonPointLightsTilingEnable;
	bool XenonSpotLightsTilingEnable;
	bool XenonLineLightsTilingEnable;
	bool XenonAsyncLightJobsEnable;
	bool XenonLightTileDownsampleSpecularCheckEnable;
	bool XenonLightTileCpuPointLightCullingEnable;
	bool Ps3TiledSSAOTargetsEnable;
	bool Ps3SCullEnable;
	bool Ps3ColorCompressionEnable;
	bool Enable;
	bool Ps3TilingEnable;
	bool Ps3DepthBoundsLightCullingEnable;
	bool Ps3ZCullEnable;
	bool ConsoleRenderTargetPoolSharingEnable;
	bool XenonFloatDepthBufferEnable;
	bool Ps3LightTileJobYieldEnable;
	bool Ps3HdrClearEnable;
	bool XenonFastHdrEnable;
	bool ShadowmapViewDistanceScaleEnable;
	bool Ps3RenderTargetPoolGBufferOffsetEnable;
	bool HdrEnable;
	bool SpotLightShadowmapEnable;
	bool SimpleShadowmapsEnable;
	bool DrawTransparent;
	bool DrawTransparentDecal;
	bool ShadowmapFixedDepthEnable;
	bool DrawDebugDynamicEnvmap;
	bool MotionBlurGeometryPassEnable;
	bool DxLinearDepth32BitFormatEnable;
	bool DynamicEnvmapMipmapGenEnable;
	bool MotionBlurEnable;
	bool ColoredShadowmapSlicesEnable;
	bool DxDeferredCsPathEnable;
	bool DrawDebugGBuffer;
	bool DrawDebugLightSources;
	bool DrawDebugLightShadowSources;
	bool DrawDebugLightStats;
	bool DrawDebugLightTiles;
	bool DrawDebugLightTileVolumes;
	bool DrawDebugLightTileFbGrid;
	bool DrawDebugLightTileGrid;
	bool DrawDebugLightTileSources;
	bool ApplyShadowmapsEnable;
	bool GenerateShadowmapsEnable;
	bool DxSpotLightShadowmap16BitEnable;
	bool Ps3Shadowmap16BitEnable;
	bool Ps3SpotLightShadowmap16BitEnable;
	bool GenericEntityRendererEnable;
	bool SetupJobEnable;
	bool ShadowmapAccumBilinearEnable;
	bool LightWidthEnable;
	bool LightIntensityNormalizationEnable;
	bool LightCullEnable;
	bool LightDepthCullEnable;
	bool LightNormalCullEnable;
	bool LightConeCullEnable;
	bool LightTileOverlayEnable;
	bool Ps3ShadowmapTilingEnable;
	bool LightAttenuationThresholdEnable;
	bool SkyVisibilityEnvmapScalingEnable;
	bool ZBufferShadowTestEnable;
	bool ShadowmapsEnable;
	bool ShadowmapAccumEnable;
	bool ShadowmapCullVolumeEnable;
	bool OpaqueSortBySolutionEnable;
	bool MainOpaqueZPassEnable;
	bool DrawDebugDecalVolumes;
	bool PlanarReflectionEnable;
	bool TransparencyShadowmapsEnable;
	bool DynamicCullDrawOccludedBoxesEnable;
	bool PlanarReflectionBlur;
	bool DrawDebugPlanarReflectionCullFrustum;
	bool FreezePlanarReflectionCullFrustum;
	bool PlanarReflectionDebugCullMode;
	bool ShadowmapFixedMovementEnable;
	bool DecalVolumeEnable;
	bool DrawDebugPlanarReflection;
	bool FxaaEnable;
	bool DynamicCullSpuJobEnable;
	bool DynamicCullZBufferTestEnable;
	bool ViewFxEnable;
}

enum WorldViewMode {
	WorldViewMode_Default = 0,
	WorldViewMode_RawLinear = 1,
	WorldViewMode_RawLinearAlpha = 2,
	WorldViewMode_Diffuse = 3,
	WorldViewMode_Specular = 4,
	WorldViewMode_Emissive = 5,
	WorldViewMode_Normal = 6,
	WorldViewMode_Smoothness = 7,
	WorldViewMode_Material = 8,
	WorldViewMode_Light = 9,
	WorldViewMode_LightDiffuse = 10,
	WorldViewMode_LightSpecular = 11,
	WorldViewMode_LightIndirect = 12,
	WorldViewMode_LightTranslucency = 13,
	WorldViewMode_LightOverdraw = 14,
	WorldViewMode_SkyVisibility = 15,
	WorldViewMode_SkyVisibilityRaw = 16,
	WorldViewMode_Overdraw = 17,
	WorldViewMode_DynamicAO = 18,
	WorldViewMode_Occluders = 19,
	WorldViewMode_RadiosityLightMaps = 20,
	WorldViewMode_RadiosityDiffuseColor = 21,
	WorldViewMode_RadiosityTargetUV = 22,
	WorldViewMode_VelocityVector = 23,
	WorldViewMode_DistortionVector = 24
}

class XenonPresenceBackendData : PresenceBackendData {
	uint32 TitleId;
}

enum XenonShaderBranchType {
	XsbtDefault = 0,
	XsbtPredicate = 1,
	XsbtPredicateBlock = 2,
	XsbtBranch = 3
}

enum XenonTessellationMode {
	XenonTessellationMode_Discrete = 0,
	XenonTessellationMode_Continuous = 1,
	XenonTessellationMode_PerEdge = 2
}

class XorEntityData : EntityData {
	Realm Realm;
	bool In1;
	bool In2;
}

enum ZoomLevelActivateEventType {
	ZoomLevelActivateEventType_Disable = 0,
	ZoomLevelActivateEventType_Enable = 1,
	ZoomLevelActivateEventType_ToggleOnLightSwitch = 2
}

class ZoomLevelData : DataContainer {
	float FieldOfView;
	float DispersionMultiplier;
	float LookSpeedMultiplier;
	float SprintLookSpeedMultiplier;
	float MoveSpeedMultiplier;
	float SwayPitchMultiplier;
	float SwayYawMultiplier;
	float SupportedSwayPitchMultiplier;
	float SupportedSwayYawMultiplier;
	float TimePitchMultiplier;
	float TimeYawMultiplier;
	float RecoilMultiplier;
	float FadeToBlackDuration;
	float RecoilFovMultiplier;
	float CameraImpulseMultiplier;
	ZoomLevelActivateEventType OnActivateEventType;
	float StartFadeToBlackAtTime;
	float FadeFromBlackDuration;
	float StartFadeFromBlackAtTime;
	float ScreenExposureAreaScale;
	bool FadeToBlackInZoomTransition;
	bool UseFovSpecialisation;
	bool AllowFieldOfViewScaling;
}

struct ZoomLevelLockData {
	float OutlineTaggedDistance;
	LockType LockType;
}

struct ZoomLevelSpecificTransitionTime {
	int32 FromZoomLevel;
	int32 ToZoomLevel;
	float ZoomTransitionTime;
	float FovTransitionTime;
}
