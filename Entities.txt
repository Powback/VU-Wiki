struct CapturePointEntity : CapturePointEntityData {
  LinearTransform transform
  bool contested
  TeamID team
  TeamID attackingTeam
  float location
  string name
  bool captureEnabled
  bool attacked
  bool controlled
  CapturePointentityData data
}

struct LifeCounterEntity : LifeCounterEntityData {
  int startingLifeCounter
  int lifeCounter
  int reinforceCounter
  int objectiveAliveCount
  int baseAliveCount
  LinearTransform transform
}

struct TicketCounterEntity : TicketCounterEntityData {
  TeamId team
  int ticketCount
  int initialTicketCount
  TicketCounterEntityData data
}

struct SoldierEntity : SoldierEntityData{
  LinearTransform transform
  bool alive
  float deathTimer
  PlayerData player
  float health
  WeaponsComponentData weaponsComponent
  bool isManDown
  bool isFiring
  bool isReloading
  
  write:
  float authorativeYaw
  float authorativePitch
  bool aimingEnable
  bool forceInvisible
  float sprintRecoveryTimer
  bool wasSprinting
  
  client: (Read Only)
  GetCurrentWeaponSlot()
  GetCurrentWeaponName()
  GetCurrentPrimaryAmmo(
  GetCurrentSecondaryAmmo()
  GetWeaponCount()
  GetWeaponNameByIndex(idx)
  GetWeaponPrimaryAmmoByIndex(idx)
  GetWeaponSecondaryAmmoByIndex(idx)
  GetHeadPosition()
  
  Server: (read only)
  transform
  player
  isManDown
  isFiring
  isReloading
  
  Server Write
  detailedCollisionEnabled
  physicsEnabled
  forceInvisible
  aimingEnabled
  maxHealth
  waterLevel
  
  GetCurrentWeaponSlot()
  GetCurrentWeaponName()
  GetCurrentPrimaryAmmo()
  GetCurrentSecondaryAmmo()
  GetWeaponCount()
  GetWeaponNameByIndex(idx)
  GetWeaponPrimaryAmmoByIndex(idx)
  GetWeaponSecondaryAmmoByIndex(idx)
  SetPosition(vec3)
  Kill(bool killedByAdmin)
}

struct SpatialEntity {
  transform (Read/Write)
}
